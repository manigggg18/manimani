{
  
    
        "post0": {
            "title": "Unit Notes and Homework (Day 6)",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(temperature): celsius = temperature - 32 celsius = celsius * 5 / 9 return celsius outsideTemp = input(&quot;What is the temperature Outside?&quot;) print(convertFahrenheit(int(outsideTemp))) . -14.444444444444445 . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . quizAvg = 74 currentSc = 35 totalPts = 40 def tempAvg(): tempAvg = currentSc / totalPts tempAvg = tempAvg * 100 if tempAvg &gt; quizAvg: quizAvg = tempAvg print(quizAvg) . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may abstract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . def add(x , y): x + y def sub(x , y): x - y def mlt(x , y): x * y def div(x , y): x / y def mod(x , y): x % y test = &quot;ss sss s&quot; print(test.isupper()) . False .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson6",
            "relUrl": "/jupyter/lesson6",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Class Notes",
            "content": "Unit 2 . Bits . A bit (binary digit) is the smallest unit of data that a computer can process and store. A bit is always in one of two physical states, similar to an on/off light switch. The state is represented by a single binary value, usually a 0 or 1. . Bytes . In most computer systems, a byte is a unit of data that is eight binary digits long. A byte is the unit most computers use to represent a character such as a letter, number or typographic symbol. Each byte can hold a string of bits that need to be used in a larger unit for application purposes. . Hexadecimal / Nibbles . Hexadecimal is a numbering system with base 16. It can be used to represent large numbers with fewer digits. In this system there are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters -- A, B, C, D, E and F. . In computing and digital technology, a nibble is four consecutive binary digits or half of an 8-bit byte. When referring to a byte, it is either the first four bits or the last four bits, which is why a nibble is sometimes referred to as a half-byte. . Binary Numbers: . Unsigned Integer . Unsigned Integers (often called &quot;units&quot;) are just like integers (whole numbers) but have the property that they don&#39;t have a + or - sign associated with them. Thus they are always non-negative (zero or positive). We use uint&#39;s when we know the value we are counting will always be non-negative. . Signed Integer . A signed integer is a 32-bit datum that encodes an integer in the range [-2147483648 to 2147483647]. An unsigned integer is a 32-bit datum that encodes a nonnegative integer in the range [0 to 4294967295]. The signed integer is represented in twos complement notation. . Floating Point . A floating point number, is a positive or negative whole number with a decimal point. For example, 5.5, 0.25, and -103.342 are all floating point numbers, while 91, and 0 are not. Floating point numbers get their name from the way the decimal point can &quot;float&quot; to any position necessary. . Binary Data Abstractions: . Boolean . A data type that has one of two possible values which is intended to represent the two truth values of logic and Boolean algebra. . Unicode/ASCII . Unicode and ASCII are the most popular character encoding standards that are currently being used all over the world. Unicode is the universal character encoding used to process, store and facilitate the interchange of text data in any language while ASCII is used for the representation of text such as symbols, letters, digits, etc. in computers. . RGB . Colors in a computer program are represented by combining 3 &quot;pigments&quot;. These pigments are Red, Green, and Blue (which contrasts with the &quot;primary&quot; colors we are used to as a child). By combining some amount of Red, some amount of Green, and some amount of Blue, any (displayable) color can be achieved. . Variables . A variable is a value that can change, depending on conditions or on information passed to the program. Typically, a program consists of instruction s that tell the computer what to do and data that the program uses when it is running. . Data Types . A data type is a classification of data which tells the compiler or interpreter how the programmer intends to use the data. Most programming languages support various types of data, including integer, real, character or string, and Boolean. . Assignment Operators . Assignment operators are used to assign values to variables. . Lists . A list is a sequence of several variables, grouped together under a single name. Instead of writing a program with many variables x0 , x1 , x2 , … you can define a single variable x and access its members x[0] , x[1] , x[2] , etc. . 2D Lists . A 2D array in python is a two-dimensional data structure stored linearly in the memory. It means that it has two dimensions, the rows, and the columns, and thus it also represents a matrix. . Dictionaries . A dictionary is also called a hash, a map, a hashmap in different programming languages. The keys in a dictionary must be simple types (such as integers or strings) while the values can be of any type. Different languages enforce different type restrictions on keys and values in a dictionary. . Class . In object-oriented programming , a class is a template definition of the method s and variable s in a particular kind of object . Thus, an object is a specific instance of a class; it contains real values instead of variables. The class is one of the defining ideas of object-oriented programming. . Algorithms . A programming algorithm is a procedure or formula used for solving a problem. It is based on conducting a sequence of specified actions in which these actions describe how to do something, and your computer will do it exactly that way every time. An algorithm works by following a procedure, made up of inputs. . Sequence . In programming, sequence is a basic algorithm: A set of logical steps carried out in order. Computers need instructions in the form of an algorithm in order to complete a desired task, and this algorithm must have the correct order of steps, or sequence. . Selection . Selection is a programming construct where a section of code is run only if a condition is met. In programming, there are occasions when a decision needs to be made. Selection is the process of making a decision. The result of the decision determines which path the program will take next. . Iteration . In programming specifically, iterative refers to a sequence of instructions or code being repeated until a specific end result is achieved. Iterative development is sometimes called circular or evolutionary development. . Expressions . In programming language terminology, an “expression” is a combination of values and functions that are combined and interpreted by the compiler to create a new value, as opposed to a “statement” which is just a standalone unit of execution and doesn&#39;t return anything. . Comparison Operators . Comparison operators can compare numbers or strings and perform evaluations. Expressions that use comparison operators do not return a number value as do arithmetic expressions. Comparison expressions return either 1 , which represents true, or 0 , which represents false. . Truth Tables . A truth table is a display of the inputs to, and the output of a Boolean function organized as a table where each row gives one combination of input values and the corresponding value of the function. . Characters . The character in computer programming is an essential category of variable or constant that is defined and dealt with in code. . Strings . A string is traditionally a sequence of characters, either as a literal constant or as some kind of variable. The latter may allow its elements to be mutated and the length changed, or it may be fixed (after creation). . Length . It takes a string as a parameter and returns an integer as the length of that string. . Concatenation . Concatenation, in the context of programming, is the operation of joining two strings together. The term &quot;concatenation&quot; literally means to merge two things together. . Upper . The upper() method converts all lowercase characters in a string into uppercase characters and returns it. . Lower . The lower() method returns a string where all characters are lower case. Symbols and Numbers are ignored. . Traversing Strings . For strings this means that we would like to process one character at a time. Often we start at the beginning, select each character in turn, do something to it, and continue until the end. This pattern of processing is called a traversal. . Python If . If statements are logical blocks used within programming. They&#39;re conditional statements that tell a computer what to do with certain information. In other words, they let a program make &#39;decisions&#39; while it&#39;s running. They&#39;re comprised of a minimum of two parts, &#39;if&#39; and &#39;then&#39;. . Elif . In Python, elif is short for &quot;else if&quot; and is used when the first if statement isn&#39;t true, but you want to check for another condition. Meaning, if statements pair up with elif and else statements to perform a series of checks. . Else conditionals . Use if to specify a block of code to be executed, if a specified condition is true. Use else to specify a block of code to be executed, if the same condition is false. Use else if to specify a new condition to test, if the first condition is false. . Nested Selection Statements . Nested selection structures are used when more than one decision must be made before carrying out a task. Nesting is a programming activity, in which one program block is placed inside other program block of the same operation type. . Python For . A &quot;For&quot; Loop is used to repeat a specific block of code a known number of times. For example, if we want to check the grade of every student in the class, we loop from 1 to that number. When the number of times is not known before hand, we use a &quot;While&quot; loop. . While loops with Range . It can. You never change the value of x so it&#39;s always in the range. What does &quot;use a while loop on a range&quot; even mean? If it means &quot;iterate over the range&quot;, then the answer is &quot;because that&#39;s what for loops are for&quot;. . While loops with List . You can loop through the list items by using a while loop. Use the len() function to determine the length of the list, then start at 0 and loop your way through the list items by referring to their indexes. . Combining loops with conditionals to Break . Within the for loop, there is an if statement that presents the condition that if the variable number is equivalent to the integer 5, then the loop will break. Within the loop is also a print() statement that will execute with each iteration of the for loop until the loop breaks, since it is after the break statement. . Continue . Break statement stops the entire process of the loop. Continue statement only stops the current iteration of the loop. Break also terminates the remaining iterations. Continue doesn&#39;t terminate the next iterations; it resumes with the successive iterations. . Procedural Abstraction . Procedural abstraction is when we write code sections which are generalised by having variable parameters. The idea is that we have code which can cope with a variety of different situations, depending on how its parameters are set when it is called. . Python Def procedures . A Function is a series of Python statements begins by a def , followed by the function name and enclosed in parenthesis. A Function may or may not return a value. A Function procedure can take arguments (constants, variables, or expressions that are passed by a calling procedure). . Parameters . A parameter is a named variable passed into a function. Parameter variables are used to import arguments into functions. For example: function example(parameter) { console. . Return Values . A return is a value that a function returns to the calling script or function when it completes its task. A return value can be any one of the four variable types: handle, integer, object, or string. The type of value your function returns depends largely on the task it performs. . Code Examples . num1 = 15 num2 = 25 num3 = 42 num2 = num3 num3 = num1 num1 = num2 print(num1) print(num2) print(num3) . 42 42 15 . num2 += num1 print(num1) print(num2) print(str(num1)+ str(num2)) print(num1 + num2) . 42 84 4284 126 . colorsList=[&quot;pink&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;orange&quot;] print(colorsList) colorsList=[] # can be used if you want to create a list that can be filled with values later # copy of the list is made; the list isn&#39;t sorted in place def Reverse(lst): # defining variable: lst new_lst = lst[::-1] return new_lst lst = [&quot;pink&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;black&quot;] print(Reverse(lst)) # reverse 1st . [&#39;pink&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;orange&#39;] [&#39;black&#39;, &#39;blue&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;purple&#39;, &#39;green&#39;, &#39;pink&#39;] . questions = 3 correct = 0 # Use a dictionary for the questions quesList = [&quot;To be or not to be?&quot;, &quot;What&#39;s your name?&quot;, &quot;How was break?&quot;, &quot;Is this homework?&quot;] # Use a dictionary for the correct solutions soluList = [&quot;idk&quot;, &quot;mani&quot;, &quot;fine&quot;, &quot;yea&quot;] for i in quesList: print(i) value1 = input (&quot;Q1&quot;) value2 = input (&quot;Q2&quot;) value3 = input (&quot;Q3&quot;) value4 = input (&quot;Q4&quot;) for n in soluList: if value1 == n: correct += 1 for x in soluList: if value2 == x: correct += 1 for z in soluList: if value3 == z: correct += 1 for y in soluList: if value4 == y: correct += 1 print(&quot;Final score: &quot; + str(correct)) . To be or not to be? What&#39;s your name? How was break? Is this homework? Final score: 4 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 print(Result) . 0 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] index = 0 # change the value &quot;soccer&quot; to &quot;hockey&quot; sports.remove(sports[index]) sports.insert(0, &quot;hockey&quot;) print(sports) . [&#39;hockey&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] index = 0 inp = input().lower() def show_letters(inp): for letter in inp: for let in words: if letter == let[index]: print(let) show_letters(inp) . bravo alfa tango mike alfa november . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] def print_matrix3(matrix): for a in matrix: itr = iter(a) print(next(itr), next(itr), next(itr)) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . letters = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] letters_lower1 = [letter.lower() for letter in letters[1]] # additional lines of code for better capitalization letters_lower2 = [letter.lower() for letter in letters[2]] letters_lower3 = [letter.lower() for letter in letters[3]] print(letters[3][6] + letters_lower2[0] + letters_lower3[5] + letters_lower1[7]) print(letters[3][6] + letters_lower2[0] + letters_lower1[5]) print(letters[0][9] + letters[0][9]) . Mani May 18 . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and False) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . cost = 30 stat = 1 if stat &lt; 1: print(&quot;this product is no good&quot;) else: if cost &gt; 50 and stat == 1: print(&quot;this product is too expensive&quot;) else: if 50 &gt; cost &gt; 25 and stat == 1: print(&quot;this is a regular product&quot;) else: print(&quot;this is a cheap product&quot;) . this is a regular product . questions = { &quot;Which movie is a comedy?&quot;:[&quot;a. The King&#39;s Man&quot;,&quot;b. What&#39;s eating Gilbert Grape&quot;, &quot;c. About Time&quot;, &quot;d. Batman&quot;], &quot;Which movie features 50 Cent?&quot;:[&quot;a. Shaft&quot;, &quot;b. 8 Mile&quot;,&quot;c. Southpaw&quot;, &quot;d. Batman&quot;], &quot;Who is the best Batman?&quot;:[&quot;a. Christian Bale&quot;,&quot;b. Ben Affleck&quot;, &quot;c. Robert Pattinson&quot;, &quot;d. Kevin Conroy&quot;] } answers = { &quot;Which movie is a comedy?&quot;:&quot;c&quot;, &quot;Which movie features 50 Cent?&quot;:&quot;c&quot;, &quot;Who is the best Batman?&quot;:&quot;d&quot; } score = 0 print(&quot;Ready for a movie quiz?&quot;) for q,a in questions.items(): print(q) print(*a) inp = input(&quot;Enter Your Answer&quot;) if(answers.get(q)==inp): score = score +1 else: print(&quot;SYNTAX ERROR...jk try again&quot;) break print(&#39;Final Score:&#39;, score) . Ready for a movie quiz? Which movie is a comedy? a. The King&#39;s Man b. What&#39;s eating Gilbert Grape c. About Time d. Batman Which movie features 50 Cent? a. Shaft b. 8 Mile c. Southpaw d. Batman Who is the best Batman? a. Christian Bale b. Ben Affleck c. Robert Pattinson d. Kevin Conroy Final Score: 3 . import random # module for generating random item from a list nums = list(range(1, 21)) # list of numbers num1 = int(random.choice(nums)) # int takes the integer, random utilizes the module num2 = int(random.choice(nums)) # the three numbers are generated here num3 = int(random.choice(nums)) def end(): # procedure for endgame print(&quot;Okay I guess&quot;) rd = input(&quot;Are you ready? y/n&quot;) # useless prompt to initiate the game if rd == &quot;y&quot;: print(num1) print(&quot;continue?y/n&quot;) # basically a checkpoint cn = input() if cn == &quot;y&quot;: print(num2) print(&quot;continue?y/n&quot;) cn2 = input() if cn2 == &quot;y&quot;: print(num3) if num1 &gt; num2 and num1 &gt; num3: # checks if num1 is the greatest print(&quot;Your Score:&quot; , num1) else: if num2 &gt; num1 and num2 &gt; num3: # checks if num2 is the greatest print(&quot;Your Score:&quot; , num2) else: if num3 &gt; num1 and num3 &gt; num2: # checks if num3 is the greatest print(&quot;Your Score:&quot; , num3) else: end() else: end() else: end() . 4 continue?y/n 18 continue?y/n 8 Your Score: 18 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/nv",
            "relUrl": "/jupyter/nv",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit Notes and Homework (Day 5)",
            "content": "3.9 Part 1 . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . Lesson 1 | Defining Algorithms . What is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions! . Algorithms can be written in different ways and still accomplish the same tasks . | Algorithms that appear similar can yield different side effects or results. . | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) . | Different algorithms can be developed or use to solve the same problem. . | . Example 1 | What happens if we test the algorithm with different outputs? . The pseudocode above is translated to python for you. . Record what your outputs are when you enter 95 degrees F, does the algorithm yield the same result? . The conditional below is nested . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then 95, what do you notice? . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) if (temp &lt; 65): print(&quot;It is too cold outside!&quot;) # Input 54 and then Input 95, what do you notice? . NOW RECORD with another output . Record what your outputs are when you enter 54, does the algorithm yield the same result this time? . *Now use 95 as an input for the two code blocks above. . Even though an algorithm&#39;s code can look the same, you have to be careful, they can always yield different results. When constructing algorithms you want to make sure that your code corresponds with what you want as your output. You set the limit of your code and you decide what the code&#39;s output is. . Conditionals vs. Booleans . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . Exercise . Learning how to utilize conditionals and booleans are important for developing algorithms. Use this exercise to help you. . Can either Boolean expression on the right replace the conditional on the left? Assume isWeekday and isHoliday are Boolean variables. . *NOTE = you can edit the variables to check the conditions needed! . IsHoliday = False IsWeekday = True if IsHoliday: driveWork = True else: if IsWeekday: driveWork = True else: driveWork = False print(driveWork) . Logically thinking about conditionals and booleans . Now the problem may seem confusing, but the best way to develop an algorithm is to think about all the possible results that can be potentially be outputted. . So if IsHoliday is set to true, then driveWork is automatically equal to false and it does not matter what value of isWeekday is. This must mean that one of the conditionals must be NOT IsHoliday. . In the case that lets say IsHoliday is set to false, then the variable for weekday needs to be checked. If it&#39;s true then driveWork is true, if it&#39;s false then driveWork is false. This must mean that the other conditional isWeekday. . Combining both conditionals, you get option 2, which is not IsHoliday and IsWeekday. This is why option 2 is right! . Example 3 | Conditionals vs Booleans . The following algorithms are intended to sum the odd numbers from 1-9. Which algorithms work as intended? . Below, I have translated the block code into python, import this to your jupyter notebook and record the result. What do you notice? . First block . sum = 1 counter = 3 #iteration var = 0 while (var &lt; 4): #while the var is &lt;= 4, it executes those commands, once it exceeds it hits the else command sum = sum + counter counter = counter + 2 var = var + 1 # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms. else: print(sum) . Second block . sum = 0 counter = 9 #iteration while (counter &gt;= 1): sum = sum + counter counter = counter - 2 print(sum) . When we start our initializing left sum as 1 counter as 3 we had no iterations yet. Remember we&#39;re going to have to repeat this four times because the block code prompts us to repeat 4 times, so we iterate. So as we go through and follow what the block gives us. . So you see that the sum does work, it does sum up the odd numbers from 1-9 . Now lets look at the right block. . Sum is set to 0 Counter is set to 9 We must repeat until the counter &lt; 1 is true. . So we keep adding until -1, that is when the counter &lt; 1 is true, so we stop . So why is it important to understand that algorithms can be written in different ways and still accomplish the same task? . An algorithm is beautiful that way, just because you think of solving a problem differently, doesn&#39;t mean your wrong, . 3.9 Part 2 . Flowcharts . Flowcharts can help you visualize the functionality of an algorithm . | They are a good way to double check whether or not your algorithm is achieving its purpose . | . How To Set Up A Flowchart . label the start point . | Define any and all variables you may need . | Consider the first question you want the algorithm to ask . | Write what you want the algorithm to do if the answer to that question is yes (or true) . | Write what you want the algorithm to do if the answer to that question is no (or false) . Steps 3-5 are the steps to creating code that uses a process called selection (you can convert the question from step 3 to a conditional if-statement in code) | . | Write out all necessary steps for the algorithm to function properly . | You may want your algorithm to iterate some steps until a condition is met . You can write the steps that need to be repeated, then draw an arrow from the last step to a step above that contains a conditional statement | . | determine a way to reach the end goal | Selection vs. Iteration . Selection: . A process used in algorithms where a conditional if-statement leads to one of two outcomes . Outcome 1: if the conditional statement is true, something will happen . | Outcome 2: if the conditional statement is false, something else will happen . | . | . | Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied . Once the condition is satisfied, then an outcome is produced . | This can take the form of a for-loop, while-loop, and/or if-statement . | . | . | . Example A . Consider this situation: . You are shopping for your favorite food at your favorite supermarket . | You see that there is a sale on wheat products for 35% off . | There is another sale on produce for 20% off . | These sales are mutually exclusive . | Tax on all items is 8% . | . | Your TASK: . Create a flowchart for an algorithm that can be used to calculate the cost of your favorite item | . | . Example A Possible Solution (using Selection) . 3.9 Part 3 . For Algorithms How to combine and/or modify an existing algorithm. | . | . Benefits of combining algorithms can reduce development time, testing time, and simplify the identification of errors. | . | . Example in Class . Rules . step/rule 1: start with any positive integer | step/rule 2: if the preceding term is even; divide by 2 | step/rule 3: if the preceding term is odd; multiply by 3 and add 1 | step/rule 4: repeat steps until you arrive at 1 | fact: the sequence should ALWAYS end up at 1 if repeated. | . Algorithm to Start (Determining Whether a Number is Even or Odd) . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): print(&quot;the number is even&quot;) else: print(&quot;the number is odd&quot;) # Run this cell to see how it works . How can we modify this code to match our goal . Hint: uses arithmetic operations | Hint: look at the steps of the equation and try and modify it to fit them | Must display all numbers used in it | . Solution . Step 1 . steps/rules 2 &amp; 3. | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): varx == varx/2 # Change print to the function else: varx == varx * 3 + 1 # Change print to the function print(varx) . Step 2 . step/rule 4; here we add the loop | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) while varx != 1: if (varx %2 == 0): varx = varx/2 # Change print to the function else: varx = varx * 3 + 1 # Change print to the function print(varx) . Step 3 . Display all values throughout the algorithm | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) print(varx) while varx != 1: if (varx %2 == 0): varx = varx/2 print(varx) # add Display else: varx = varx * 3 + 1 print(varx) # add Display print(varx) # Final # Should be 1 every time . Takeaways . You can use code you&#39;ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Hacks . create another algorithm using a famous mathematical algorithm such as the &quot;collatz conjecture.&quot; and explain your steps in a post on a blog. | . 3.11 Binary Search . Goals/Objectives: . detirmine number of iterations required to find vlue in data set. | explain requirements for binary search | . What is Binary Search? . Binary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | . About Binary Search: . Binary Search Algorithm starts in the middle of a data set of numbers and eliminates half the data. This process reapeats until the desired value is found or until all elements have been eliminated. | In order to use binary search effectivly and properly, data must be stored in order | COLLEGE BOARD INDEX STARTS AT 1 NOT 0 | . Think about how you would you would try to find a certain number in this set. . (IMAGE HERE) . One way would be to line up the numbers and count them individually untill you find the desired value. . When working with large data sets with lots of numbers, methods like these wont work . Instead, a Binary Search would be more effective. | . (IMAGE HERE) . Here we can see the numbers are set in an increasing order. Setting numbers in an increasing or decreasing is needed for a binary search . Binary search is started with the middle number first Middle number is found by taking the higest index number plus the lowest and divided by two | . | Binary Search can be represented using a tree as shown below | . (IMAGE HERE) . . Heres an easy way to put it: . binary search fidns the desired element by continuously chopping the search area in half | say the element you are looking for is &#39;f&#39; | . [a b c d e f g h] . We would start in the middle at element &#39;d&#39; | becuase our target is greater than d we will eliminate everything left of &#39;d&#39; including &#39;d&#39; (chopping it in half) . [e f g h] is what now remains . again we would &#39;chop in half&#39; | say we iterate through &#39;g&#39; and &#39;h&#39;, our desired element is still not found so we would eliminate &#39;g; and &#39;h&#39; and continue the process | . [e f] . now we are down to 2 elements | &#39;chopping in half&#39; will give us our desired element | . [f] . | . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 8 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . We have created a function called binary_search() function which takes two arguments - a list to be sorted and a number to be searched. . | We have declared two variables to store the lowest and highest values in the list. The lowest is assigned initial value to 0, the highest to len(list1) 1 and mid as 0. . | Next, we have declared the while loop with the condition that the lowest is equal and smaller than the highest. The while loop will iterate if the number has not been found yet. . | In the while loop, we find the mid value and compare the index value to the number we are searching for. . | If the value of the mid-index is smaller than n, we increase the mid value by 1 and assign it to the low. The search moves to the left side. . | Otherwise, if the value of mid index is larger than n, we decrease the mid value by 1 and assign it to the high. The search moves to the right side. . | If the n is equal to the mid value then return mid. . | This will happen until the low is equal and smaller than the high. . | If we reach at the end of the function, then the element is not present in the list. We return -1 to the calling function. . | . . Hacks . Using my example above and steps below, create your own iteration using binary search . Steps . Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | . Homework Assignment (DUE FRIDAY 12/09 BY 5:00 PM) . Consider this situation: . You&#39;re playing a short game using a random number generator from 1 to 20 . On each turn, a player will generate 3 random numbers . | They get to keep the highest number that they generate as their score . | . | . | . Your TASK: . Create a flowchart that can be used to write an algorithm that calculates a player&#39;s score after a turn . NOTE: Don&#39;t forget the syntax for Flowcharts! (each shape represents an action) . | Try to implement selection and/or iteration in your algorithm . | Please do this using Google Drawing. It can be found in your Google Drive if you click New &gt; More &gt; Google Drawings . | . | Write the working algorithm in Python . Make sure to initialize / define any variables you may need . | Add comments to your code! . | . | How to submit: . Make a shareable link to your Flowchart with commenting access through Google Drive&#39;s &quot;Share&quot; feature . | Make a comment with the link at the top of the code block that holds your algorithm (use # for comments in Python) . | Submit a link to your algorithm (with the commented link to Flowchart) in the comment/issue found on the schedule . | Grading . DUE FRIDAY 12/09 BY 5:00 PM . | LATE PENALTY: -0.2 . | You will be graded based on: . how functional your algorithm is . | how well your Flowchart is organized . | . | . If something comes up, feel free to DM us on Slack . import random # module for generating random item from a list nums = list(range(1, 21)) # list of numbers num1 = int(random.choice(nums)) # int takes the integer, random utilizes the module num2 = int(random.choice(nums)) # the three numbers are generated here num3 = int(random.choice(nums)) def end(): # procedure for endgame print(&quot;Okay I guess&quot;) rd = input(&quot;Are you ready? y/n&quot;) # useless prompt to initiate the game if rd == &quot;y&quot;: print(num1) print(&quot;continue?y/n&quot;) # basically a checkpoint cn = input() if cn == &quot;y&quot;: print(num2) print(&quot;continue?y/n&quot;) cn2 = input() if cn2 == &quot;y&quot;: print(num3) if num1 &gt; num2 and num1 &gt; num3: # checks if num1 is the greatest print(&quot;Your Score:&quot; , num1) else: if num2 &gt; num1 and num2 &gt; num3: # checks if num2 is the greatest print(&quot;Your Score:&quot; , num2) else: if num3 &gt; num1 and num3 &gt; num2: # checks if num3 is the greatest print(&quot;Your Score:&quot; , num3) else: end() else: end() else: end() . 13 continue?y/n 5 continue?y/n 9 Your Score: 13 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson5",
            "relUrl": "/jupyter/lesson5",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit Notes and Homework (Day 3)",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | A few ways these operators could be used... | . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . def Average(lst): return sum(lst) / len(lst) lst = [90, 65, 60, 75, 95] average = Average(lst) print(&quot;Average of the list =&quot;, round(average, 2)) . Average of the list = 77.0 . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and False) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 100 num2 = 400 sum = num1 + num2 if sum == 200: print(&quot;yea 200&quot;) else: print(sum) . 500 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | Basics of a nested conditional: | Block Coding Visual of Nested Conditionals: | Example Psuedocode of Nested Conditional Statements | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time Decide which ones are false to skip and which ones are true to execute | . | . time = 3 score = 1000 lives = 5 if time &lt; 3 and score &gt; 1000: lives = lives + 3 else: if time &lt; 3 or score &gt; 1000: lives = lives + 1 else: lives = lives - 1 print(lives) . 4 . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . Output: Please come to retake up to a 90 next week at tutorial! . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Output: Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes! . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | meHours = 9 if 10 &gt; meHours &gt; 8: print(&quot;experienced with 90k&quot;) else: if 10 &lt; meHours: print(&quot;experienced with 150k&quot;) else: print(&quot;inexperienced with 50k&quot;) . inexperienced with 50k . Hacks Assignments: . cost = 30 stat = 1 if stat &lt; 1: print(&quot;this product is no good&quot;) else: if cost &gt; 50 and stat == 1: print(&quot;this product is too expensive&quot;) else: if 50 &gt; cost &gt; 25 and stat == 1: print(&quot;this is a regular product&quot;) else: print(&quot;this is a cheap product&quot;) . this is a regular product . questions = { &quot;Which movie is a comedy?&quot;:[&quot;a. The King&#39;s Man&quot;,&quot;b. What&#39;s eating Gilbert Grape&quot;, &quot;c. About Time&quot;, &quot;d. Batman&quot;], &quot;Which movie features 50 Cent?&quot;:[&quot;a. Shaft&quot;, &quot;b. 8 Mile&quot;,&quot;c. Southpaw&quot;, &quot;d. Batman&quot;], &quot;Who is the best Batman?&quot;:[&quot;a. Christian Bale&quot;,&quot;b. Ben Affleck&quot;, &quot;c. Robert Pattinson&quot;, &quot;d. Kevin Conroy&quot;] } answers = { &quot;Which movie is a comedy?&quot;:&quot;c&quot;, &quot;Which movie features 50 Cent?&quot;:&quot;c&quot;, &quot;Who is the best Batman?&quot;:&quot;d&quot; } score = 0 print(&quot;Ready for a movie quiz?&quot;) for q,a in questions.items(): print(q) print(*a) inp = input(&quot;Enter Your Answer&quot;) if(answers.get(q)==inp): score = score +1 else: print(&quot;SYNTAX ERROR...jk try again&quot;) break print(&#39;Final Score:&#39;, score) . Ready for a movie quiz? Which movie is a comedy? a. The King&#39;s Man b. What&#39;s eating Gilbert Grape c. About Time d. Batman Which movie features 50 Cent? a. Shaft b. 8 Mile c. Southpaw d. Batman SYNTAX ERROR...jk try again Final Score: 1 . questions = { &quot;Which movie is a comedy?&quot;:[&quot;a. The King&#39;s Man&quot;,&quot;b. What&#39;s eating Gilbert Grape&quot;, &quot;c. About Time&quot;, &quot;d. Batman&quot;], &quot;Which movie features 50 Cent?&quot;:[&quot;a. Shaft&quot;, &quot;b. 8 Mile&quot;,&quot;c. Southpaw&quot;, &quot;d. Batman&quot;], &quot;Who is the best Batman?&quot;:[&quot;a. Christian Bale&quot;,&quot;b. Ben Affleck&quot;, &quot;c. Robert Pattinson&quot;, &quot;d. Kevin Conroy&quot;] } answers = { &quot;Which movie is a comedy?&quot;:&quot;c&quot;, &quot;Which movie features 50 Cent?&quot;:&quot;c&quot;, &quot;Who is the best Batman?&quot;:&quot;d&quot; } score = 0 print(&quot;Ready for a movie quiz?&quot;) for q,a in questions.items(): print(q) print(*a) inp = input(&quot;Enter Your Answer&quot;) if(answers.get(q)==inp): score = score +1 else: print(&quot;SYNTAX ERROR...jk try again&quot;) break print(&#39;Final Score:&#39;, score) . Ready for a movie quiz? Which movie is a comedy? a. The King&#39;s Man b. What&#39;s eating Gilbert Grape c. About Time d. Batman Which movie features 50 Cent? a. Shaft b. 8 Mile c. Southpaw d. Batman Who is the best Batman? a. Christian Bale b. Ben Affleck c. Robert Pattinson d. Kevin Conroy Final Score: 3 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson3",
            "relUrl": "/jupyter/lesson3",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit Notes and Homework (Day 4)",
            "content": "Lists . What are lists? . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . List examples in Python, JavaScript, and Pseudocode. . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] print (fruits) . const fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;]; . fruits ← [apple, grape, strawberry] . Lists are just one of four collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) . grape . Methods in Lists . Method Definition Example . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] index = 0 # change the value &quot;soccer&quot; to &quot;hockey&quot; sports.remove(sports[index]) sports.insert(0, &quot;hockey&quot;) print(sports) . [&#39;hockey&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list sports.insert(2, &quot;golf&quot;) print(sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;golf&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? . Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension . Lists, tuples, dictionaries, and sets are iterable objects. They are the &#39;containers&#39; that store the data to iterate. . Each of these containers are able to iterate with the iter() command. . There are 2 types of iteration:definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met . Iterator? Iterable? Iteration? . When an object is iterable it can be used in an iteration . | When passed through the function iter() it returns an iterator . | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. . | . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? . | Loops take essentially what we did above and automates it, here are some examples. . | . Using the range() function . But wait, there&#39;s more . Need to save even more time? The above is useful for many occasions, but can get tedious fast, in this case, use range() . Else, elif, and break . For when 1 statement isn&#39;t enough . Else:when the condition does not meet, do statement()- Elif: when the condition does not meet, but meets another condition, do statement()&gt; Break:stop the loop . 2D Iteration . 2D Arrays . A 2D array is simply just a list of lists. The example below is technically correct but... Conventially 2D arrays are written like below. This is because 2D arrays are meant to be read in 2 dimensions (hence the name). Writing them like below makes them easier to visualize and understand. . HW . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] index = 0 inp = input().lower() def show_letters(inp): for letter in inp: for let in words: if letter == let[index]: print(let) show_letters(inp) # btw the input is batman . bravo alfa tango mike alfa november . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . def print_matrix3(matrix): for a in matrix: itr = iter(a) print(next(itr), next(itr), next(itr)) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . Alternatively, find a way to print the matrix using the iter() function you already learned. Or use both! . letters = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] letters_lower1 = [letter.lower() for letter in letters[1]] # additional lines of code for better capitalization letters_lower2 = [letter.lower() for letter in letters[2]] letters_lower3 = [letter.lower() for letter in letters[3]] print(letters[3][6] + letters_lower2[0] + letters_lower3[5] + letters_lower1[7]) print(letters[3][6] + letters_lower2[0] + letters_lower1[5]) print(letters[0][9] + letters[0][9]) . Mani May 18 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson4",
            "relUrl": "/jupyter/lesson4",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit Notes and Homework (Day 2)",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task.. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = subtring(Noun, 1, 7) yoda = concat(Adjective2, &quot; &quot;, Adjective, &quot; &quot;, abrev, &quot; &quot;,Verb, &quot;.&quot;) display[yoda] . Problem 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = concat(vote1, &quot; &quot;, vote2) display[votes] .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit Notes and Homework (Day 1)",
            "content": "3.1 &amp; 3.2 . link . Lesson . Variables . A variable is an abstraction inside a program that can hold a value. . It organizes data by labeling it with a descriptive name. . It consists of three parts: name, value, and type. . Using meaningful variables names helps with readability of program code and understanding of what values are represented by the variables. . Variables should not be specific. . Not too vague either. . Use 1-2 capitalized letters . No spaces . Types of data: . Integer: A number | Text/string: A word | Boolean: Data that determines if something is true or false | . A list of data can also be stored in variables. Why is that useful? . print/retrieve specific values in the list without creating a lot of variables | easily remove/add/change items into the list | . num1 = 5 num2 = 9 num1 = num2 print(num1) print(num2) . 9 9 . num1 = 15 num2 = 25 num3 = 42 num2 = num3 num3 = num1 num1 = num2 print(num1) print(num2) print(num3) . 42 42 15 . num2 += num1 print(num1) print(num2) print(str(num1)+ str(num2)) print(num1 + num2) . 42 84 4284 126 . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation . Variables and lists are primary tools in data abstraction . Provides a separation between the abstract properties of a data type and the concrete details of its representation . Lists &amp; Strings . List = ordered sequence of elements . Element = individual value in a list that is assigned to a unique index . Index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index . String = ordered sequence of characters (Letters, numbers, special characters) . Note: index starts at 1 for AP Exam, must be whole numbers, cannot be negative, and goes up to the number of elements in the list . Managing the Complexity of a Program through Data Abstraction . Data abstractions help manage complexity in programs by giving a collection of data a name without referencing the specific details of the representation . Developing a data abstraction to use in a program can result in a program that is easier to develop and maintain . Using Lists as Data Abstractions . What are Lists? . Allow for data abstraction . | Bundle variables together . | Store multiple elements . | Allows multiple related items to be treated as a single value . | Give one name to a set of memory cells . | Can keep adding elements to it as needed . | Can store elements as a single variable by using a list . | . 3 Types of List Operations . Assigning values to a list at certain indices . | Creating an empty list and assigning it to a variable . | Assigning a copy of one list to another list (setting one list equal to another list) . | colorsList=[&quot;pink&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;orange&quot;] print(colorsList) colorsList=[] # can be used if you want to create a list that can be filled with values later # copy of the list is made; the list isn&#39;t sorted in place def Reverse(lst): # defining variable: lst new_lst = lst[::-1] return new_lst lst = [&quot;pink&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;black&quot;] print(Reverse(lst)) # reverse 1st . color1=&quot;green&quot; color2=&quot;red&quot; color3=&quot;pink&quot; color4=&quot;purple&quot; color5=&quot;blue&quot; color6=&quot;brown&quot; print(color1) print(color2) print(color3) print(color4) print(color5) print(color6) # OR colorList=[&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] for i in colorList: print(i) . green red pink purple blue brown green red pink purple blue brown . Homework . questions = 3 correct = 0 # Use a dictionary for the questions quesList = [&quot;To be or not to be?&quot;, &quot;What&#39;s your name?&quot;, &quot;How was break?&quot;, &quot;Is this homework?&quot;] # Use a dictionary for the correct solutions soluList = [&quot;idk&quot;, &quot;mani&quot;, &quot;fine&quot;, &quot;yea&quot;] for i in quesList: print(i) value1 = input (&quot;Q1&quot;) value2 = input (&quot;Q2&quot;) value3 = input (&quot;Q3&quot;) value4 = input (&quot;Q4&quot;) for n in soluList: if value1 == n: correct += 1 for x in soluList: if value2 == x: correct += 1 for z in soluList: if value3 == z: correct += 1 for y in soluList: if value4 == y: correct += 1 print(&quot;Final score: &quot; + str(correct)) . To be or not to be? What&#39;s your name? How was break? Is this homework? Final score: 4 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson1",
            "relUrl": "/jupyter/lesson1",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Section 3 Notes and Plans",
            "content": "Section 3 Video 3 Notes and Planning . Arithmetic Operations in Programming . Link to Video . Arithmetic operations exist in most programming languages. . Include: Subtraction, Addition, Multiplication, Division, Getting the Remainder . All operations are represented by symbols. . | Subtraction: “-“ . | Ex: a - b . | Addition: “+” . | Ex: a + b . | Multiplication: “*“ . | Ex: a * b . | Division: / . | Ex: a / b . | Getting the Remainder: MOD . | Ex: a MOD b | . In all of these scenarios, a/b can be an expression or just a simple number. . Just like how numbers can be assigned to variables, a set of operations involving different values and numbers can also be assigned to a variable . Ex: . num1 ← 20 . num2 ← num1 + 98 . num3 ← num2 * num1 + 8 / num2 . Arithmetic operations in programming are performed in the same order as operations in mathematics. For example, operations in parentheses should be done first. . Idea for Hacks . A series of challenges and problems in the form of a quiz including arithmetic operations and expressions. . Possible Options: Students will clone a fastpages repository in order to complete the given assignments and interact with different elements. . Link to planning issue .",
            "url": "https://manigggg18.github.io/manimani/lesson",
            "relUrl": "/lesson",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Binary",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | .",
            "url": "https://manigggg18.github.io/manimani/binary",
            "relUrl": "/binary",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Trimester 1 Final Corrections Blog",
            "content": "Trimester Final 1 Blog . . . . Q36 Store even numbers in evenList . Consider the following code segment, which is intended to store ten consecutive even integers, beginning with 2, in the list evenList. Assume that evenList is initially empty. . i ← 1 . REPEAT 10 TIMES . { . &lt; MISSING CODE &gt; . } . Which of the following can be used to replace &lt; MISSING CODE &gt; so that the code segment works as intended? . My Answer: . i ← i + 1 . APPEND(evenList, 2 * i) . Correct Answer: . APPEND(evenList, 2 * i) . i ← i + 1 . For the first iteration of the loop, twice the value of i, or 2, is appended to evenList, and then i is incremented to 2. For the second iteration of the loop, twice the value of i, or 4, is appended to the list, and then i is incremented to 3. This continues eight more times, appending the next eight even numbers to evenList. This code segment will generate the list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]. . . . Q39 Valid index for wordList . The list wordList contains a list of 10 string values. Which of the following is a valid index for the list? (4, 2.5, -2, “hello”) . My Answer: “hello” . Correct Answer: 4 . While the list elements are strings, the indices of a list are typically nonnegative integers. . . . Q42 Value of sum after IF ELSE IF . What is the value of sum after the code segment is executed? . . My Answer: 12 . Correct Answer: 16 . The first three statements assign values to the variables. Since num1 &lt; num2 evaluates to false, the body of the ELSE block is executed and num3 is assigned the value 4. Since num2 ≥ num3 evaluates to true, the body of the second IF block is executed and num1 is assigned the value 8. Lastly, sum is assigned the value of 8 + 4 + 4, or 16. . . . Q43 Value of x after REPEAT UNTIL block . What is the value of result after the code segment is executed? . . My Answer: 6 . Correct Answer: 15 . The variables x and result are initialized to 0. Inside the loop, result is increased by x and x is increased by 1. The loop terminates when x exceeds 5. Therefore, result is assigned the sum of the integers from 0 to 5, or 15. . . . Q48 Which variables are equal to 50 after assignments . Consider the following code segment. . x ← 25 . y ← 50 . z ← 75 . x ← y . y ← z . z ← x . Which of the variables have the value 50 after executing the code segment? . My Answer: z y and z . Correct Answer: x and z . The first three statements assign values to the variables. The fourth statement assigns the value of y (which is 50) to x. The fifth statement assigns the value of z (which is 75) to y. The sixth statement assigns the value of x (which is 50) to z. Therefore, x and z both have the value 50. . . . Q50 Use concat and prefix to form initials . Consider the following procedures for string manipulation. . Procedure Call Explanation . concat(str1, str2) | Returns a single string consisting of str1 followed by str2. For example, concat(&quot;key&quot;, &quot;board&quot;) returns &quot;keyboard&quot;. | . prefix(str, length) | Returns the first length characters of str or str if length is greater than the number of characters in str. For example, prefix(&quot;delivery&quot;, 3) returns &quot;del&quot; and prefix(&quot;delivery&quot;, 100) returns &quot;delivery&quot;. | . The variable initials is to be assigned a string consisting of the first letter of the string firstName followed by the first letter of the string lastName. Which of the following assigns the correct string to initials ? . My Answer: . initials ← prefix(concat(firstName, lastName), 2) . Correct Answer: . initials ← concat(prefix(firstName, 1), prefix(lastName, 1)) . This statement will correctly form the initials. It uses calls to prefix to obtain the first letters of each name, then uses a call to concat to concatenate the two letters in the correct order. .",
            "url": "https://manigggg18.github.io/manimani/tri1final",
            "relUrl": "/tri1final",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "N@tM Blog",
            "content": "Night at the Museum Blog . 1. GPA Calculator (For College Students, Includes Preference Options) . . . . 2. NBA/Sports Data API (API Dedicated to Recording NBA Stats) . . . . 3. Programming Flashcards and Quiz (Made by CSA students) . . . Lawnmowers Arcade Fastpages . . . . . .",
            "url": "https://manigggg18.github.io/manimani/natmblog",
            "relUrl": "/natmblog",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Fetch of Backend Songs",
            "content": "| JavaScript | Table | API | Songs | . Song banger not banger .",
            "url": "https://manigggg18.github.io/manimani/songs",
            "relUrl": "/songs",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Python Web API Endpoints using Songs",
            "content": "import random songs_data = [] song_list = [ &quot;Jeff Russo, Noah Hawley - Burning Down the House&quot;, &quot;Radiohead - Everything in Its Right Place&quot;, &quot;UNKLE - Lonely Souls&quot;, &quot;Kendrick Lamar - Sing About Me, I&#39;m Dying of Thirst&quot;, &quot;The Verve - One Day&quot;, &quot;Thom Yorke - Analyze&quot;, &quot;Atoms for Peace - Reverse Running&quot;, &quot;Portishead - The Rip&quot;, &quot;Nick Drake - Riverman&quot;, &quot;The Doors - The End&quot;, &quot;The Police - Synchronicity II&quot;, &quot;Incubus - Quicksand&quot;, &#39;Black Angels - Black Grease&#39; ] def initSongs(): item_id = 0 for item in song_list: songs_data.append({&quot;id&quot;: item_id, &quot;song&quot;: item, &quot;banger&quot;: 0, &quot;not banger&quot;: 0}) item_id += 1 for i in range(200): id = getRandomSong()[&#39;id&#39;] addSongBanger(id) for i in range(50): id = getRandomSong()[&#39;id&#39;] addSongNot(id) def getSongs(): return(songs_data) def getSong(id): return(songs_data[id]) def getRandomSong(): return(random.choice(songs_data)) def favoriteSong(): best = 0 bestID = -1 for song in getSongs(): if song[&#39;banger&#39;] &gt; best: best = song[&#39;banger&#39;] bestID = song[&#39;id&#39;] return songs_data[bestID] def jeeredSong(): worst = 0 worstID = -1 for song in getSongs(): if song[&#39;not banger&#39;] &gt; worst: worst = song[&#39;not banger&#39;] worstID = song[&#39;id&#39;] return songs_data[worstID] def addSongBanger(id): songs_data[id][&#39;banger&#39;] = songs_data[id][&#39;banger&#39;] + 1 return songs_data[id][&#39;banger&#39;] def addSongNot(id): songs_data[id][&#39;not banger&#39;] = songs_data[id][&#39;not banger&#39;] + 1 return songs_data[id][&#39;not banger&#39;] def printSong(song): print(song[&#39;id&#39;], song[&#39;song&#39;], &quot; n&quot;, &quot;banger:&quot;, song[&#39;banger&#39;], &quot; n&quot;, &quot;not banger:&quot;, song[&#39;not banger&#39;], &quot; n&quot;) def countSongs(): return len(songs_data) if __name__ == &quot;__main__&quot;: initSongs() best = favoriteSong() print(&quot;Most liked&quot;, best[&#39;banger&#39;]) printSong(best) worst = jeeredSong() print(&quot;Most jeered&quot;, worst[&#39;not banger&#39;]) printSong(worst) print(&quot;Random song&quot;) printSong(getRandomSong()) print(&quot;Songs Count: &quot; + str(countSongs())) . Most liked 24 2 UNKLE - Lonely Souls banger: 24 not banger: 2 Most jeered 6 8 Nick Drake - Riverman banger: 16 not banger: 6 Random song 9 The Doors - The End banger: 11 not banger: 3 Songs Count: 13 . from flask import Blueprint, jsonify from flask_restful import Api, Resource import requests import random app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/songs&#39;) api = Api(app_api) class SongsAPI: class _Create(Resource): def post(self, song): pass class _Read(Resource): def get(self): return jsonify(getSongs()) class _ReadID(Resource): def get(self, id): return jsonify(getSong(id)) class _ReadRandom(Resource): def get(self): return jsonify(getRandomSong()) class _ReadCount(Resource): def get(self): count = countSongs() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) class _UpdateLike(Resource): def put(self, id): addSongBanger(id) return jsonify(getSong(id)) class _UpdateJeer(Resource): def put(self, id): addSongNot(id) return jsonify(getSong(id)) api.add_resource(_Create, &#39;/create/&lt;string:song&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . server = &#39;https://flask.maniflpt.com/&#39; url = server + &quot;api/songs/&quot; responses = [] count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] num = str(random.randint(0, count-1)) responses.append( requests.get(url+num) ) responses.append( requests.put(url+&quot;like/&quot;+num) ) responses.append( requests.put(url+&quot;jeer/&quot;+num) ) responses.append( requests.get(url+&quot;random&quot;) ) for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) . gaierror Traceback (most recent call last) File ~/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:174, in HTTPConnection._new_conn(self) 173 try: --&gt; 174 conn = connection.create_connection( 175 (self._dns_host, self.port), self.timeout, **extra_kw 176 ) 178 except SocketTimeout: File ~/anaconda3/lib/python3.9/site-packages/urllib3/util/connection.py:72, in create_connection(address, timeout, source_address, socket_options) 68 return six.raise_from( 69 LocationParseError(u&#34;&#39;%s&#39;, label empty or too long&#34; % host), None 70 ) &gt; 72 for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM): 73 af, socktype, proto, canonname, sa = res File ~/anaconda3/lib/python3.9/socket.py:954, in getaddrinfo(host, port, family, type, proto, flags) 953 addrlist = [] --&gt; 954 for res in _socket.getaddrinfo(host, port, family, type, proto, flags): 955 af, socktype, proto, canonname, sa = res gaierror: [Errno -2] Name or service not known During handling of the above exception, another exception occurred: NewConnectionError Traceback (most recent call last) File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:703, in HTTPConnectionPool.urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 702 # Make the request on the httplib connection object. --&gt; 703 httplib_response = self._make_request( 704 conn, 705 method, 706 url, 707 timeout=timeout_obj, 708 body=body, 709 headers=headers, 710 chunked=chunked, 711 ) 713 # If we&#39;re going to release the connection in ``finally:``, then 714 # the response doesn&#39;t need to know about the connection. Otherwise 715 # it will also try to release it and we&#39;ll have a double-release 716 # mess. File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:386, in HTTPConnectionPool._make_request(self, conn, method, url, timeout, chunked, **httplib_request_kw) 385 try: --&gt; 386 self._validate_conn(conn) 387 except (SocketTimeout, BaseSSLError) as e: 388 # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout. File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:1040, in HTTPSConnectionPool._validate_conn(self, conn) 1039 if not getattr(conn, &#34;sock&#34;, None): # AppEngine might not have `.sock` -&gt; 1040 conn.connect() 1042 if not conn.is_verified: File ~/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:358, in HTTPSConnection.connect(self) 356 def connect(self): 357 # Add certificate verification --&gt; 358 self.sock = conn = self._new_conn() 359 hostname = self.host File ~/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:186, in HTTPConnection._new_conn(self) 185 except SocketError as e: --&gt; 186 raise NewConnectionError( 187 self, &#34;Failed to establish a new connection: %s&#34; % e 188 ) 190 return conn NewConnectionError: &lt;urllib3.connection.HTTPSConnection object at 0x7f7dbd302cd0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known During handling of the above exception, another exception occurred: MaxRetryError Traceback (most recent call last) File ~/anaconda3/lib/python3.9/site-packages/requests/adapters.py:440, in HTTPAdapter.send(self, request, stream, timeout, verify, cert, proxies) 439 if not chunked: --&gt; 440 resp = conn.urlopen( 441 method=request.method, 442 url=url, 443 body=request.body, 444 headers=request.headers, 445 redirect=False, 446 assert_same_host=False, 447 preload_content=False, 448 decode_content=False, 449 retries=self.max_retries, 450 timeout=timeout 451 ) 453 # Send the request. 454 else: File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:785, in HTTPConnectionPool.urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 783 e = ProtocolError(&#34;Connection aborted.&#34;, e) --&gt; 785 retries = retries.increment( 786 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2] 787 ) 788 retries.sleep() File ~/anaconda3/lib/python3.9/site-packages/urllib3/util/retry.py:592, in Retry.increment(self, method, url, response, error, _pool, _stacktrace) 591 if new_retry.is_exhausted(): --&gt; 592 raise MaxRetryError(_pool, url, error or ResponseError(cause)) 594 log.debug(&#34;Incremented Retry for (url=&#39;%s&#39;): %r&#34;, url, new_retry) MaxRetryError: HTTPSConnectionPool(host=&#39;flask.maniflpt.com&#39;, port=443): Max retries exceeded with url: /api/songs/count (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPSConnection object at 0x7f7dbd302cd0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known&#39;)) During handling of the above exception, another exception occurred: ConnectionError Traceback (most recent call last) /mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb Cell 4 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; url = server + &#34;api/songs/&#34; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; responses = [] -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; count_response = requests.get(url+&#34;count&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; count_json = count_response.json() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; count = count_json[&#39;count&#39;] File ~/anaconda3/lib/python3.9/site-packages/requests/api.py:75, in get(url, params, **kwargs) 64 def get(url, params=None, **kwargs): 65 r&#34;&#34;&#34;Sends a GET request. 66 67 :param url: URL for the new :class:`Request` object. (...) 72 :rtype: requests.Response 73 &#34;&#34;&#34; &gt; 75 return request(&#39;get&#39;, url, params=params, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/requests/api.py:61, in request(method, url, **kwargs) 57 # By using the &#39;with&#39; statement we are sure the session is closed, thus we 58 # avoid leaving sockets open which can trigger a ResourceWarning in some 59 # cases, and look like a memory leak in others. 60 with sessions.Session() as session: &gt; 61 return session.request(method=method, url=url, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/requests/sessions.py:529, in Session.request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json) 524 send_kwargs = { 525 &#39;timeout&#39;: timeout, 526 &#39;allow_redirects&#39;: allow_redirects, 527 } 528 send_kwargs.update(settings) --&gt; 529 resp = self.send(prep, **send_kwargs) 531 return resp File ~/anaconda3/lib/python3.9/site-packages/requests/sessions.py:645, in Session.send(self, request, **kwargs) 642 start = preferred_clock() 644 # Send the request --&gt; 645 r = adapter.send(request, **kwargs) 647 # Total elapsed time of the request (approximately) 648 elapsed = preferred_clock() - start File ~/anaconda3/lib/python3.9/site-packages/requests/adapters.py:519, in HTTPAdapter.send(self, request, stream, timeout, verify, cert, proxies) 515 if isinstance(e.reason, _SSLError): 516 # This branch is for urllib3 v1.22 and later. 517 raise SSLError(e, request=request) --&gt; 519 raise ConnectionError(e, request=request) 521 except ClosedPoolError as e: 522 raise ConnectionError(e, request=request) ConnectionError: HTTPSConnectionPool(host=&#39;flask.maniflpt.com&#39;, port=443): Max retries exceeded with url: /api/songs/count (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPSConnection object at 0x7f7dbd302cd0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known&#39;)) .",
            "url": "https://manigggg18.github.io/manimani/webapi",
            "relUrl": "/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Javascript Web Page using an API",
            "content": "&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Song&lt;/th&gt; &lt;th&gt;Banger&lt;/th&gt; &lt;th&gt;Not Banger&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;/tbody&gt; &lt;/table&gt; . evalmachine.&lt;anonymous&gt;:1 &lt;table&gt; ^ SyntaxError: Unexpected token &lt; at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . const resultContainer = document.getElementById(&quot;result&quot;); const BANGER = &quot;banger&quot;; const NOT = &quot;not banger&quot;; const url = &quot;https://flask.maniflpt.com/api/jokes&quot;; const like_url = url + &quot;/like/&quot;; const jeer_url = url + &quot;/jeer/&quot;; const options = { method: &#39;GET&#39;, mode: &#39;cors&#39;, cache: &#39;default&#39;, credentials: &#39;omit&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, }; const put_options = {...options, method: &#39;PUT&#39;}; . evalmachine.&lt;anonymous&gt;:20 const put_options = {...options, method: &#39;PUT&#39;}; ^^^ SyntaxError: Unexpected token ... at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . fetch(url, options) .then(response =&gt; { if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } response.json().then(data =&gt; { console.log(data); for (const row of data) { const tr = document.createElement(&quot;tr&quot;); const song = document.createElement(&quot;td&quot;); song.innerHTML = row.id + &quot;. &quot; + row.song; const banger = document.createElement(&quot;td&quot;); const banger = document.createElement(&#39;button&#39;); banger_but.id = BANGER+row.id banger_but.innerHTML = row.banger; banger_but.onclick = function () { reaction(BANGER, like_url+row.id, banger_but.id); }; banger.appendChild(banger_but); const not = document.createElement(&quot;td&quot;); const not_but = document.createElement(&#39;button&#39;); not_but.id = NOT+row.id not_but.innerHTML = row.not; not_but.onclick = function () { reaction(NOT, jeer_url+row.id, not_but.id); }; boohoo.appendChild(not_but); tr.appendChild(song); tr.appendChild(banger); tr.appendChild(not); resultContainer.appendChild(tr); } }) }) .catch(err =&gt; { error(err + &quot; &quot; + url); }); . evalmachine.&lt;anonymous&gt;:1 fetch(url, options) ^ ReferenceError: fetch is not defined at evalmachine.&lt;anonymous&gt;:1:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . function reaction(type, put_url, elemID) { fetch(put_url, put_options) .then(response =&gt; { if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; } response.json().then(data =&gt; { console.log(data); if (type === BANGER) document.getElementById(elemID).innerHTML = data.banger; else if (type === NOT) document.getElementById(elemID).innerHTML = data.not; else error(&quot;unknown type: &quot; + type); }) }) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } function error(err) { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); } .",
            "url": "https://manigggg18.github.io/manimani/webfrontend",
            "relUrl": "/webfrontend",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "AP 4.1 Quiz Blog",
            "content": "AP Quiz Completion Proof . Internet is a more difficult topic than the previous AP topics, but the College Board videos help with providing a basic understanding. . . . . Questions . 4.1 (2/3) . . Q1 (Correct): Which of the following best explains how messages are typically transmitted over the Internet? . The message is broken into packets that are transmitted in a specified order. Each packet must be received in the order it was sent for the message to be correctly reassembled by the recipient’s device. . | The message is broken into packets. The packets can be received in any order and still be reassembled by the recipient’s device. . | The message is broken into two packets. One packet contains the data to be transmitted and the other packet contains metadata for routing the data to the recipient’s device. . | The message is transmitted as a single file and received in whole by the recipient’s device. . | . Answer: The message is broken into packets. The packets can be received in any order and still be reassembled by the recipient’s device. . Messages are broken into packets. Each packet contains data to be transmitted, as well as metadata for routing and reassembling the data upon receipt. This allows the packets to be received in any order and still be reassembled correctly. . . Q2 (Incorrect): Which of the following is a primary reason for the use of open protocols on the Internet? . Open protocols allow devices to specify how data packets are to be routed on the Internet in advance. . | Open protocols ensure that all data transmission on the Internet is kept secure. . | Open protocols ensure that all Internet users are provided connections with equal bandwidth. . | Open protocols provide a way to standardize data transmission between different devices. . | . My Answer : Open protocols allow devices to specify how data packets are to be routed on the Internet in advance. . Routing on the Internet is usually dynamic; it is not specified in advance. . Correct Answer: Open protocols provide a way to standardize data transmission between different devices. . Protocols are agreed-upon sets of rules that specify the behavior of a system. Protocols used on the Internet enable devices from different manufacturers to communicate in a standard way. . . Q3 (Correct): Which of the following best describes the relationship between the World Wide Web and the Internet? . The World Wide Web is a protocol that is accessed using a data stream called the Internet. . | The World Wide Web is a system of linked pages, programs, and files that is accessed using a data stream called the Internet. . | The World Wide Web is a system of linked pages, programs, and files that is accessed via a network called the Internet. . | The World Wide Web is a Web site that is accessed using a protocol called the Internet. . | . Answer: The World Wide Web is a system of linked pages, programs, and files that is accessed via a network called the Internet. . The Internet is an interconnected network of networks, and the World Wide Web is an information system that is accessed via the Internet. . . . Click here to access additional resources for Collaboration, Program Function/Purpose, and Program Design/Development. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/10/14/apblog3.html",
            "relUrl": "/markdown/2022/10/14/apblog3.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Identifying Errors",
            "content": "Example #1 . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . Using a While Loop to Get the Intended Outcome . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter b is the 2 letter in the alphabet . Using a For Loop to Get the Intended Outcome . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter b is the 2 letter in the alphabet . Evens: While Loop . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . Odds: While Loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . Evens: For Loop . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . Odds For Loop . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . Simultaneous Usage of For Loop and While Loop for Lists . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge Completion . I decided to add more items in order to create a wider options for using the second item (drinks). After successfully fixing the code I decided to add a calculation function to accept more than one item. The code segment now adds the drink (msg) value and the meal (item) value to calculate the total cost of the order. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;coke&quot;: 0.99, &quot;sprite&quot;: 0.99, &quot;devious drink&quot;: 0.01, &quot;jake from statefarm&quot;: 2999.99} total = 0 # shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) while total == 0: # item 1: meal (item) item = input(&quot;What would you like to order?&quot;) print(&quot;Meal:&quot;, item.lower()) for k,v in menu.items(): if item.lower() == k: print(&quot;Price: $&quot;, menu[item.lower()]) total = 1 # item 2: drink (msg) msg = input(&quot;Would you like to order drinks?&quot;) print(&quot;Drink:&quot;, msg.lower()) for k,v in menu.items(): if msg.lower() == k: print(&quot;Price: $&quot;, menu[msg.lower()]) total = 1 # calculating the total print(&quot;Total:&quot;, menu[item.lower()] + menu[msg.lower()]) # final message print(&quot;Thank you for stopping by! Have a nice day!&quot;) . Menu burger $3.99 fries $1.99 coke $0.99 sprite $0.99 devious drink $0.01 jake from statefarm $2999.99 Meal: jake from statefarm Price: $ 2999.99 Drink: devious drink Price: $ 0.01 Total: 3000.0 Thank you for stopping by! Have a nice day! .",
            "url": "https://manigggg18.github.io/manimani/jupyter/errors",
            "relUrl": "/jupyter/errors",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "AP 1.4 Quiz Blog",
            "content": "AP Quiz Completion Proof . Same as the previous blog. I did my best, but I did not reach my intended results. As always, I’m still learning and there’s much room for improvement. . . . . Questions . 1.4 (2/3) . . Q1 (Correct): In the following code segment, score and penalty are initially positive integers. The code segment is intended to reduce the value of score by penalty. However, if doing so would cause score to be negative, score should be assigned the value 0. For example, if score is 20 and penalty is 5, the code segment should set score to 15. If score is 20 and penalty is 30, score should be set to 0. The code segment does not work as intended. . Line 1: IF(score - penalty &lt; 0) . Line 2: { . Line 3: score ← score - penalty . Line 4: } . Line 5: ELSE . Line 6: { . Line 7: score ← 0 . Line 8: } . Which of the following changes can be made so that the code segment works as intended? . Answer: Interchaning lines 3 and 7. . Interchanging lines 3 and 7 ensures that if reducing score by penalty results in a negative value, score is set to 0. Otherwise, score is reduced by penalty. . . Q2 (Incorrect): The following procedure is intended to return true if the list of numbers myList contains only positive numbers and is intended to return false otherwise. The procedure does not work as intended. . PROCEDURE allPositive(myList) . { . index ← 1 . len ← LENGTH(myList) . REPEAT len TIMES . { . IF(myList[index] &gt; 0) . { . RETURN(true) . } . index ← index + 1 . } . RETURN(false) . } . My Answer : [1, 2, 3] . The procedure begins to traverse the list and immediately encounters the positive value 1. At this point, the procedure returns true as intended for this list. . Correct Answer: [-1, 0, 1] . The procedure traverses this list and eventually encounters the positive value 1. At this point, the procedure returns true when it should return false because the list does not contain only positive values. . . Q3 (Correct): A homework assignment consists of 10 questions. The assignment is graded as follows. . . Let numCorrect represent the number of correct answers for a particular student. The following code segment is intended to display the appropriate grade based on numCorrect. The code segment does not work as intended in all cases. . . For which of the following values of numCorrect does the code segment NOT display the intended grade? . Answer(s): 8: When numCorrect is 8, the condition numCorrect &gt; 7 evaluates to true and the condition numCorrect ≥ 9 evaluates to false. Therefore “check minus” is displayed instead of the intended “check plus”. . 6: When numCorrect is 6, the condition numCorrect &gt; 7 evaluates to false. Therefore “check” is displayed instead of the intended “check minus”. . . . Click here to access additional resources for Collaboration, Program Function/Purpose, and Program Design/Development. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/10/08/apblog2.html",
            "relUrl": "/markdown/2022/10/08/apblog2.html",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "AWS Development",
            "content": "Curl Output . . . . Curl Html2text Output . . . Git Status, Docker Compose, Docker . .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/10/04/aws.html",
            "relUrl": "/markdown/2022/10/04/aws.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Python RapidAPI",
            "content": "| JavaScript | Table | API | Songs | . . API Usage and Organization: Radio Stations (France) . import requests url = &quot;https://radio-world-50-000-radios-stations.p.rapidapi.com/v1/radios/getTopByCountry&quot; querystring = {&quot;query&quot;:&quot;fr&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;24662782b6msh7d95c7667aea623p12c71ajsnc0aa91d82aa9&quot;, &quot;X-RapidAPI-Host&quot;: &quot;radio-world-50-000-radios-stations.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # printing organized data stats = response.json().get(&#39;radios&#39;) # data file type/name for stat in stats: # list: stat in stats if stat[&quot;channel_id&quot;] == 7751: for key, value in stat.items(): print(key, value) . image_url https://mypromotions.sfo2.cdn.digitaloceanspaces.com/radios/7751.jpg name France Info uri https://icecast.radiofrance.fr/franceinfo-midfi.mp3 channel_id 7751 countryCode fr genre News,Talk . Alternate Query (US) . import requests url = &quot;https://radio-world-50-000-radios-stations.p.rapidapi.com/v1/radios/getTopByCountry&quot; querystring = {&quot;query&quot;:&quot;us&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f5bcc1b7damsh9cd6eb2e03d6591p14cf1djsn33097094485f&quot;, &quot;X-RapidAPI-Host&quot;: &quot;radio-world-50-000-radios-stations.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # printing organized data stats = response.json().get(&#39;radios&#39;) # data file type/name for stat in stats: # list: stat in stats if stat[&quot;channel_id&quot;] == 58039: for key, value in stat.items(): print(key, value) . image_url https://mypromotions.sfo2.cdn.digitaloceanspaces.com/radios/58039.jpg name FOX News Radio uri https://streaming-ent.shoutcast.com/foxnews channel_id 58039 countryCode us genre News,Talk .",
            "url": "https://manigggg18.github.io/manimani/rapidapi",
            "relUrl": "/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "AP 1.1-1.3 Quiz Blog",
            "content": "AP Quiz Completion Proof . I’m nowhere near satisfied with my test results, but I believe tha every mistake is a step toward success. Therefore I’m going to record my mistakes and my key takeaways. . . . . Mistakes . 1.1 (2/3) . . Q3: A company that develops mobile applications wants to involve users in the software development process. Which of the following best explains the benefit in having users participate? . My Response: Users can provide documentation for program code at the end of the software development process. . Users are unlikely to have the expertise needed to understand and provide documentation for program code. . Correct Response: Users can provide feedback that can be used to incorporate a variety of perspectives into the software. . . . 1.2 (3/6) . . Q1: Consider the following code segment. . . Which of the following best describes the behavior of the code segment? . My Response: The code segment displays the value of 2(5×3) by initializing result to 2 and then multiplying result by 5 a total of three times. . Initializing result to 2 and multiplying it by 5 a total of three times yields 2(53), not 2(5×3). . Correct Response: The code segment displays the value of 2(53) by initializing result to 2 and then multiplying result by 5 a total of three times. . . Q5: A student wrote the following code segment, which displays true if the list myList contains any duplicate values and displays false otherwise. . . The code segment compares pairs of list elements, setting containsDuplicates to true if any two elements are found to be equal in value. Which of the following best describes the behavior of how pairs of elements are compared? . My Response: The code segment iterates through myList, comparing each element to the element that immediately follows it in the list. . The inner loop iterates from index j + 1 to the end of the list, so each element is compared with the all elements that follow it, not just the one element that immediately follows it. . Correct Response: The code segment iterates through myList, comparing each element to all subsequent elements in the list. . . Q6: A student is creating an application that allows customers to order food for delivery from a local restaurant. Which of the following is LEAST likely to be an input provided by a customer using the application? . My Response: The name of a food item to be included in the delivery . The name of a food item is input that needs to be provided by the customer in order for the order to be completed. . Correct Response: The cost of a food item currently available for order . . . 1.3 (2/3) . . Q1: In the following procedure, the parameter max is a positive integer. . PROCEDURE printNums(max) . { . ` count ← 1` . ` REPEAT UNTIL(count &gt; max)` . ` {` . ` DISPLAY(count)` . ` count ← count + 2` . ` }` . } . Which of the following is the most appropriate documentation to appear with the printNums procedure? . My Response: Prints all positive odd integers that are greater than max. . The loop terminates when count exceeds max, so only values less than or equal to max are printed. . Correct Response: Prints all positive odd integers that are less than or equal to max. . . . Click here to access additional resources for Collaboration, Program Function/Purpose, and Program Design/Development. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/28/apblog.html",
            "relUrl": "/markdown/2022/09/28/apblog.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Java Table",
            "content": "| JavaScript | Table | API | Songs | . . Table . The cell containing previous definitions and functions is hidden in order to create a more organized blog. . Full code can be found here. . Medias.prototype._toHtml = function() { // inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 5px solid blue;&quot; + &quot;box-shadow: 1em 1em 1em red;&quot; ); var body = &quot;&quot;; // Heading body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Name&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Creator&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Date&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Type&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array for (var row of catalog.medias) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.cre + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.date + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.type + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( // div, table, table body &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(catalog._toHtml()); // receives parameter of defined HTML fragment . NameCreatorDateType . Kid A | Radiohead | 2000 | Album | Whiplash | Damien Chazelle | 2014 | Movie | Atonement | Joe Wright | 2007 | Movie | Prestige | Christopher Nolan | 2006 | Movie | Fargo | Noah Hawley | 2014 | Show | Daredevil | Kati Johnson | 2015 | Show | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://manigggg18.github.io/manimani/jupyter/java_table",
            "relUrl": "/jupyter/java_table",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Java (IPYNB)",
            "content": "| JavaScript | Table | API | Songs | . . Single Function: Product Return . const factorial = function fac(n) { // calls a function which performs a calculation and returns the result return n &lt; 2 ? 1 : n * fac(n - 1); } console.log(factorial(7)) . 5040 . Set of Functions and Definitions: JSON Lists and Prototypes . function printInfo(msg) { // Necessary definition console.log(typeof msg + &quot;;&quot;, msg); } function Media(name, cre, date) { // Define media this.name = name; this.cre = cre; this.date = date; this.type = &quot;&quot;; } Media.prototype.setType = function(type) { // Introduce prototype this.type = type; } Media.prototype.toJSON = function() { // organize const data = {name: this.name, cre: this.cre, date: this.date, type: this.type}; const jsonString = JSON.stringify(data); return jsonString; } var album = new Media(&quot;Kid A&quot;, &quot;Radiohead&quot;, 2000); // song variable album.setType(&quot;Album&quot;); var movie = [ // movie variables new Media(&quot;Whiplash&quot;, &quot;Damien Chazelle&quot;, 2014), new Media(&quot;Atonement&quot;, &quot;Joe Wright&quot;, 2007), new Media(&quot;Prestige&quot;, &quot;Christopher Nolan&quot;, 2006) ] var show = [ // show variables new Media(&quot;Fargo&quot;, &quot;Noah Hawley&quot;, 2014), new Media(&quot;Daredevil&quot;, &quot;Kati Johnson&quot;, 2015), ] function Medias(album, movie, show) { album.setType(&quot;Album&quot;); this.album = album; this.medias = [album]; this.movie = movie; this.show = show; this.movie.forEach(movie =&gt; {movie.setType(&quot;Movie&quot;); this.medias.push(movie);}); this.show.forEach(show =&gt; {show.setType(&quot;Show&quot;); this.medias.push(show);}); this.jsonMedias = []; this.medias.forEach(media =&gt; this.jsonMedias.push(media.toJSON())); } catalog = new Medias(album, movie, show); printInfo(catalog.medias); printInfo(catalog.medias[4].name); printInfo(catalog.jsonMedias[4]); printInfo(JSON.parse(catalog.jsonMedias[4])); . object; [ Media { name: &#39;Kid A&#39;, cre: &#39;Radiohead&#39;, date: 2000, type: &#39;Album&#39; }, Media { name: &#39;Whiplash&#39;, cre: &#39;Damien Chazelle&#39;, date: 2014, type: &#39;Movie&#39; }, Media { name: &#39;Atonement&#39;, cre: &#39;Joe Wright&#39;, date: 2007, type: &#39;Movie&#39; }, Media { name: &#39;Prestige&#39;, cre: &#39;Christopher Nolan&#39;, date: 2006, type: &#39;Movie&#39; }, Media { name: &#39;Fargo&#39;, cre: &#39;Noah Hawley&#39;, date: 2014, type: &#39;Show&#39; }, Media { name: &#39;Daredevil&#39;, cre: &#39;Kati Johnson&#39;, date: 2015, type: &#39;Show&#39; } ] string; Fargo string; {&#34;name&#34;:&#34;Fargo&#34;,&#34;cre&#34;:&#34;Noah Hawley&#34;,&#34;date&#34;:2014,&#34;type&#34;:&#34;Show&#34;} object; { name: &#39;Fargo&#39;, cre: &#39;Noah Hawley&#39;, date: 2014, type: &#39;Show&#39; } .",
            "url": "https://manigggg18.github.io/manimani/jupyter/java_ipynb",
            "relUrl": "/jupyter/java_ipynb",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Program Purpose - Mani's Idea",
            "content": "Same Design as Create Performance Task . initial design concept: In the form of a “loading screen”. The “loading screen” gets filled with each click. . Features: Timer, Calculator, Counter, Scoring System, Frontend elements. . Language: Undecided . Objective: Click as fast as possible in a given time. . . . . DISCLAIMER: This is just an idea for the group project and NOT a final concept. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/22/prpurpose.html",
            "relUrl": "/markdown/2022/09/22/prpurpose.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Testing Local Server Functions",
            "content": "Process . After entering the “make server” command on a terminal and letting it run, I decided to add a minor change to ‘index.html`. Some texts came up on the terminal and the change was presented immediately. The only problem was that adding a Jupyter Notebook and editing it did not have any effects. . Effects . . . .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/14/ls.html",
            "relUrl": "/markdown/2022/09/14/ls.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "CPT Initial Concept",
            "content": "Individual/Collaboration: Undecided . Language: Python or JavaScript . Goals: . Final program code (created independently or collaboratively) . | A video that displays the running of your program and demonstrates functionality you developed (created independently) . | Written responses to all the prompts in the performance task (created independently) . | . Plan: . I’m planning to design a simple yet creative game, though I’m still not sure what development program I’m going to use. . My initial concept is a time based game. The user has to click/press a key for a specified number of times before the time runs out. I’m planning to implement a code that makes the game harder after each “level”. . Design: . I’m still working on it, but my initial design concept is in the form of a “loading screen”. The “loading screen” gets filled with each click. . .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/11/cpt1.html",
            "relUrl": "/markdown/2022/09/11/cpt1.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "App Development Blog",
            "content": "Link to the app can be found at the bottom of the page. . Note: These code blocks are not optimized for Python. . . Process . Making the quiz was very simple and interesting. The quiz includes 3 multiple-choice questions and 1 free-response question. Working with different elements such as buttons and images was easy for the most part and didn’t present any challenges. Making the free response question was a bit tricky. I had to play around with its assigned block and the text input function to make it work. . # Default Notation . onEvent(&quot;textinput&quot;, &quot;change&quot;, function(event) { . }); . # My Edit . onEvent(&quot;text_input1&quot;, &quot;change&quot;, function(event) { . }); . . Another extra feature that I added to my app was the usage of retrieving data from a text input. By adding the following code to the text input function, I managed to display the entered number from the free-response question: . # Default Notation . onEvent(&quot;textinput&quot;, &quot;change&quot;, function(event) { . setText(&quot;id&quot;, + getText(&quot;textinput&quot;)); . | setScreen(&quot;id&quot;); . | . }); . # My Edit . onEvent(&quot;text_input1&quot;, &quot;change&quot;, function(event) { . setText(&quot;response&quot;, &quot;Wow, only &quot; + getText(&quot;text_input1&quot;) + &quot;?&quot;); . | setScreen(&quot;r1&quot;); . | . }); . . . I also added to add “wrong answer” screens which appear if the user selects wrong answers. I simply assigned these screens to appropriate buttons. . . . Currently I’m trying to figure out a way to make the code a bit shorter using conditionals, but I don’t think it’ll work since I’m not that familiar with JavaScript. . . Update . I decided to use the dropdown function as a way to display a body of text. This dropdown box presents the “prize” to the user. . . . The trickiest part of developing this quiz was displaying the final score at the end. I used a variables and individual functions to make it work. The individual functions largely increase the size of the code and I couldn’t find a way to shorten them. Each individual function is assigned to a button. Buttons with correct answers add one point to the initial variable and buttons with incorrect answers subtract one point. . # setting the variable . var score = 0; . setText(&quot;text_input&quot;, &quot;Score = &quot; + score); . onEvent(&quot;id&quot;, &quot;click&quot;, function(event) { # in this case, id is a correct answer . score = score + 1; . | setText(&quot;text_input&quot;, &quot;Score = &quot; + score); # one point added . | . }); . onEvent(&quot;id&quot;, &quot;click&quot;, function(event) { # in this case, id is an incorrect answer . score = score - 1; . | setText(&quot;text_input&quot;, &quot;Score = &quot; + score); # one point subtracted . | . }); . . . You can check out the quiz by clicking here. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/11/appblog.html",
            "relUrl": "/markdown/2022/09/11/appblog.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Changing the Theme (Effects)",
            "content": "First Attempt . I tried to change the theme and as a result the CI status changed from “passing” to “failing”. My page also didn’t look any different. . . Second Attempt . . It worked but some posts looked very off-putting. . . So I changed it back to the default theme. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/01/theme.html",
            "relUrl": "/markdown/2022/09/01/theme.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Basic L/D . name = &quot;Mani T&quot; print(&quot;name&quot;, name, type(name)) age = 17 print(&quot;age&quot;, age, type(age)) score = 100.0 print(&quot;score&quot;, score, type(score)) print() langs = [&quot;Python&quot;, &quot;Bash&quot;, &quot;HTML&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() person = { &quot;name&quot;: name, # keys and values &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Mani T &lt;class &#39;str&#39;&gt; age 17 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;Bash&#39;, &#39;HTML&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Mani T&#39;, &#39;age&#39;: 17, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;Bash&#39;, &#39;HTML&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Mani T &lt;class &#39;str&#39;&gt; . Complex L/D . InfoDb = [] InfoDb.append({ #introduces the data &quot;FirstName&quot;: &quot;Mani&quot;, &quot;LastName&quot;: &quot;Taleban&quot;, &quot;DOB&quot;: &quot;May 8&quot;, &quot;Residence&quot;: &quot;Somewhere&quot;, &quot;SE&quot;: &quot;moeint56403@stu.powayusd.com&quot;, &quot;PE&quot;: &quot;tmanimasih@gmail.com&quot;, &quot;School&quot;: &quot;Del Norte High School&quot;, &quot;FM&quot;: &quot;Whiplash&quot;, &quot;FB&quot;: &quot;Radiohead&quot; }) print(InfoDb) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma = space print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t = tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;School Email:&quot;, d_rec[&quot;SE&quot;]) print(&quot; t&quot;, &quot;Personal Email:&quot;, d_rec[&quot;PE&quot;]) print(&quot; t&quot;, &quot;School:&quot;, d_rec[&quot;School&quot;]) print(&quot; t&quot;, &quot;Favorite Movie:&quot;, d_rec[&quot;FM&quot;]) print(&quot; t&quot;, &quot;Favorite Band:&quot;, d_rec[&quot;FB&quot;]) print() def for_loop(): # for loop print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . [{&#39;FirstName&#39;: &#39;Mani&#39;, &#39;LastName&#39;: &#39;Taleban&#39;, &#39;DOB&#39;: &#39;May 8&#39;, &#39;Residence&#39;: &#39;Somewhere&#39;, &#39;SE&#39;: &#39;moeint56403@stu.powayusd.com&#39;, &#39;PE&#39;: &#39;tmanimasih@gmail.com&#39;, &#39;School&#39;: &#39;Del Norte High School&#39;, &#39;FM&#39;: &#39;Whiplash&#39;, &#39;FB&#39;: &#39;Radiohead&#39;}] For loop output Mani Taleban Residence: Somewhere Birth Day: May 8 School Email: moeint56403@stu.powayusd.com Personal Email: tmanimasih@gmail.com School: Del Norte High School Favorite Movie: Whiplash Favorite Band: Radiohead . For Loop with an Index . InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;Mani&quot;, &quot;LastName&quot;: &quot;Taleban&quot;, &quot;DOB&quot;: &quot;May 8&quot;, &quot;Residence&quot;: &quot;Somewhere&quot;, &quot;SE&quot;: &quot;moeint56403@stu.powayusd.com&quot;, &quot;PE&quot;: &quot;tmanimasih@gmail.com&quot;, &quot;School&quot;: &quot;Del Norte High School&quot;, &quot;FM&quot;: &quot;Whiplash&quot;, &quot;FB&quot;: &quot;Radiohead&quot; }) print(InfoDb) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . [{&#39;FirstName&#39;: &#39;Mani&#39;, &#39;LastName&#39;: &#39;Taleban&#39;, &#39;DOB&#39;: &#39;May 8&#39;, &#39;Residence&#39;: &#39;Somewhere&#39;, &#39;SE&#39;: &#39;moeint56403@stu.powayusd.com&#39;, &#39;PE&#39;: &#39;tmanimasih@gmail.com&#39;, &#39;School&#39;: &#39;Del Norte High School&#39;, &#39;FM&#39;: &#39;Whiplash&#39;, &#39;FB&#39;: &#39;Radiohead&#39;}] While loop output Mani Taleban Residence: Somewhere Birth Day: May 8 School Email: moeint56403@stu.powayusd.com Personal Email: tmanimasih@gmail.com School: Del Norte High School Favorite Movie: Whiplash Favorite Band: Radiohead . InfoDb based Quiz . import getpass ,sys def question_and_answer(prompt, answer): # question and answer function print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) if answer == msg.lower(): # this conditional determines the answers print(&quot;:)&quot;) global correct correct += 1 else: print (&quot;:(&quot;) questions = 5 correct = 0 Q1 = question_and_answer(&quot;What should I listen to right now?&quot;, &quot;music&quot;) Q2 = question_and_answer(&quot;When was I born?&quot;, &quot;may 8&quot;) Q3 = question_and_answer(&quot;Why was I born?&quot;, &quot;idk&quot;) Q4 = question_and_answer(&quot;Who plays Fletcher in Whiplash?&quot;, &quot;jk simmons&quot;) Q5 = question_and_answer(&quot;How&#39;s it going?&quot;, &quot;eh&quot;) Questions = { # infoDb &quot;Q1&quot;: Q1, &quot;Q2&quot;: Q2, &quot;Q3&quot;: Q3, &quot;Q4&quot;: Q4, &quot;Q5&quot;: Q5 } print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Question: What should I listen to right now? Answer: music :) Question: When was I born? Answer: may 8 :) Question: Why was I born? Answer: idk :) Question: Who plays Fletcher in Whiplash? Answer: jk simmons :) Question: How&#39;s it going? Answer: eh :) manimani you scored 5/5 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/python_lists",
            "relUrl": "/jupyter/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Physics Notes 1",
            "content": "Background . Too often we think the goal of a laboratory is to “get an answer”. Just as a graph with one point does not tell us much, calculating a single value can be misleading. Although the accuracy of this value can be determined if a standard value is known, the precision or reproducibility cannot. One way to picture this precision is to graph the data and fit the data points with a best fit line. A best fit line should be drawn with as many points above it as below it, the closer the data points are to the line the more precise and reliable your results. . The equation describing the graph also shows how variables are related, allowing new values to be extrapolated or calculated from the graph. An additional step called “linearizing” helps determine the functional relationship between variables. . The objective of the linearizing process is to change the independent or dependent variable, for example change x to 1/x, so that the resulting graph is linear. So then, the equation describing the linear graph becomes; . y = slope (1/x) + intercept . Credits to Mr. Liao .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/08/28/physicsnotes.html",
            "relUrl": "/markdown/2022/08/28/physicsnotes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Calculator",
            "content": "def add(x, y): return x + y def subtract(x, y): return x - y def divide(x, y): return x / y def multiply(x, y): return x * y print(&quot;Select operation.&quot;) print(&quot;1.Add&quot;) print(&quot;2.Subtract&quot;) print(&quot;3.Multiply&quot;) print(&quot;4.Divide&quot;) while True: choice = input(&quot;Enter choice(1/2/3/4): &quot;) if choice in (&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;): num1 = float(input(&quot;Enter first number: &quot;)) num2 = float(input(&quot;Enter second number: &quot;)) if choice == &#39;1&#39;: print(num1, &quot;+&quot;, num2, &quot;=&quot;, add(num1, num2)) elif choice == &#39;2&#39;: print(num1, &quot;-&quot;, num2, &quot;=&quot;, subtract(num1, num2)) elif choice == &#39;3&#39;: print(num1, &quot;*&quot;, num2, &quot;=&quot;, multiply(num1, num2)) elif choice == &#39;4&#39;: print(num1, &quot;/&quot;, num2, &quot;=&quot;, divide(num1, num2)) next_calculation = input(&quot;Let&#39;s do next calculation? (yes/no): &quot;) if next_calculation == &quot;no&quot;: break else: print(&quot;Invalid Input&quot;) . Select operation. 1.Add 2.Subtract 3.Multiply 4.Divide 5.0 + 8.0 = 13.0 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/2022/08/26/calc.html",
            "relUrl": "/jupyter/2022/08/26/calc.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Python Practice/Quiz",
            "content": "The purpose of this entry is to capture the basics of Python in Jupyter. . Greetings . This greeting code uses a simple print command. . print(&quot;Hello, please go ahead and try to don&#39;t fail the quiz!&quot;) # a greeting . The following code sequences provide a quiz about the basics of Python by using those basics: . import: Includes functions that were previously developed. . def: def/function/procedure; used for defining a function usually at the beginning of a sequence. . prompt: A message output to the user to describe the input requested. . msg: Short for message, used to capture input command. . Questions, answers and responses are defined using these basics. . Rsp and if/else commands will be used for evaluating scores. . Part 1: Mr. Mortensen&#39;s Questions . import getpass ,sys def question_and_answer(prompt): # defining the Q&amp;A Function print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 # number of questions correct = 0 # running score print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) # greetings print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) # the number of questions is presented here question_and_answer(&quot;Are you ready to take a test?&quot;) # this question does not need a correct answer since it&#39;s not using an rsp variable rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) # the following questions require a correct answer since they are using an rsp variable if rsp == &quot;import&quot;: # correct answer print(rsp + &quot; is correct!&quot;) # response to a correct answer correct += 1 # gain points by answering correctly else: # giving an incorrect answer print(rsp + &quot; is incorrect!&quot;) # response to an incorrect answer rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # marks the end of the quiz . Hello, manimani running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: Yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! manimani you scored 3/3 . Part 2: My Questions . import getpass ,sys questions = 3 correct = 0 rsp = question_with_response(&quot;What is the classic greetings in Python?&quot;) if rsp == &quot;Hello, World!&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command activates the jupyter notebook input box?&quot;) if rsp == &quot;input&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Where is the false branch of code in an if command?&quot;) if rsp == &quot;else&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Question: What is the classic greetings in Python? Hello, World! is correct! Question: What command activates the jupyter notebook input box? input is correct! Question: Where is the false branch of code in an if command? else is correct! manimani you scored 3/3 . The end of the quiz. Have a nice day! . Additional Resources: . These CollegeBoard videos are great for learning more about Python. .",
            "url": "https://manigggg18.github.io/manimani/jupyter/2022/08/25/pythonlearnings.html",
            "relUrl": "/jupyter/2022/08/25/pythonlearnings.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Inspirational Quote",
            "content": ".",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/08/25/inspirationalquote.html",
            "relUrl": "/markdown/2022/08/25/inspirationalquote.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "An Ied Assignment",
            "content": "This is an assignment from “Intro to Engineering Design” that I thought I should share. Please don’t plagiarize. . Category Explanation . Client | Entertainment/Toy manufacturing Companies (Main option: Hasbro) | . Target Consumer | High school students of all ages living with their parents/guardians | . Designer(s) | Mani Taleban | . Problem Statement | A high school student can only use their phone and computer device for education and school assignments. The student’s parents have forbidden them from accessing their phone and computer device for entertainment purposes. The student needs approximately 10 minutes between assignments to do an entertaining activity in order to become fully operational again and avoid severe boredom. The student always experiences boredom during the 10-minute breaks between assignments. The student finds it necessary to find a solution, because they cannot continue operating correctly without having some source of entertainment and refreshment. | . Design Statement | Create an entertaining, refreshing, and engaging activity/game | . Criteria | Should be playable for approximately 10 minutes . | Should have a scoring system . | Should be both single-player and multi-player . | Should increase the level of dopamine . | | . Constraints | Should only use common office supplies . | Should cost no money . | Should fit in an office-sized room environment . | Creating the activity/game should take no longer than 5 minutes . | | .",
            "url": "https://manigggg18.github.io/manimani/2022/08/24/An-IED-Assignment.html",
            "relUrl": "/2022/08/24/An-IED-Assignment.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Tools & Equipment Check",
            "content": "Bash Check . Project Directory . echo &quot;Using conditional statement to create a project directory and project&quot; export project_dir=$HOME/vscode export project=$project_dir/manimani export project_repo=&quot;https://github.com/manigggg18/manimani.git&quot; cd ~ if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Fastpages . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al . echo &quot;Look for posts&quot; export posts=$project/_posts cd $posts pwd ls -l . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks cd $notebooks pwd ls -l . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images pwd ls -l . Markdown Files . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md echo &quot;&quot; echo &quot;end of README.md&quot; . Env, Git, and Github . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config . Installation Check . Python Check . python --version python2 --version . Conda Check . conda list . echo Conda Check test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . Jupyter Check . jupyter --version jupyter kernelspec list . test=&quot;python3&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . Tools and Equipment Check Successful .",
            "url": "https://manigggg18.github.io/manimani/jupyter/2022/08/22/two.html",
            "relUrl": "/jupyter/2022/08/22/two.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Hopefully My First Markdown Post",
            "content": "Here We Go . Testing . Apparently “Jekyll requires blog post files to be named according to the following format”: . 2022-08-20-maaaarkdoooown.md . I think I’m going to leave this empty. . I Hope I Know What I’m Doing . I really do. . . Favorite Instruments . Here’s a list: . Piano (Can Play) | Drums (Cannot Play) | . Here’s a Quote . Life is like a sandwich, no matter which side you start from, the bread always comes first. . Images . I don’t like images. . The End…? . I think so. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/08/22/test-markdown-post.html",
            "relUrl": "/markdown/2022/08/22/test-markdown-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "An Attempt to Create My First Jupyter Notebook",
            "content": "Chapter 1 . This is Chapter 1, thanks for reading. . Chapter 2 . This is Chapter 2, very exciting. . Final Chapter . This is the final chapter, what an epic trilogy. . Thanks for reading. .",
            "url": "https://manigggg18.github.io/manimani/jupyter/2022/08/21/firstnotebook.html",
            "relUrl": "/jupyter/2022/08/21/firstnotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Mani Taleban is a High School Senior at DNHS, taking AP Computer Science. .",
          "url": "https://manigggg18.github.io/manimani/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Notes & Vocab",
          "content": "This page will be used for taking notes throughout the APCSP course . . Week Markdown Jupyter Other Projects . 12 | n/a | n/a | n/a | n/a | . 11 | N@tM Blog | n/a | n/a | Final Project Finished | . 10 | n/a | n/a | n/a | Working on Final Project | . 9 | n/a | Python Web API Endpoints using Songs, Javascript Web Page using an API, Fetch of Backend Songs | n/a | Working On Final Project | . 8 | AP 4.1 Quiz Blog | n/a | n/a | Group Project Plan Check-in | . 7 | AP 1.4 Quiz Blog | Python RapidAPI, Identifying Errors | n/a | Group Project Final Plan | . 6 | AWS Development | n/a | n/a | AWS Server Setup (Docker included) | . 5 | AP 1.1-1.3 Quiz Blog | Java Table, Java (IPYNB) | n/a | Submenu, Group Planning for Final Project | . 4 | Testing Local Server Functions, Program Purpose - Mani&#39;s Idea | n/a | n/a | Personal Flask Server, Setting up Fastpages local server, Docker Setup, Flask Video | . 3 | Code.org App Development Blog, CPT Initial Plan/Design | n/a | n/a | Code.org App | . 2 | Changing the Theme (effects) | Lists, Dictionaries, and Iterations | n/a | Table, Dark Theme | . 1 | Physics Notes, Inspirational Post | Python Intro, Calculator, Tools and Equipment Check | Sample Word Doc | Page Logo, Notes &amp; Vocab, Images | . 0 | Sample MD Post | Sample Jypyter Notebook | n/a | Images, Links, index.html, _config.yml | . Week 0 . Sample Jupyter Notebook . Sample Markdown Post . Week 1 . Tools and Equipment Check . Sample Word Document . Python Intro . Inspirational Post . Calculator . Physics Notes #1 . Week 2 . Lists, Dictionaries, and Iterations . Changing the Theme (Effects) . Week 3 . Code.org App Development Blog . Code.org App . CPT Initial Concept/Design . Week 4 . Testing Local Server Functions . Program Purpose - Mani’s Idea . Personal Flask Server . Setting up Fastpages local server (NOTE: only works locally) . Docker Setup . Flask Video . Week 5 . AP 1.1-1.3 Quiz Blog . Java Table . Java (IPYNB) . Submenu . Group Planning for Final Project . Week 6 . AWS Development . AWS Server Setup (Docker included) . Week 7 . AP 1.4 Quiz Blog . Python RapidAPI . Identifying Errors . Group Project Final Plan . Week 8 . AP 4.1 Quiz Blog . Group Project Plan Check . Week 9 . Python Web API Endpoints using Songs . Javascript Web Page using an API . Fetch of Backend Songs . Working On Final Project . Week 10 . Working on Final Project . Week 11 . N@tm Blog . Final Project Finished . Week 12 .",
          "url": "https://manigggg18.github.io/manimani/notes%20&%20vocab/",
          "relUrl": "/notes & vocab/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "Lessons",
          "content": "Assignment Lesson Grade . 1 | 3.1-3.2 | .9/1 | . 2 | 3.3-3.4 | n/a | . 3 | 3.5-3.6 | TBA | . &lt;/table&gt; .",
          "url": "https://manigggg18.github.io/manimani/lessons/",
          "relUrl": "/lessons/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://manigggg18.github.io/manimani/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}