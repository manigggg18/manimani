{
  
    
        "post0": {
            "title": "MC Test 4 Review",
            "content": "Overview . Overall, I would say that I did pretty good. I definitely need more practice since it took me a relatively long time to answer each question. However, the main problem was the density of the questions. In other words, as I reached the final 5-10 questions of the test, my attention span became non-existent. So I need to get used to answering 50 questions in a relatively short amount of time. . . . .",
            "url": "https://manigggg18.github.io/manimani/mc4",
            "relUrl": "/mc4",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P3-M 4/28 Introduction to SASS",
            "content": "What is SASS? . Sass is a preprocessor language that&#39;s interpreted into CSS. A preprocessor language takes input data and converts it to an output that&#39;s used as input by another program. This means when you run Sass code, you&#39;re actually converting your code to CSS. That CSS code output is then used directly by a browser. Fun fact CSS stands for Cascading Style Sheets and SASS stands for Syntactically Awesome Style Sheets. . . SCSS vs. CSS . Understanding the differences between SCSS and CSS . What is CSS . CSS is the default technology that most programmers use when styling webpage. It is one of the 3 fundamental web technologies along with HTML and JavaScript. HTML manages the structure, JavaScript makes pages interactive, and CSS changes the style by taking a markup language like HTML and describes how it should be presented to the user. . | However, CSS is not very easy to work with lacking a lot features often making using CSS very confusing and difficult or hard to work with on lengthy projects. This is why there are tools like Bootstrap, Sass, and Tailwind that make styling a lot easier and more efficient. We will be using Sass in this course. . | . CSS Example . This is an example of CSS that can be used to change body text of an HTML document | Hack Question:Can you guess what its changing style of the text to? It&#39;s changing the font to Ariel, the color to blue, and the font size to 16. | . body{ color: #0000FF; font-family: Ariel, sans-serif; font-size: 16px; } . What is SCSS . SCSS is short for Sassy Cascading Style Sheets. | SCSS very similar to CSS but the difference comes with the fact that SCSS extends the functionality of CSS while also making it simpler. What this allows us to do is it enables us to things like nested styling, functions, mixins, variables, inheritance (more on these later) and so on. | . Sass Code Example . $blue: #0000FF; body{ color: $blue; font-family: Ariel, sans-serif; font-size: 16px; } . This example is doing the same thing as the other code segment above but the difference being that here we defined the color as $blue which makes it much easier for us to recall later on. In fact, we have done this before, if you have been using the dark mode/midnight theme then go ahead and navigate your your _sass folder and check out the dark-mode.scss and you&#39;ll see something similar to the example above | . So which one is better to use? . CSS tends to be better for really simple styling where not many complex or nested styles are required and small projects that doesn&#39;t require a lot of customization. | SCSS on the other hand is very good for more complex styling and working with a project with more than one page where maybe lots of customization is needed. Such as the projects we made last and first trimester. | . Modular SCSS . Understanding how to use modular SCSS . Modular SCSS allows you to break multiple different files and then be able to compile them into a single CSS file | How do you do this? Well all you need to do is have _filenames.scss so that is compiled into its own file | Now after adding the to the file name you can import it into you file without the and all the styles will be carried over. | The benefits of a partial is that it allows you to big websites and allows you to break up the code in multiple components and easily make changes instead of having to go through a huge file. | All styles in the partial will be added and can be used into the main file as if they were defined in the main file. | . File 1 _variable.scss . $primary-button-color: #009494; $hover-color: black; $menu-color: #f2f2f2; . File 2 style.scss . We can see the importing of the .scss file&#39;s content into the other main .scss file style.scss | . {@import &#39;variables&#39;; @import &quot;{{ site.theme }}&quot;;} /* &quot;row style&quot; is flexible size and aligns pictures in center */ .row { align-items: center; display: flex; } /* &quot;column style&quot; is one-third of the width with padding */ .column { flex: 33.33%; padding: 5px; } .menu a { // float: left; display: block; color: $menu-color; text-align: center; // padding: 14px 16px; text-decoration: none; } .menu a:hover { background: $primary-button-color; color: $hover-color; } . Nesting . What is nesting? Where did the birds come from? . Nesting is a way to organize your code and make it easier to read. It also helps keep your code DRY (Don&#39;t Repeat Yourself). | Nesting is when you put one selector inside another selector. This is a great way to keep your code organized and make it easier to read. | When we make HTML we often nest different elements within each other and have a clear structure when we look at it. | The problem is that in regular CSS we don&#39;t have that so we need to use SASS to help us organize our code. | . Warning:Don&#39;t nest too much as when the CSS is processed it can make overqualified selectors which can be hard to read and maintain. Which means that it would only target that specific element type and not any other elements that have the same class name. ## Sass Nesting | Through nesting the ul, li, and a selectors within the nav selector makes your CSS better and increases its readability overall. | . nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 6px 12px; text-decoration: none; } } . CSS - Lack of Nesting . We can see that through the lack of nesting the CSS is not as organized and needs extra information to be able to make it more clear exactly what is being targeted. | . nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } . Variables . What is a variable? . A variable is a container that stores information so for instance when you multiple places that refer to one value you can just use the variable name instead of the value. | This is valuable in SASS because it allows you to reuse that value in multiple places throughout you stylesheet. | Variables in CSS preprocessors such as Sass allow you to store information that you can reuse in your stylesheet, such as font stacks, colors, or any other CSS value you anticipate needing. The $ symbol is used in Sass to designate a variable. | . Pro Tip:The reason SASS variables are better than variables in regular CSS is that they are more consider and easier to read with a much simpler syntax. Fun Fact: Variables in SASS came before CSS and often SASS has features long before they are actually added to CSS as a whole. . Variable Example Syntax . $variable-name: value; | Once the sass is processed the variable name is replaced with the value throughout the program. | . $main-font: Calibri, sans-serif; $main-color: #000; $main-color-hover: #000; . Operators . Operators are used to perform operations on variables and other aspects of the language like in python we can use operators to see if values are equal, add, divide, subtract, multiply, etc. | SASS has a lot of operators that can be used to perform operations on variables and other aspects of the language as well. They can include == to check if two values are equal and != to check if two values are not equal | + to add two values together | - to subtract two values | * to multiply two values | / to divide two values | % to find the remainder of two values | &lt; to check if one value is less than another | &gt; to check if one value is greater than another | &lt;= to check if one value is less than or equal to another | &gt;= to check if one value is greater than or equal to another | Also there is and, or, &amp; not to be able to use boolean operations | . | . Operator Example Syntax . Operators are used in this example to perform string concatenation | . // Html &lt;p id=&quot;testing&quot;&gt;original text and&lt;/p&gt; // SASS #testing:after{ content: &quot; some&quot; + &quot; more&quot; + &quot; text&quot;; } // Output original text and some more text . Conditional Statements . There are conditional statements in SASS just like in Python and JavaScript they work the same way as well. | Conditional statements are used to perform different actions based on different conditions. Such as if a certain condition is true then do this, if it is false then do that and so on. | SASS has @if which allows for different styles based on if a boolean expression was true or false. | SASS has @else which allows for different set of styles if the if condition was not met or false. | SASS has @else if which allows for an alternative conditions to be run if the first is not met. | . $color: red; button { @if $color == red { background-color: $color; } } // @else: allows you to provide an alternative set of styles to apply if the condition in the @if statement isn&#39;t met $color: blue; button { @if $color == red { background-color: red; } @else { background-color: $color; } } // @else if: allows you to provide multiple alternative conditions to test $color: green; button { @if $color == red { background-color: red; } @else if $color == blue { background-color: blue; } @else { background-color: $color; } } . Loops In Sass . Loops are present in SASS through the @for and @while decorators, along with @each. | Loops are used to repeat a block of code a certain number of times or until a certain condition is met just like in any other programming language. . For Loops: Are used to iterate through a value like a list or a range of numbers | While Loops: Are used to iterate through a block of code until a certain condition is met such as a value is being equal to a certain value through an incrementing or decrementing a variable or any other condition that is met. | . | When using while loops they can be necessary but it is better to use @each and @for as it will make it clear and be able to compile faster. . | Side Note: In SASS lists care a any group of values that are separated by a comma or a space there is no special brackets used like in python or javascript. Lists can be searched for values however they are immutable meaning that they cannot be changed once they are created. . | . Some Code Examples of Loops and Lists . // A for each loop is used to interact with a group of sizes changing // the size of the element for each item in the list $sizes: 40px, 50px, 80px; @each $size in $sizes { .icon-#{$size} { font-size: $size; height: $size; width: $size; } } // @each: allows you to loop over a list of values and generate styles $colors: red, green, blue; @each $color in $colors { .color-#{$color} { background-color: $color; } } . @debug list.index(1px solid red, 1px); // 1 @debug list.index(1px solid red, solid); // 2 @debug list.index(1px solid red, dashed); // null . @use &quot;sass:math&quot;; /// Divides `$value` by `$ratio` until it&#39;s below `$base`. @function scale-below($value, $base, $ratio: 1.618) { @while $value &gt; $base { $value: math.div($value, $ratio); } @return $value; } $normal-font-size: 16px; sup { font-size: scale-below(20px, 16px); } . $base-color: #036; @for $i from 1 through 3 { ul:nth-child(3n + #{$i}) { background-color: lighten($base-color, $i * 5%); } } // @for: allows you to loop over a range of values and generate styles @for $i from 1 through 3 { .item-#{$i} { width: 100px * $i; } } . Functions in SASS . What is a function? . A function is a block of code that performs a specific task. This is a great method to be able to reuse code and processes in a manner that is more efficient and allows for the reuse of code. We do this all the time in programming languages such as JavaScript and Python. | . SASS functions . Sass Functions allow you to define complex calculations and transformations that can be used throughout your stylesheet and allow you to perform complex operations on values, manipulate data, plus you can generate content dynamically. . | There a are built in functions and ones you can make on your own like languages such as JavaScript and Python. . | SASS functions can be used to perform arithmetic operations, manipulate colors, work with strings, and more. . | Functions in SASS are similar to functions in programming languages, but they can be used within SASS stylesheets to generate CSS code dynamically. . | . Using Built-in Functions . Like Python and Javascript SASS provides a variety of built-in functions for math, color manipulation, string manipulation, and more. | . Math Functions . SASS has many functions that allow you to be able to perform wide range of math operations similar to the ones present in python including more complex operations. | . .round(1.2); // returns 1 .ceil(1.2); // returns 2 .floor(1.2); // returns 1 .abs(-1.2); // returns 1.2 .min(1, 2, 3); // returns 1 .max(1, 2, 3); // returns 3 .random(1, 100); // returns a random number between 1 and 100 . Color Functions . Color is an important component of any website and SASS provides a wide range of functions that allow you to manipulate colors in a variety of ways. | . .lighten(#007fff, 20%); // returns a lighter shade of blue .darken(#007fff, 20%); // returns a darker shade of blue .opacify(#007fff, 0.2); // makes the color more opaque .transparentize(#007fff, 0.2); // makes the color more transparent .mix(#007fff, #ff0000, 50%); // returns a mix of two colors . String Functions . SASS provides a variety of string functions that allow you to manipulate strings. Here are some examples: | . .to-upper-case(&quot;hello world&quot;); // returns &quot;HELLO WORLD&quot; .to-lower-case(&quot;HELLO WORLD&quot;); // returns &quot;hello world&quot; .str-index(&quot;hello world&quot;, &quot;world&quot;); // returns the index of the first occurrence of &quot;world&quot; .str-insert(&quot;hello&quot;, &quot; world&quot;, 5); // inserts &quot; world&quot; into &quot;hello&quot; at position 5 . Creating Custom Functions . In addition to using built-in functions, you can also create your own functions in SASS using the @function name(arguments){} | @return is similar to the return statement in JavaScript and Python. It returns a value from a function. | Functions take input values, perform calculations, and return a result. Here&#39;s an example of a simple function that calculates the area of a rectangle: | . @function rectangle-area($width, $height) { @return $width * $height; } // Usage: $area: rectangle-area(10px, 20px); // Returns 200px . Or you can also make a different kind of function that increases the font size to the factorial of a inputted number. | . @function factorial($number){ $calculated: 1; @for $_ from 1 through $number { $calculated: $calculated*$number; } @return $calculated; } #testing { font-size: factorial(3); } . //Combining functions and loops to achieve different sass effects @function sum($numList){ $sum: 0; @each $num in $numList { $sum: $sum+$num; } @return $num; } @function tri($num){ $sum: 0; @for $i from 1 through $num { $sum: $sum+$num; } @return $sum; } @function max($nums){ $i:0; $value:0px; @while $i&lt;length($nums){ @if $value&lt;list.nth($nums,$i){ $value:list.nth($nums,$i); } } } . Custom functions are very powerful, and can be used to create reusable pieces of code that can be used throughout your stylesheets. . | SASS functions are a powerful feature that allow you to perform complex operations on values, manipulate data, and generate content dynamically. By using built-in functions and creating your own custom functions, you can greatly extend the capabilities of your SASS stylesheets. . | . Mixins . Mixin what is a mix in what are we mixing in? . Mixins are a way to make groups of CSS that you want to reuse throughout your site anywhere you please. | Mixins are a form of template and that you can use to build on top of to make different features later on this prevents you from having to write the same code over and over again. | This is a form of encapsulation in your CSS and is a great way to make your code more organized and easier to read. | Mixins can also take in arguments and be able to be used to apply effects on certain elements if that is a feature you want to add to your site. However unlike functions which also take arguments mixins cannot return values. | To use a mixin declare it with @mixin and then incorporate with @include. | . Inheritance . What is inheritance? . In general programming concept where the child class can inherit properties from the parent class. These properties can be changed and modified in the child class. This prevents code from being repeated and makes the code more usable and flexible. | In SASS we have a similar concept that can be used as well we can create base styles and then have other styles inherit from them and then we can change them as we please. | We can do that by through using @extend .name-of-class and then we can add more styles to it as we please. Simple as that | . Mixin &amp; Inheritance Code Example . // example of @mixin @mixin button { width: auto; height: auto; border-radius: 10px; background-color: #21807c; border: 3px solid black; font-size: 1.5em; display: flex; justify-content: center; align-items: center; grid-column: span 1; grid-row: span 1; // creates smooth animation effect transition: all 0.5s; } // default button theme for calculator and stopwatch buttons. Both will follow the same button format .button { // uses the scss from the @mixin @include button; } /* styling for the calculator clear button */ .calculator-button-clear { // @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e68b1c; } /* styling for the calculator equals button */ .calculator-button-equals { // another @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e70f0f; } . Hacks &amp; Hack Helper - Calculator &amp; Hack Helper - Stopwatch . All hacks are pair/trio hacks, individual hacks are not recommended and will not be accepted unless a valid reason is given. We will respond in the appropriate slack channel if we have any questions. Hacks are due by 11:59pm on Wednesday 4/26/2023 at 11:59 p.m. PST. Any late submission will have a deduction of 0.1 points from their total grade. | . Part 1: Reflections 0.4 Points . Write a short description of each key feature of Sass and compare it to CSS and how using Sass makes your life easier when using all the features. Include examples of how it would have made prior features from past projects simpler to implement. Also answer the questions indicated as hack questions. | . Part 2: Sass Demo 0.5+ Points . Using at least 3 or more sass features create a UI demo that may be used for future or current projects and reflect on how this was more effective than doing the same task using only regular features of CSS. Extra points will be awarded based on creativity and extra addition of features from SASS. | . Credits: Team Mortalicously Sassy 💖 . Pt 1 . Variables . Variables in SASS help programmers with storing information that they intend to use multiple times throughout the program. The key difference is that using SASS variables when coding in CSS is way more time-efficient than not using SASS. Although the code might work similarly wether the user uses variables or not, it is for certain that the process of writing the code can be accomplished way faster. . Nesting . Nestings in SASS help programmers with managing the structure of their CSS code in a way that it is more readable and organized. In addition, similar to using variables, nestings help with being more time-efficient. Without nesting, a CSS code segment might look very confusing and unorganized. . Mixins . Mixins in SASS help programmers with grouping multiple CSS calls and using them throughout the project. Similar to the features nesting and variables, mixins help with being more time-efficient. However, perhaps their most significant use when compared to CSS is the ability to pass values into mixins in order to make them more flexible. . Functions . Functions in SASS help programmers with implementing mathematics in their CSS code, which enables them to create procedures that receive one or more arguments and return a single value. SASS functions are very useful when it comes to writing CSS code for very large and complex projects, as they create solutions that would not be accessible without using procedures. . Conditional Statements . SASS allows the use of conditional statements, such as if/else statements, to dynamically generate CSS styles based on variables and conditions. In contrast, CSS does not have built-in support for conditional statements, so styles must be written directly and cannot be generated dynamically. . Loops . With Sass, programmers can use loops to generate repetitive CSS code, reducing the amount of code you need to write. In contrast, CSS does not have native loop functionality, so you would need to manually write out repetitive CSS code. . Inheritance . The inheritance feature in SASS helps programmers with assigning the same set of properties from a class to another class without having the need to repeat the properties. In addition, it is possible to modify certain properties. Without the inheritance feature, CSS code segments would be messier and less readable. . Operators . Operators in SASS allow for mathematical operations to be performed on values, such as addition, subtraction, multiplication, and division. CSS, on the other hand, does not have built-in operators for performing mathematical operations. Instead, developers have to rely on workarounds such as using JavaScript or declaring different CSS classes with different values. . Part 2 . The following code segment is located in the dark.scss file. Here is the UI Demo. . For closer inspection, here is the link for the dark.scss file. The following code segment is separated by a commented line. . // variable $button-size: 50px; // mixin @mixin button-style { display: block; margin: auto; align-items: center; font-family: &#39;Fira Mono&#39;, monospace; width: 100%; color: white; padding: 10px; max-width: 50%; max-height: $button-size !important; cursor: pointer; border-radius: 0.75em; box-shadow: 0 0 0.5em #175178; margin-bottom: 20px; } // mixin applications #play-button { @include button-style; } #close-game { @include button-style; display: none; } .bar-1 { width: 90px; height: 60px; border-radius: 40px; color: #000000; border: #ffffff; margin-left: 300px; margin-top: 10px; } //mixin @mixin timer-style { border-radius: 6px; } // nesting .timer { width: 200px; border: solid 1px #ffffff; margin-left: 20px; margin-top: -30px; @include timer-style; .inner { height: 15px; animation: timer-start 40s linear forwards paused 1; @include timer-style; } } @keyframes timer-start { 0% { width: 100%; background: #1aff00; } 100% { width: 0%; background: #F00; } } #game-container { background-color: #8249c9; position: relative; text-align: center; width: 480px; height: 550px; border-radius: 20px; margin: auto; display: none; } #game { justify-self: center; display: grid; grid-template-columns: repeat(4, 1fr); grid-template-rows: repeat(4, 1fr); width: 450px; height: 450px; } #canvas { position: relative; display: block; padding-top: 22px; margin: 21px; } // nesting .flip-card { background-color: transparent; width: 100px; height: 100px; perspective: 1000px; margin-top: 0px; position: relative; text-align: center; transition: transform 0.6s; transform-style: preserve-3d; div { display: flex; justify-content: center; align-items: center; position: absolute; width: 100%; height: 100%; backface-visibility: hidden; } .flip-card-front { width: 100px; height: 100px; background-color: #ff0000; border-radius: 20px; } .flip-card-back { width: 100px; height: 100px; background-color: #f1dd00; transform: rotateY(180deg); border-radius: 20px; } &amp;.flipped { transform: rotateY(180deg); } } #crds { width: 50px; height: 50px; } .frozen { pointer-events: none; opacity: 1; display: block; } #popup-image { position: absolute; display: none; top: 45%; left: 50%; transform: translate(-50%, -50%); width: 400px; height: 300px; } .",
            "url": "https://manigggg18.github.io/manimani/les2",
            "relUrl": "/les2",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "P3 4/27 Big Idea 3 Data Structures",
            "content": "Leaderboard Database . How do you set up a database model? . What is a database model . A database model shows the logical structure of a database | It fundamentally determines in which manner data can be stored, manipulated, and organized. | Some popular database models are relational models, object oriented models, hierarchial models, flat file models, and network models | The one below is an Object-Relational Model which is a combination of a relational model and an object oriented model | . Creating SQLAlchemy App . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///sqlite.db&#39; app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = False app.config[&quot;SECRET_KEY&quot;] = &quot;SECRET_KEY&quot; db = SQLAlchemy(app) # Images storage app.config[&quot;MAX_CONTENT_LENGTH&quot;] = 5 * 1024 * 1024 # maximum size of uploaded content app.config[&quot;UPLOAD_EXTENSIONS&quot;] = [&quot;.jpg&quot;, &quot;.png&quot;, &quot;.gif&quot;] # supported file types app.config[&quot;UPLOAD_FOLDER&quot;] = &quot;volumes/uploads/&quot; # location of user uploaded content . Creating Database Template . from sqlalchemy import Column, Integer, String, Text from sqlalchemy.exc import IntegrityError import json from werkzeug.security import generate_password_hash, check_password_hash # # Leaderboard DB class that maps leaderboard SQL table # class Leaderboard(db.Model): __tablename__ = &quot;leaderboard&quot; # # Leaderboard DB columns for easy, medium and hard points with user info # id = Column(Integer, primary_key=True) _username = Column(String(255), unique=True, nullable=False) _password = Column(String(255), nullable=False) _pointsEasy = Column(Integer, nullable=False) _pointsMedium = Column(Integer, nullable=False) _pointsHard = Column(Integer, nullable=False) # # Leaderboard DB class constructor # def __init__(self, username, password, pointsEasy, pointsMedium, pointsHard): self._username = username self.set_password(password) self._pointsEasy = pointsEasy self._pointsMedium = pointsMedium self._pointsHard = pointsHard # # Leaderboard DB class string representation of an object # def __repr__(self): return &quot;&lt;Leaderboard(id=&#39;%s&#39;, username=&#39;%s&#39;, pointsEasy=&#39;%s&#39;, pointsMedium=&#39;%s&#39;, pointsHard=&#39;%s&#39;)&gt;&quot; % ( self.id, self.username, self.pointsEasy, self.pointsMedium, self.pointsHard, ) # # Returns Leaderboard username # @property def username(self): return self._username # # Sets Leaderboard username # @username.setter def username(self, value): self._username = value # # checks Leaderboard username valid # def is_username(self, username): return self._username == username # # Returns Leaderboard easy points # @property def pointsEasy(self): return self._pointsEasy # # Sets Leaderboard easy points # @pointsEasy.setter def pointsEasy(self, value): self._pointsEasy = value # # Sets Leaderboard medium points # @property def pointsMedium(self): return self._pointsMedium # # Sets Leaderboard medium points # @pointsMedium.setter def pointsMedium(self, value): self._pointsMedium = value # # Returns Leaderboard hard points # @property def pointsHard(self): return self._pointsHard # # Sets Leaderboard hard points # @pointsHard.setter def pointsHard(self, value): self._pointsHard = value # # Returns Leaderboard password # @property def password(self): return self._password[0:10] + &quot;...&quot; # # Sets Leaderboard password # def set_password(self, password): self._password = generate_password_hash(password, method=&#39;sha512&#39;) # # Checks Leaderboard password validity # def is_password(self, password): result = check_password_hash(self._password, password) if result: return True else: return False # # Converts Leaderboard to dictionary # def to_dict(self): return {&quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;password&quot;: self.password, &quot;pointsEasy&quot;: self._pointsEasy, &quot;pointsMedium&quot;: self._pointsMedium, &quot;pointsHard&quot;: self._pointsHard} # # Converts Leaderboard to string values # def __str__(self): return json.dumps(self.read()) # # Creates Leaderboard database # def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None # # Returns Leaderboard name value pairs # def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.name, &quot;password&quot;: self.uid, &quot;pointsEasy&quot;: self.pointsEasy, &quot;pointsMedium&quot;: self.pointsMedium, &quot;pointsHard&quot;: self.pointsHard } # # Updates Leaderboard DB rows for points and user data # def update(self, username=&quot;&quot;, password=&quot;&quot;, pointsEasy=&quot;&quot;, pointsMedium=&quot;&quot;, pointsHard=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if len(pointsEasy) &gt; 0: self.pointsEasy = pointsEasy if len(pointsMedium) &gt; 0: self.pointsMedium = pointsMedium if len(pointsHard) &gt; 0: self.pointsHard = pointsHard if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # # Delets Leaderboard row from teh DB # def delete(self): db.session.delete(self) db.session.commit() return None . Initialization of Data . # Initializes Leaderboard DB with test data # def init_leaderboards(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; l1 = Leaderboard(username=&quot;bob&quot;, password=&quot;apple&quot;, pointsEasy=2, pointsMedium=5, pointsHard=3) l2 = Leaderboard(username=&quot;bobby&quot;, password=&quot;appley&quot;, pointsEasy=20, pointsMedium=50, pointsHard=30) l3 = Leaderboard(username=&quot;bobbert&quot;, password=&quot;appled&quot;, pointsEasy=200, pointsMedium=500, pointsHard=300) l4 = Leaderboard(username=&quot;bobruth&quot;, password=&quot;appler&quot;, pointsEasy=100, pointsMedium=300, pointsHard=500) leaderboards = [l1, l2, l3, l4] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for l in leaderboards: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = l.create() print(f&quot;Created new uid {object.username}&quot;) db.session.add(l) db.session.commit() except: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {l.username}, or error.&quot;) init_leaderboards() . Created new uid bob Created new uid bobby Created new uid bobbert Created new uid bobruth . DO THESE FOR THIS SECTION . fill in the blanks | add a new leaderboard, and edit the bobbert leaderboard; add proof with a screenshot of the sqlite.db | add a new set of keys and values to the leaderboard; add proof with a screenshot of the sqlite.db | . Picture Database . | Used CRUD methods which have create, read, update, and delete rows in the table. There is a function called initEasyImages which populates the &#39;Images&#39; table with data. | The init method is used to create a new row in the table with a given imagePath, xCoord, yCoord, and difficulty. The repr method returns a string representation of the object when it is printed. | The table has five columns: id, _imagePath, _xCoord, _yCoord, and _difficulty. | | This part of the code defines getter and setter methods for the columns in the Images model. It sets and retrieves the metadata of the image. | | The initEasyImages function initializes the database with image metadata for easy difficulty images. | . from sqlalchemy import Column, Integer, String, Text, LargeBinary from sqlalchemy.exc import IntegrityError from pathlib import Path class Images(db.Model): __tablename__ = &#39;images&#39; id = Column(Integer, primary_key=True) _imagePath = Column(Text, unique=True, nullable=False) _xCoord = Column(Integer, nullable=False) _yCoord = Column(Integer, nullable=False) _difficulty = Column(Integer, nullable=False) def __init__(self, imagePath, xCoord, yCoord, difficulty): self._imagePath = imagePath self.xCoord = xCoord self.yCoord = yCoord self.difficulty = difficulty def __repr__(self): return &quot;&lt;image(id=&#39;%s&#39;, imagePath=&#39;%s&#39;, xCoord=&#39;%s&#39;, yCoord=&#39;%s&#39;, difficulty=&#39;%s&#39;)&gt;&quot; % ( self.id, self.imagePath, self.xCoord, self.yCoord, self.difficulty ) @property def imagePath(self): return self._imagePath @imagePath.setter def imagePath(self, value): self._imagePath = value @property def xCoord(self): return self._xCoord @xCoord.setter def xCoord(self, value): self._xCoord = value @property def yCoord(self): return self._yCoord @yCoord.setter def yCoord(self, value): self._yCoord = value @property def difficulty(self): return self._difficulty @difficulty.setter def difficulty(self, value): self._difficulty = value def to_dict(self): return {&quot;id&quot;: self.id, &quot;imagePath&quot;: self._imagePath, &quot;xCoord&quot;: self._xCoord, &quot;yCoord&quot;: self._yCoord, &quot;difficulty&quot;: self._difficulty} def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;path&quot;: self.imagePath, &quot;xCoord&quot;: self.xCoord, &quot;yCoord&quot;: self.yCoord, &quot;difficulty&quot;: self.difficulty } # CRUD update: updates user name, password, phone # returns self def update(self, path=&quot;&quot;, xCoord=&quot;&quot;, yCoord=&quot;&quot;, difficulty=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; xCoord = int(xCoord) yCoord = int(yCoord) if path: self.imagePath = path if xCoord &gt;= 0: self.xCoord = xCoord if yCoord &gt;= 0: self.yCoord = yCoord if difficulty in range(3): self.difficulty = difficulty db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . def initEasyImages(): with app.app_context(): db.create_all() image_dir = Path.cwd()/&quot;images&quot; images_paths = [i.name for i in image_dir.iterdir()] images = [Images(&quot;images/easy/&quot; + image, 250, 250, 0) for image in images_paths] for image in images: try: image.create() print(&quot;Successfully added entry&quot;) except: db.session.remove() print(&quot;Error adding image: &quot;, image.imagePath) initEasyImages() . Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry . Popcorn Hacks . The init method initializes a new Images object with the following parameters: imagePath, xCoord, yCoord, and difficulty. | In the Images class, the tablename attribute specifies the name of the table. | The update method updates the values of the object&#39;s attributes imagePath, xCoord, yCoord, and difficulty based on the input parameters, and then uses the db.session.commit method to commit the changes to the database. | The db module used in this code is part of a larger library called SQLAlchemy, which provides a set of tools for working with databases in Python. | . Picture Encoding . Essential Question: What are some methods that we could store and access images in the backend, and how can we send them to a frontend application? . The image encoding process for this project is done within the endpoints created on our backend application. The overarching process is split into three seperate sub-processes, each handling a different level of game-difficulty. For this lesson, we will look at the easy images sub-process as our example. . def get_random_easy_image(): images = Images.query.filter_by(_difficulty=0).all() image = random.choice(images) return image . This procedure is a void function that takes in no arguments directly, but does access the database via the Images object imported from the models that we created . The first line filters all database entries and searches for all image entries with the difficulty column set to 0, which we established as the identifying factor for easy images. The .all() method attached to the end of the query serves to return all matching image objects in a list called image. . The procedure finally returns a random image using the random.choice method. . class ImagesAPI: class _EasyImages(Resource): def get(self): image = get_random_easy_image() json_data = {} if image: image_path = project_path + &quot;/&quot; + image.imagePath with open(image_path, &quot;rb&quot;) as image_file: json_data[&quot;bytes&quot;] = str(base64.b64encode(image_file.read()))[2:][:-1] json_data[&quot;xCoord&quot;] = image.xCoord json_data[&quot;yCoord&quot;] = image.yCoord return jsonify(json_data) . If the first procedure locates and selects the image, the second procedure then encodes, formats, and returns the JSON data containing the image and its metadata. . The procedure first calls the get_random_easy_image() procedure created earlier to store our image object and also initializes an empty dictionary to store our json data. . If a valid image object is found, the procedure will attempt to create an absolute path to the image file on the computer running flask application. This is achieved by concatenating the absolute path of the working project directory to the relative image path stored in the database. The aboslute path of the directory is generated in our namespace package (__init__.py) in our _nighthawkguessr_api_ package. The line calculating the project path is shown below, and uses the Path object from the pathlib library. . project_path = Path.cwd().as_posix() . After creating the image path, the procedure attempts to open the image file, and procedes to use the base64.b64encode method to encode the image file bytes into base64 data. This is convinient for us as HTML on the frontend pages allows us to render images with base64 bytes (Not sure about normal image bytes). The base64 bytes are then encoded into a python literal string in order to be jsonified and displayed on the api endpoint. The [2:][:-1] appended to the end is a type of string slicing which removes the b&#39; generated at the start of the data and the &#39; generated at the end of the data. These extraneous characters are used to indicate a base64 string, and are not part of the original data. . The procedure finally appends the metadata (position of the right coordinates on the map) to the json_data dictionary, completing the process. . Finally, the procedure returns the JSONified data, which is accessible from our API. As you can see, the images we process are extremely large and possess high resolution (typically a few megabytes!) . Popcorn Hack: . Please write a few sentences answering the essential question, &quot;What are some methods that we could store and access images in the backend, and how can we send them to a frontend application?&quot; . You can store images in a database, either as binary data or as a reference to the image file stored in a separate dictionary or pathway. This approach can make it easier to manage and query your images, but it may not be the most efficient way to store large image files. Once the images are stored, you can send them to a frontend application using an API endpoint that returns the image data in a specific format such as JSON. The frontend application can then make a request to this API endpoint to retrieve the image data . Endpoints . What are endpoints and how do we use them to transfer data from one part of the internet to another? . Backend: . The backend creates endpoints that are used to edit the properties of the database constructed by the model. | GET, POST, PUT, and DELETE methods are used in order to define HTTP endpoints in the API. These endpoints are based on requests that can be made to manipulate the database. | Variables defined in the model file are used to call data from the database in order to be manipulated. | . | . Methods in Backend Example . Modules are being imported with specified classes which are used later in the program. Blueprint: used to organize routes and functions | request: used to access data sent to the Flask app. through the HTTP request | Api: creates a Flask instance that handles requests | Resource: this allows for the definition of custom HTTP requests | reqparse: used to parse (sort and search) and validate data that is requested | . | The blueprint and api are then defined as variables and are used to store any future data that is requested. | Some preliminary functions, such as find_by_username, are created to be used later in the API code, allowing for simpler code. In this case, these functions are used to search through the database to find specific usernames. | . | . from flask import Blueprint, request from flask_restful import Api, Resource, reqparse # setting variables used to store future data leaderboard_bp = Blueprint(&quot;leaderboards&quot;, __name__) leaderboard_api = Api(leaderboard_bp) # pre-made function created to search for usernames, allows for simplified program def find_by_username(username): users = Leaderboard.query.filter_by(_username=username).all() return users[0] . GET Method . This method is used to fetch specific data points from the database by searching through the usernames. | This will be different for each type of database being made, however the general format stays the same. Since this is a text database, to pull specific information from the database, the API will query through the data using the username, which is unique. | The function defined previously, find_by_username(), is used to search through the database and pull the specific data point that is being searched. | If the user exists, the data of that user will be returned, being sent to the frontend of the program. | If a user isn&#39;t found, an error will be returned that the user does not exist. | . | In general, the program will always be searching for a piece of information that is unique and that will be used to pull data to wherever it is being requested. | . def get(self): # requested username turned into variable for later use username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) # username used to search for data and the found data is made into a variable user = find_by_username(username) if user: # data is sent to the frontend return user.to_dict() # error checking return {&quot;message&quot;: user}, 404 . POST Method . This method is used to add a specific piece of information in the database based on searching by usernames. | This is again different for each database that is made, however the general structure stays the same. In this example, a parser is being used to extract data from an incoming data. In this case, the RequestParser class is used from the Flask module. All required arguments are added to the parser, specifying what type of data it is. | The args variable is added in order to parse and store all incoming data. | . | The variable leaderboard is created to make a new object that will contain the values from the incoming data. | The function will attempt to add a new entry in the leaderboard database and return a status of a successful addition of the data. | If there is an error in the data being inputted, a status code of 500 will be returned. | . | . def post(self): # using parsers to gather and data that is to be posted and validate it&#39;s true parser = reqparse.RequestParser() parser.add_argument(&quot;username&quot;, required=True, type=str) parser.add_argument(&quot;password&quot;, required=True, type=str) parser.add_argument(&quot;pointsEasy&quot;, required=True, type=int) parser.add_argument(&quot;pointsMedium&quot;, required=True, type=int) parser.add_argument(&quot;pointsHard&quot;, required=True, type=int) # variable made to store data args = parser.parse_args() # variable created to format all data into one place and send to database for logging leaderboard = Leaderboard(args[&quot;username&quot;], args[&quot;password&quot;], args[&quot;pointsEasy&quot;], args[&quot;pointsMedium&quot;], args[&quot;pointsHard&quot;]) try: # data is sent to the database for storage db.session.add(leaderboard) db.session.commit() return leaderboard.to_dict(), 201 except Exception as e: # error checking db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . PUT Method . This method is used to update a specific piece of information in the database based on searching by usernames. | For each data base that is made, there will be different specific but the overall structure stays the same. First, the username variable is defined, which retrieves the requested username and sets it as a variable that will be used later to edit a specific dataset. | The function find_by_username() is again used to search through the data to look for the username requested. This is set to a variable to be used later. | If the username is found in the database, the rest of the dataset is updated with the new values requested. This is updated into the database. | If there is an error found with the data requested of it the user isn&#39;t found, an error is returned. | . | . def put(self): # variable created to make requested username into something that can be used to search for data in future username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # attempts to find the data in the database user = find_by_username(username) if user: # if the data is found, the data points are updates user.pointsEasy = int(request.get_json().get(&quot;pointsEasy&quot;)) user.pointsMedium = int(request.get_json().get(&quot;pointsMedium&quot;)) user.pointsHard = int(request.get_json().get(&quot;pointsHard&quot;)) db.session.commit() return user.to_dict(), 201 else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . DELETE Method . This method is used to delete a specific information from the database, again searching by username. | The overall structure stays the same between different databases, but the specific variables will need to be changed to personalize the database. A variable for the username is created in order to search for for the user name requested later in the code with the function find_by_username(). | If the user is found, the user is deleted, along with that user&#39;s data and the change is saved to the database. | If the user isn&#39;t found or if an error is found with the data requested, an error is returned. | . | . def delete(self): # username variable defined to store requested value username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # finds the username and stores data in variable user = find_by_username(username) if user: # if the user is found, the user and their data is deleted db.session.delete(user) db.session.commit() return user.to_dict() else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # error checking for request error db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Displaying the Full Database . Another class is created in order to display the entire database at once and also to delete the entire database if necessary. | This uses the same functions as before to GET and DELETE the data, however it is modified slightly to look through the entire database abd display or delete all data points. | An example of where this would be useful is to create a table of data in the frontend. | . class LeaderboardListAPI(Resource): # GET method def get(self): try: # attempts to find the entire database requested and is stored in variable leaderboards = db.session.query(Leaderboard).all() # sends back the entire database return [leaderboard.to_dict() for leaderboard in leaderboards] except Exception as e: # error checking for request errors db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 # DELETE method def delete(self): try: # deletes entire database db.session.query(Leaderboard).delete() db.session.commit() return [] except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . What are the four HTTP request methods that are used with Flask? | GET, POST, PUT, DELETE . What is a parser and how would it be aid with data validation? | Parsers process input data to extract and organize the relevant information from the input. Parsers can be used to transform the input data into a structured format that can be easily processed by other programs. When it comes to data validation, a parser can be useful in ensuring that the input data conforms to a specific format or structure. . What is the role endpoints in Flask? | It is an identifier that is used in determining what logical unit of your code should handle the request. Normally, an endpoint is just the name of a view function. . Frontend and How it Communicates to Backend . This first part of the frontend logic simply finds out of the site is running locally or not, off of which is figures out whether or not to pull data from the local backend link or the global backend link. In this example, a global backend link hasn&#39;t been sent, however it would go in the second set of quotations after the local address. This isn&#39;t something you need to know, but it is nice to use when developing full stack applications. . // checks if site is run locally const isLocalhost = Boolean( window.location.hostname === &quot;localhost&quot; || window.location.hostname === &quot;[::1]&quot; || window.location.hostname.match(/^127(?: .(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) ) // defines database url const api = isLocalhost ? &quot;http://localhost:8200&quot; : &quot;&quot;; . GET Method . This method is more complicated in terms of requesting, simply because in order to, for example, print all data points into a table, the function needs to iterate through the entire database. | In this example, the function getList() is used to asynchronously fetch the entire database and set it to a variable called list. The list is returned for later use outside of this function in order to print the data. | . | . Printing the Data . In order to print the data, the function getList() is run and once it is run, it iterates through the data to pull out each individual data point and enter it into the function used to make the table. For each class in the database, which is each row in the database, the variables corresponding to that specific class are pulled and inserted into the addTask() function as parameters to create the table of users. | . | The function addTask() is used to create the visual table that the user sees. A row is created and for each table cell in that row, the data is added by iterating through the array of variables that are parameters pulled directly from the database. | A new row is added into table for each new class of information pulled from the database. | . | . // fetches entire database const getList = async () =&gt; { // stores it in variable list const list = await fetch(api + &quot;/leaderboardList&quot;).then((r) =&gt; r.json()); return list }; // goes through entire database and pulls each individual class getList().then(list =&gt; { // for each class (row), data is pulled and added into addTask() function to be put in visual table list.forEach(cls =&gt; { addTask(cls.username, cls.pointsEasy, cls.pointsMedium, cls.pointsHard) }) }) // adds visual representation of data in table function addTask(username, pointsEasy, pointsMedium, pointsHard) { // array of variables defining data points var tableCells = [username, pointsEasy, pointsMedium, pointsHard] // creates new row in variable var row = document.createElement(&#39;tr&#39;) // goes through entire data set and places data into cells for (var i = 0; i &lt; tableCells.length; i++) { var tableCell = document.createElement(&#39;th&#39;) tableCell.textContent = tableCells[i] tableCell.className = &#39;cell&#39; row.appendChild(tableCell) } // creates new row as child of schedule element schedule.appendChild(row) } . POST Method . This method is used to push data to the backend using the HTTP POST method. The function addData is defined with the parameters that are going to be pushed into the backend. | An object is created to define the variables that are going to be pushed into the backend. This is basically the JSON string that will be sent to the backend to get decoded and inserted into the database. | The fetch() function is called with the api variable, which is a variable representing the url for the backend API, and the extension specific to where the data will be posted, in this case being /leaderboard. The method, headers, and body of the data are defined in order to complete a successful HTTP request to the backend. The object data which was created earlier, is converted to a JSON string here and sent to the backend. | . | If an error is detected, it is returned and the request will fail. | . | . // calls addData function function addData(username, password, pointsEasy, pointsMedium, pointsHard){ // creates object defining the variables that will be added to the backend, corresponding with the backend variables let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // POST method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . PUT and DELETE Methods . These two methods are almost identical to the POST method above in the way they work, the only difference being that the method requested is different. The name of the function defined is also changes, in this case being editData() and deleteData(). | . // editing function defined function editData(username, password, pointsEasy, pointsMedium, pointsHard){ // has object with variables that are required in backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // PUT method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;PUT&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . // deleting function defined function deleteData(username, password, pointsEasy, pointsMedium, pointsHard){ // object defined with variables that are same as backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // DELETE method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;DELETE&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . Calling Images (GET Method) . The process for calling images is basically the same as anything else, except you need to be able to reconstruct the images based on the base64 that is requested from the backend. | In this case, the image in the api is being called to the frontend and is returned as the variable list. This is then inserted directly into the html by getting the element that needs to be edited and styling with CSS by using the built-in function data:image/png;base64, which translated from bytes to pixel. | . | . // GET method calling info from backend url const getList = async () =&gt; { const list = await fetch(api + &quot;/api/images/GetEasyImage&quot;).then((r) =&gt; r.json()); return list }; // inserting image into frontend getList().then(list =&gt; { document.getElementsByTagName(&quot;body&quot;)[0].style = &quot;background-image: url(&#39;data:image/png;base64, &quot; + list.bytes +&quot;&#39;);&quot; }) . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . How is data for images stored in a Flask API and how is it displayed on the frontend when requested? | They are stored as binary data in a database. When an image is requested, the API will retrieve the image from the database and send it as a response. To display the image on the frontend, HTML with the API endpoint is used. . What is the fetch() function and how is it used in frontend logic? | Built-in JavaScript method that allows you to make network requests to retrieve resources from a server. . How is data formatted and sent to the backend? (mention JSON in your answer) | Data is fetched from a RESTful API endpoint using the fetch() method, and then the response is converted to JSON format using the .json() method. . Time and Space Complexity of Algorithms . The lesson for time and space complexity of algorithms will consist of demonstrations of sorting algorithms and the different time complexities that they come with on a small scale. This can be acomplished using things such as a deck of cards or even with actual people. An example of how this will work is laying out the cards in a random order on the table, and demonstrating different ways of sorting it. From methods such as bubble sort to methods such as bogo sort, it will be really easy to see exactly how much time it would take for these different sorting algoritms to complete. Then after that, it is easy to understand the concept of time complexity when given a real world example. . Space complexity can be demonstrated by using the same method, however, adding in the extra step of having the cards in a pile. This will show how much space is needed to complete the sorting algorithm. This will easily reveal the concept of space complexity because it allows people to witness a real world, physical example of the concept, turning a really hard to grasp concept into something that is easy to understand. . Additionally, we are also going to analyze certain algorithms within our project to show how such analysis is applicable to real world projects. . Essential Question: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . QuickSort Algorithm . The main algorithm we&#39;ve employed is an recursive implementation of quickSort in the backend to sort the database entries to obtain the user with the highest overall score. Typically this algorithm is implemented to sort in ascending order, but to make it easier to extract the top 10 users, we sill be modifying the algorithm to sort in descending order (so the top players show up first in the list). . class LeaderboardTop10(Resource): def partition(self, arr, lo, hi): pivot = arr[hi][1] # Pivot value set to the 2nd index of the last element pivot_pos = lo - 1 # Set our base pivot position, ensure that lower picoit index == lo for idx in range(lo, hi): # Iterate over all elements in the partition array if arr[idx][1] &gt;= pivot: # Found an element creater than pivot pivot_pos+=1 # Increment correct position for pivot arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] # Swap the larger element with the element at the current pivot position arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] # Swap element at pivot position with the pivot element return pivot_pos+1 # Return index of pivot element def qSortUserList(self, arr, lo, hi): if lo &lt; hi: last_pivot = self.partition(arr, lo, hi) self.qSortUserList(arr, lo, last_pivot-1) self.qSortUserList(arr, last_pivot+1, hi) def get(self): users_list = get_user_list() top10 = {} self.qSortUserList(users_list, 0, len(users_list)-1) for user in users_list: top10[user[0]] = user[1] print(top10) if len(top10) &lt;= 10: return top10 return top10[:10] . To understand how the algorithm first, we must first familiarize ourselves with the process. . Our backend grabs all users from our leaderboard | Returns all users and their scores in a 2-D array, each element is a list of length two that contains the username and cumulative score of the player | The sorting algorithm will use the second element representing the user score to sort the array of users. ┌─────────────────────┐ ┌──────────────────┐ ┌─────────────────┐ │ │ │ │ │ │ │ │ │ Split │ │ display │ │ Database │ │ the ├──────────────► sorted list │ │ │ │ List into │ │ on endpoint │ │ │ │ top 10 users │ │ │ └──────────┬──────────┘ └─────────▲────────┘ └─────────────────┘ │ │ │ │ │ │ │ │ ┌──────────▼──────────┐ ┌─────────┴────────┐ │ │ │ │ │ 2-D User Array │ │ QuickSort │ │ ├───────────────► │ │ [(username, score)] │ │ Algorithm │ │ │ │ │ └─────────────────────┘ └──────────────────┘ . Our quickSort algorithm consists of 2 procedures, a partition() procedure that pivots and sorts individual elements, and a qSortUserList() that performs recursion which finishes the sorting. | The Logic . The partition procedure will serve to &quot;partition&quot; our list into 2 parts, a smaller portion and a larger portion around a certain pivot value (Note: These portions don&#39;t have to sorted yet!). . Partition procedure . First, partition selects a certain element in a list to be a pivot. This pivot value will be used to make comparisons to every other value in the array. For simplicity, we have selected our pivot element as the last element in the unsorted list. The procedure defines a pivot_pos variable to denote the correct position of the pivot index after each iteration. Although it may seem weird that the variable intially starts with a value of 0-1 = -1, this negative index is resolved by the return statement, which always returns an index that&#39;s one higher than pivot_pos. This serves to ensure that the lowest pivot index would be 0, which is the smallest element in any given partition. . pivot = arr[hi][1] pivot_pos = lo - 1 . The partition will then iterate over each element in the list from the starting and ending indexes indicated by the parameters. if a particular value is found to be larger than the pivot, the algorithm well then increment the recorded pivot position and swap the pivot with the found element. . for idx in range(lo, hi): if arr[idx][1] &gt;= pivot: pivot_pos+=1 arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] . Finally, the partition procedure swaps the element at the pivot_pos+1 index with our pivot element at the hi index to place the pivot at it&#39;s rightful place. We know that pivot_pos+1 must be smaller than hi because it did not trigger the conditional to increment the `pivot_pos+1`` index. At last, the pivot_pos is incremented and returned to serve as an indicator of where our two partitions split. . arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] return pivot_pos+1 . qSort procedure . If the parition procedure splits our list into smaller and larger regions, then our qSort procedure ensures that these regions are in order. It&#39;s hard to explain, but the procedure iterates over each paritition, repeating the paritition process, setting new pivot values, and correctly places the pivot values at their correct sorted order. . The procedure first checks if the lower index is smaller than the higher index, to ensure that our parition has a length greater than 1. If this check passes, the procedure then calls the partition procedure to both split our list into the two distinct regions and also the index of our correctly placed pivot value. The procedure then invokes itself again on the larger interval (replacing hi to be the partition index-1 since the previous pivot is already sorted), and also on the smaller interval (replacing lo to be partition index+1). . Eventually, the qSort procedure will iterate through all elements in the list while parition places each element at the correct position, giving us the final sorted list. . Complexity analysis . To analyze time complexity, we must analyze the partition and qSort procedures. . For the qSort procedure, because we divide the array into 2 halves during each function call, our number of function calls scales proportionally to log(n), where n is the length of the input array. However, within each function call, we also call the partition procedure, which contains an for-loop that iterates over each element in the partioned array, comparing it to a pivot value. We are well familiar with since loops, and can safely say that runtime scales proportionally to the length of the partition array. Due to this, we can conclude that our iteration time complexity scales linearly. Thus for each iterative process, our timerun scales proportionally to n. . Finally, we could multiply our two complexities together to get a representation of our overall complexity. Thus, the asymptotic notation for a time complexity could be represented as O(nlogn), where n is the length of the input array. Keep in mind, Big-Oh notation is not a function that returns the accurate runtime for any given input, but rather only gives us a model to see how runtime scales with increasing input sizes. . Space complexity for this program is much easier to analyze. Because the array is sorted in-place (meaning we don&#39;t create other placeholders or copies), we require no additional space to sort this array. However, recursive function calls may require extra storage on the call stack. Since we found the number of recursive calls to be asymptotic to O(logn), we can conclude that quickSort has an O(1) space complexity for an iterative method, and an O(logn) space complexity for a recursive method. . Popcorn Hack . Please answer our EQ for this section: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . Quicksort is a sorting algorithm that uses the divide-and-conquer approach. It works by selecting a pivot element from the array and partitioning the array around the pivot such that all elements smaller than the pivot come before it, and all larger elements come after it. The algorithm then recursively sorts the two partitions until the entire array is sorted. Quicksort has an average time complexity of O(nlogn) and a worst-case time complexity of O(n^2), with a space complexity of O(logn) on average and O(n) in the worst case. . Hacks - Frontend and Backend . Please clone these two repositories: . Frontend | Backend | . Directions: . You will be creating a full stack of a text and image database which you will code in the Flask Backend and pull information to sort in the Frontend. . You need to have coded a fully working CRUD in the Flask, which you can show working with Postman, however you only need to show the Frontend reading and displaying data from the backend. . You may use the code we showed to you today in class in order to code the both the Frontend and Backend. . Follow the directions in the comments in the Flask Backend and the ReadMe in the frontend before starting. . Hacks - QuickSort . On this notebook, try recreating the original quicksort algorithm from our modified version. For an additional challenge, try abstracting the partitioning process through list comprehension! . After creating a successful algorithm, either create a diagram showing how the algorithm works, or a diagram that illustrates the time and/or space complexity of a recursive approach. . Hacks Helpers . If you need help with your hacks, you can check out our project repos to see how we did it. . Frontend Table | Frontend Image | Backend | . You can also message us on the coding Slack channel for additional help. . Points . Popcorn Hacks - 0.1 pts | Full Stack - 0.4+ 0.5 extra for styling html page | . | QuickSort Hacks - 0.3+ 0.5 extra for implementing quicksort | . | . HACKS ARE DUE SATURDAY (4/29) 11:59 PM . You can just give me .1 .",
            "url": "https://manigggg18.github.io/manimani/student/2023/04/27/lessonstudent.html",
            "relUrl": "/student/2023/04/27/lessonstudent.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Big Idea 2 - Data Related to User Guide",
            "content": "Introduction . When building an application that requires users to create accounts or sign in, handling data related to users is crucial. This data can include things like user profiles, preferences, and activity logs, which can be used to personalize the user experience and improve the application&#39;s performance. . By learning how to handle data related to users effectively and efficiently, you&#39;ll be equipped with the skills and knowledge needed to build helpful applications that meet the needs of your users. . PLEASE DON&#39;T OPEN THE POPCORN HACKS, WE WILL OPEN THEM DURING THE PRESENTATION . Basics of Class and User Data . Establishing Class/User Data and making a new user . Because Python is an object-oriented programming (OOP) language, everything in it represents an object. Lists, dictionaries, functions, etc. are all examples of Python objects. Generally speaking, a Python object is an entity of data items and methods describing the behavior of those items. . A Python class is a template used to create Python objects. We can think of it as a cooking recipe, where all the ingredients and their quantities are listed, and the whole process of cooking is described step-by-step. . In this case, we can compare a cake recipe to a class, and a cake cooked following that recipe to an object (i.e., an instance of that class). Using the same recipe (class), we can create many cakes (objects). This is the essence of creating a class in Python: to define data elements and the rules establishing how these elements can interact and change their state — and then use this framework to build various objects in a set way, instead of creating them from scratch every time. . Let&#39;s look at a few examples: . class Bikes: name = &quot;&quot; gear = 0 # create objects of class bike1 = Bikes() # objectName = ClassName() bike2 = Bikes() . Now that we have our class and object defined, we can now run code to modify certain attributes of our objects. . bike1.gear = 11 bike1.name = &quot;Mountain Bike&quot; bike2.gear = 13 bike2.name = &quot;Road Bike&quot; print(f&quot;Name: {bike1.name}, Gears: {bike1.gear} &quot;) . Name: Mountain Bike, Gears: 11 . Popcorn Hacks #1: Add another print command to display the attributes of Bike #2. What output will this code segment produce? print(f&quot;Name: {bike2.name}, Gears: {bike2.gear} &quot;) . Name: Road Bike, Gears: 13 . Example: Defining a User Class . Now we will look into Classes for users of a program or website. . class User: def __init__(self, username, email): self.username = username self.email = email def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . For this cell, we define a User class with a constructor method &quot;init&quot; that takes username and email as arguments. The display_info method is used to print the user information. . For backend functionality, this class can be used to create, manipulate, and manage user data. For example, when a new user signs up for an account, you could create a new User object with their username and email. This object can then be used to perform various operations, such as validating the user&#39;s input, storing the user&#39;s data in a database, or processing user-related requests. . Now let&#39;s make a new User: . new_user = User(&quot;jeffrey&quot;, &quot;leejeffreysc@gmail.com&quot;) new_user.display_info() . Username: jeffrey, Email: leejeffreysc@gmail.com . Here&#39;s a step-by-step breakdown of how the code relates to backend functionality: . new_user = User(&quot;jeffrey&quot;, &quot;leejeffreysc@gmail.com&quot;): This line creates a new User object, initializing it with the username &quot;jeffrey&quot; and the email &quot;leejeffreysc@gmail.com&quot;. This could represent a user who has just signed up for an account, and the input values would typically come from user input, such as a frontend signup form. . new_user.display_info(): This line calls the display_info method on the new_user object, which prints the user&#39;s information (username and email) to the console. In a real-world backend application, you might use this method or a similar one to display user information in logs, send a welcome email, or create an API response with the user&#39;s data. . User/Class @ Decorators: . A Python Class allows for the use of @ decorators, these allow access to attribute data without the use of functions. . @property decorator (aka getter). This enables developers to &quot;GET&quot; attribute data in a clean method (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to &quot;UPDATE&quot;/set attribute data in a clean method (object.name = &quot;Jeffrey&quot; versus object.set_name(&quot;Jeffrey&quot;)) | . The getter and setter methods provide a clean and controlled way to access and modify the attributes of an object. This can be particularly useful when interacting with databases, APIs, or other parts of a web application that require the management and manipulation of object attributes. . class Student: def __init__(self, student, name): self._student = student self._name = name @property def name(self): return self._name @name.setter def name(self, new_name): self._name = new_name . In this example, the Student class has a name attribute, which is accessed and modified through the name property getter and setter methods. The _name attribute uses an underscore prefix, which is a convention to indicate it should not be accessed directly. . Usage of the getter and setter methods are below: . student = Student(1001, &quot;Derek Sol&quot;) print(student.name) # Get the name using the getter method student.name = &quot;Jagger Klein&quot; # Set the name using the setter method print(student.name) . Derek Sol Jagger Klein . Popcorn Hacks #2: The following code segment for computers does not have getter and setter methods called. Using the missing attributes &quot;model&quot; and &quot;year&quot;, add example getter and setters methods for this class. Show us an example output that this code segment might produce. class Computer: def __init__(self, model, year): self._model = model self._year = year @property def model(self): return self._model @model.setter def model(self, new_model): self._model = new_model @property def year(self): return self._year @year.setter def year(self, new_year): self._year = new_year . class Computer: def __init__(self, model, year): self._model = model self._year = year def get_model(self): return self._model def set_model(self, new_model): self._model = new_model def get_year(self): return self._year def set_year(self, new_year): self._year = new_year . Databases and SQLite . A database is a structured collection of data that is organized and stored in a way that allows for efficient retrieval, manipulation, and management of that data. In other words, a database is a software application that allows you to store and manage large amounts of data in an organized manner. . Some Examples of Databases: . Storing and managing customer data, such as contact information, order history, and customer preferences. | Keeping track of inventory levels and stock movements in a warehouse or retail store. | Managing financial transactions, such as payments, invoices, and receipts. | . SQLite is a software library that provides a user-friendly database management system. Unlike other databases, such as MySQL or PostgreSQL, SQLite is programmed within an application, which means it does not require a separate server process to operate. This makes SQLite great for web applications or for use in situations where you don&#39;t need a full database server. . In this lesson, we will be demonstrating how to set up a SQLite database in Flask, a Python web framework. Flask allows programmers to easily interact with SQLite databases, and we&#39;ll walk through the process of setting up a new database, creating tables, and adding data. We&#39;ll also cover some basic SQL commands that you can use to interact with your database, including CREATE TABLE, INSERT, SELECT, UPDATE, and DELETE. . Setting up a SQLite database in Flask . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE students (id INTEGER PRIMARY KEY, name TEXT, grade INTEGER)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Note: This will create a new file &#39;database.db&#39; in the _notebooks folder if one doesn&#39;t exist. . Breaking down this code segment: . We imported the necessary libraries and tools | We created a Flask application | We connected to the SQLite database using SQLite3 | We created a cursor object to execute SQL commands | We created tables in the database using SQL commands | . Flask provides several extensions and tools for working with SQLite databases, including Flask-SQLAlchemy, Flask-SQLite3, and Flask-Admin. These tools provide a high-level interface for interacting with the database, making it easy to perform common operations such as adding, updating, and deleting records. . CRUD Commands with SQLite . CRUD stands for Create, Read, Update, and Delete, which are the basic operations you can perform on data. SQL is useful library because it allows programmers to create new tables to organize data, add new data to a table, update data that&#39;s already there, or delete data that&#39;s no longer needed. . C: To create a new record in a database, you must first define the table structure that will store the data. This can be accomplished using SQL commands such as CREATE. Once the table is created, data can be added to it using the INSERT INTO command. . | R: To retrieve data from the database, you can use the READ command. You can specify which fields you want to retrieve and the conditions you want to apply using the WHERE clause. There are also several functions available to aggregate and manipulate data. . | U: To modify existing data in the database, you can use the UPDATE command. You will need to specify which table and fields you want to update, and the conditions you want to apply using the WHERE clause. . | D: To remove data from the database, you can use the DELETE command. . | . Example of CRUD within an SQLite Database . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE basketball (_player TEXT PRIMARY KEY, _team TEXT, _position TEXT, _opinion TEXT)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Hypothetically, our programmer wanted to create an application about basketball players, and created a new table in SQL to store and interact with user-submitted data. Using the same method as the previous table, a new table &#39;basketball&#39; is created by the cursor and added to the &#39;database.db&#39; file. . Create Function: . def create(): database = &#39;database.db&#39; player = input(&quot;Enter the player name&quot;) team = input(&quot;Enter team name&quot;) position = input(&quot;Enter player position&quot;) opinion = input(&quot;Enter your opinion &quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record in to db cursor.execute(&quot;INSERT INTO basketball (_player, _team, _position, _opinion) VALUES (?, ?, ?, ?)&quot;, (player, team, position, opinion)) # Commit the changes connection.commit() print(f&quot;New basketball with {player} is added.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Closing cursor and connection cursor.close() connection.close() create() . New basketball with baller is added. . The create() feature allows users to input information about a basketball player and store it in a SQLite table &#39;basketball&#39; inside the database file we already created &#39;database.db&#39;. The code prompts the user for the player&#39;s name, team name, position, and their opinion about the player, then establishes a connection to the SQLite database and creates a cursor object for executing SQL commands. . The cursor.execute() method is called with an SQL INSERT command to insert a new entry into the &#39;basketball&#39; table. The connection.commit() method saves the changes to the database, and if the record is inserted successfully, a confirmation message is printed. In case of errors, the except block catches the sqlite3.Error exception and prints an error message. Finally, the cursor and the connection to the database are closed, and the create() function is called to execute the code. . Read Function: . def read(): database = &#39;database.db&#39; # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() # Fetch all the records from basketball table results = cursor.execute(&#39;SELECT * FROM basketball&#39;).fetchall() if len(results) != 0: for row in results: print(row) else: print(&quot;No player found.&quot;) # Closing cursor and connection cursor.close() connection.close() read() . (&#39;baller&#39;, &#39;ballers&#39;, &#39;balling&#39;, &#39;he ball&#39;) . The read() feature retrieves and prints all entries from the &#39;basketball&#39; table in the specified SQLite database. The script establishes a connection to the SQLite database, creates a cursor object for executing SQL commands, and calls the cursor.execute() method with an SQL SELECT command to fetch all the entires from the &#39;basketball&#39; table. The fetchall() method retrieves all the rows returned by the SELECT command and stores them in the results variable. . The code then checks if there are any records in the table and, if so, iterates through each row in the results using a &#39;for loop&#39; and prints the row. If there are no records, the program prints &quot;No player found&quot;. Finally, the cursor and the connection to the database are closed, and the read() function is called to execute the code. . Update Function: . import sqlite3 def update(): database = &#39;database.db&#39; player = input(&quot;Enter a basketball player to update the opinion for:&quot;) opinion = input(&quot;Enter new opinion:&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Updating review for the basketball cursor.execute(&quot;UPDATE basketball SET _opinion = ? WHERE _player = ?&quot;, (opinion, player)) if cursor.rowcount != 0: print(f&quot;Review for the basketball is updated to {opinion}&quot;) connection.commit() else: print(f&quot;Player not found.&quot;) except sqlite3.Error as error: print(&quot;Error occurred&quot;, error) # Closing cursor and connection cursor.close() connection.close() update() . Review for the basketball is updated to he ball . This update feature updates the opinion for a specific basketball player in an SQLite database. The code defines an update() function, which prompts the user to input the basketball player they want to update and the new opinion for that player. The script connects to the SQLite database, creates a cursor object, and handles any potential errors while executing the SQL command. The cursor.execute() method updates the review in the database for the specified basketball item. . If at least one value is changed, a success message is printed and the changes are committed to the database. Otherwise, a &quot;Player not found.&quot; message is displayed. In the except block, if an error occurs, an error message along with specific error details is printed. Finally, the cursor and connection to the database are closed, and the update() function is called to execute the review update process. . Delete Function . import sqlite3 def delete(): database = &#39;database.db&#39; player = input(&quot;Enter basketball player to delete&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;DELETE FROM basketball WHERE _player = ?&quot;, (player,)) if cursor.rowcount == 0: print(f&quot;{player} does not exist&quot;) else: print(f&quot;Successfully deleted basketball player {player}&quot;) connection.commit() except sqlite3.Error as error: print(&quot;Error occurred: &quot;, error) # Closing cursor and connection cursor.close() connection.close() delete() . bllr does not exist . The delete feature deletes a specific basketball player from the specified SQLite database. The code defines a delete() function that prompts the user to input the basketball player they want to delete. After connecting to the SQLite database and creating a cursor object, the code handles potential errors while executing the SQL command. The cursor.execute() method is used to delete the basketball item with the specified ID. . If no rows are affected, a message is printed indicating that the basketball player does not exist. Otherwise, a success message is displayed, confirming the basketball player&#39;s deletion. The changes are then committed to the database. In the except block, any error that occurs triggers an error message along with specific error details. Finally, the cursor and connection to the database are closed, and the delete() function is called to execute the basketball item deletion process. This code showcases a practical way to remove information from an SQLite database based on user input. . Menu Functions: . Alongside the four CRUD functions, a menu function is designed to manage Create, Read, Update, Delete operations and display the schema. The menu function is responsible for taking in user inputs and making the program call various functions. When running a menu function, users enter their desired operation, whether it be Create, Read, Update, or Delete, and the input is checked by various conditions to determine which function should be called. Many menu functions are called recursively, so the cell will repeat the menu process until the user decides to exit. . Popcorn Hacks #3: The menu function below is missing some of the CRUD functions for the specified basketball players table. Fix the following code by adding the intended CRUD functions, then perform a READ function on the database. def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: return else: print(&quot;Please enter c, r, u, or d&quot;) menu() try: menu() except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (&#39;baller&#39;, &#39;ballers&#39;, &#39;balling&#39;, &#39;he ball&#39;) . Image Uploading with SQLite . Using various Python Libraries, we are able to upload and customize images using python code, as well as using images to interact with databases. . One way to store images in a database is to INSERT the image data as a binary blob. . To store an image as a blob in SQLite, you can first read the image file and convert it to a binary format using a programming language like Python. Here&#39;s an example of how to do this: . Making the Table to store our Image Data: . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE images (name TEXT PRIMARY KEY, data BLOB)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . We use a new data type &quot;BLOB&quot; to store specific data from our .jpg image. . Adding Image Data to our Table: . You can use this example sunset jpg for our code. Download and place it in the same repository as this notebook. Rename image to &#39;image.jpg&#39; . https://t4.ftcdn.net/jpg/01/04/78/75/360_F_104787586_63vz1PkylLEfSfZ08dqTnqJqlqdq0eXx.jpg . import sqlite3 # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(&#39;images/smiley.jpg&#39;, &#39;rb&#39;) as jpg: image_data = jpg.read() # Insert the image data into the database conn.execute(&quot;INSERT INTO images (name, data) VALUES (?, ?)&quot;, (&#39;image&#39;, image_data)) # Commit the transaction conn.commit() # Close the connection conn.close() . In this example, the image data is read from the &quot;image.jpg&quot; file and inserted into the &quot;images&quot; table in the &quot;database.db&quot; SQLite database. The image data is then stored as a binary blob in the &quot;data&quot; column of the table. . Converting BLOB to Image -&gt; Displaying Image . import sqlite3 from PIL import Image import io # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT data FROM images WHERE name=?&quot;, (&#39;image&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() . The image data is then retrieved from the &quot;images&quot; table using a SELECT statement with a WHERE clause that correctly matches the image name. The binary image data is then converted to an image object using the PIL library and displayed on the screen. . Popcorn Hacks #4: Using the same table, find a new .jpg image and add its image data to the database. Display the image using the PIL Library and show us the output image. conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(&#39;images/tie.png&#39;, &#39;rb&#39;) as jpg: image_data = jpg.read() # Insert the image data into the database conn.execute(&quot;INSERT INTO images (name, data) VALUES (?, ?)&quot;, (&#39;image1&#39;, image_data)) # Commit the transaction conn.commit() # Close the connection conn.close() . HACKS (Due Sunday 11:59 PM) . Make sure to fill in all blank notes and popcorn hacks, and run each of the interactive coding exercises. (0.45) . Extra Credit: Winning team for Popcorn Hacks (+0.05) | . Create your own SQL database and create an algorithm that can insert, update, and delete data related to your topic of choice. Functionality for adding image data MUST be included. Points will be awarded based on effort and success. (0.45) . Extra Credit: Connect your backend database to a visible frontend! Screenshots of displayed data is fine. (+0.05) | . Hacks . I created a program that stores continents, their population, and images of their location on the world map. . from flask import Flask import sqlite3 from PIL import Image import io app = Flask(__name__) conn = sqlite3.connect(&#39;database.db&#39;) cursor = conn.cursor() cursor.execute(&#39;&#39;&#39;CREATE TABLE continents (_name TEXT PRIMARY KEY, _population TEXT, _image BLOB)&#39;&#39;&#39;) IMAGE_MAPPING = { &quot;asia&quot;: &quot;asia.png&quot;, &quot;europe&quot;: &quot;europe.png&quot;, &quot;north america&quot;: &quot;north america.png&quot;, &quot;south america&quot;: &quot;south america.png&quot;, &quot;africa&quot;: &quot;africa.png&quot;, &quot;australia&quot;: &quot;australia.png&quot;, &quot;antarctica&quot;: &quot;antarctica.png&quot; } def assign_image(name): filename = IMAGE_MAPPING.get(name.lower(), &quot;default.png&quot;) with open(filename, &quot;rb&quot;) as f: return f.read() conn.commit() conn.close() def create(): database = &#39;database.db&#39; name = input(&quot;Enter the name of the continent: &quot;) population = input(&quot;Enter the population of the continent: &quot;) image = assign_image(name) connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;INSERT INTO continents (_name, _population, _image) VALUES (?, ?, ?)&quot;, (name, population, image)) connection.commit() print(f&quot;New continent {name} is added.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) cursor.close() connection.close() def read(): database = &#39;database.db&#39; connection = sqlite3.connect(database) cursor = connection.cursor() cursor.execute(&quot;SELECT _name, _image FROM continents&quot;) for row in cursor.fetchall(): name, image = row with open(f&quot;{name}.png&quot;, &quot;wb&quot;) as f: f.write(image) display(Image.open(f&quot;{name}.png&quot;)) print(name) cursor.close() connection.close() def update(): database = &#39;database.db&#39; name = input(&quot;Which continent has changed in population?&quot;) population = input(&quot;Enter updated population:&quot;) connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;UPDATE continents SET _population = ? WHERE _name = ?&quot;, (population, name)) if cursor.rowcount != 0: print(f&quot;The population of the continent is updated to {population}&quot;) connection.commit() else: print(f&quot;Continent not found.&quot;) except sqlite3.Error as error: print(&quot;Error occurred&quot;, error) cursor.close() connection.close() def delete(): database = &#39;database.db&#39; name = input(&quot;Enter the name of the continent that doesn&#39;t exist anymore.&quot;) connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;DELETE FROM continents WHERE _name = ?&quot;, (name,)) if cursor.rowcount == 0: print(f&quot;{name} does not exist&quot;) else: print(f&quot;Successfully deleted continent {name}&quot;) connection.commit() except sqlite3.Error as error: print(&quot;Error occurred: &quot;, error) cursor.close() connection.close() . MENU . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: return else: print(&quot;Please enter c, r, u, or d&quot;) menu() try: menu() except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . New continent asia is added. . try: menu() except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . New continent europe is added. . try: menu() except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . New continent africa is added. . try: menu() except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . New continent antarctica is added. . try: menu() except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . asia . europe . africa . antarctica . try: menu() except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Successfully deleted continent antarctica .",
            "url": "https://manigggg18.github.io/manimani/les5",
            "relUrl": "/les5",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "P3-M 4/25 Simulations",
            "content": "Objectives . Understand how computers can be used to represent real-world phenomena or outcomes | Compare simulations with real-world contexts. | Implement code to mimic real world situations, problems, or phenomena. | What are simulations by College Board definition? . Simulations are abstractions that mimic more complex objects or phenomena from the real world Purposes include drawing inferences without the constraints of the real world | . | Simulations use varying sets of values to reflect the changing state of a real phenomenon | Often, when developing a simulation, it is necessary to remove specific details or simplify aspects Simulations can often contain biased based on which details or real-world elements were included/excluded | . | Simulations allow the formulation of hypothesis under consideration | Variability and randomness of the world is considered using random number generators | Examples: rolling dice, spinners, molecular models, analyze chemicals/reactions... | . . Analyzing an Example: Air-Traffic Simulator . Say we want to find out what the optimal number of aircrafts that can be in the air in one area is. | A simulation allows us to explore this question without real world contraints of money, time, safety Unfortunately we can&#39;t just fly 67 planes all at once and see what happens | . | Since the simulation won&#39;t be able to take all variables into control, it may have a bias towards one answer | Will not always have the same result | . Functions we often need (python) . import random # a module that defines a series of functions for generating or manipulating random integers random.choice(seq) #returns a randomly selected element from the specified sequence random.choice(mylist) # returns random value from list random.randint(0,10) #randomly selects an integer from given range; range in this case is from 0 to 10 random.random() #will generate a random float between 0.0 to 1. . Functions we often need (js) . // Math.random(); returns a random number // Math.floor(Math.random() * 10); // Returns a random integer from 0 to 9: . College Board Question 1 . Question: The following code simulates the feeding of 4 fish in an aquarium while the owner is on a 5-day trip: . numFish ← 4 foodPerDay ← 20 foodLeft ← 160 daysStarving ← 0 REPEAT 5 TIMES { foodConsumed ← numFish * foodPerDay foodLeft ← foodLeft - foodConsumed IF (foodLeft &lt; 0) { daysStarving ← daysStarving + 1 } } . This simulation simplifies a real-world scenario into something that can be modeled in code and executed on a computer. | Summarize how the code works: . Variables are defined: numFish, foodPerDay, foodLeft, daysStarving (self-explanatory). | numFish (total fish in the aquarium) is multiplied by foodPerDay (daily amount of food consumed by each fish), and the value is assigned to foodConsumed (total food consumed in one day). | foodLeft (initial value 160) is subtracted by foodConsumed and assigned to foodLeft (total food left after n days). | If statement: if foodLeft is less than zero (no food left), daysStarving is increased by 1 (the fish have gone through one day starving). | Steps 2-4 are repeated 5 times/days. | . | . Examples . Card Flip . import random cards = [&quot;Ace&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;Jack&quot;, &quot;Queen&quot;, &quot;King&quot;] suits = [&quot;Diamonds&quot;, &quot;Hearts&quot;, &quot;Spades&quot;, &quot;Clubs&quot;] print(random.choice(cards) + &quot; of &quot; + random.choice(suits)) . King of Spades . Coin Flip . import random def coinflip(): #def function randomflip = random.randint(0, 1) #picks either 0 or 1 randomly if randomflip == 0: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 1: #assigning 1 to be tails--&gt; if 1 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Tails Tails Heads Heads Heads . Your turn: Change the code to make it simulate the flipping of a weighted coin. . Adding images (in Python) . Add a heads and tails images into your images directory with the correct names and run the code below | . import random # importing Image class from PIL package from PIL import Image # creating a object im = Image.open(r&quot;images/HeadsOn.png&quot;) image = Image.open(r&quot;images/TailsOn.png&quot;) i=random.randint(0,1) if i == 1: print(&quot;heads&quot;) display(im) else: print(&quot;tails&quot;) display(image) . In order to display an image in python, we can use the PIL package we previously learned about. . Spin the Wheel . import random from PIL import Image print(&quot;Spin the wheel!&quot;) print(&quot;-&quot;) n = 300 blue = 0 red = 0 for i in range(n): spin = random.randint(1,2) if spin == 1: # head blue = blue + 1 else: # tail red = red + 1 print(&#39;Number of blue:&#39;, blue) print(&#39;Number of red:&#39;, red) . Your turn: Add a visual to the simulation! . Population Growth and Plots . import random totalPopulation = 50 growthFactor = 1.00005 dayCount = 0 #Every 2 months the population is reported while totalPopulation &lt; 1000000: totalPopulation *= growthFactor #Every 56th day, population is reported dayCount += 1 if dayCount == 56: dayCount = 0 print(totalPopulation) . Here we initialize the total population to be 50, then set the growth factor as 1.00005 (.005 percent change). It will print the population every 56th day until it reaches one million. It multiplies the current population by the growth factor in each iteration, and increments the day count. When the day count reaches 56, it prints the current population and resets the day count to 0. . Note! This simulation assumes that the growth factor remains constant as time progresses, which may not be a realistic assumption in real-world scenarios. . import matplotlib.pyplot as plt # Define the initial population and growth rate population = 100 growth_rate = 0.05 # Define the number of years to simulate num_years = 50 # Create lists to store the population and year values populations = [population] years = [0] # Simulate population growth for the specified number of years for year in range(1, num_years+1): # Calculate the new population size new_population = population + (growth_rate * population) # Update the population and year lists populations.append(new_population) years.append(year) # Set the new population as the current population for the next iteration population = new_population # Plot the population growth over time plt.plot(years, populations) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Population&#39;) plt.title(&#39;Population Growth Simulation&#39;) plt.show() . If we create quantative data, we can plot it using the Matplotlib library. . Example on how simplification can cause bias . import random beak = [&quot;small-beak&quot;, &quot;long-beak&quot;, &quot;medium-beak&quot;], wing = [&quot;small-wings&quot;, &quot;large-wings&quot;, &quot;medium-wings&quot;], height = [&quot;short&quot;, &quot;tall&quot;,&quot;medium&quot;] naturaldisaster = [&quot;flood&quot;, &quot;drought&quot;, &quot;fire&quot;, &quot;hurricane&quot;, &quot;dustbowl&quot;] print(&quot;When a&quot; , random.choice(naturaldisaster) , &quot;hit&quot;, random.choice(height), &quot;birds died&quot;) . How does this simulation have bias? . JS examples . Dice Roll Binary Coin Flip Card Pull . Hacks . Answer all questions and prompts in the notes (0.2) | Create a simulation Create a simulation that uses iteration and some form of data collection (list, dictionary...) (0.4) try creating quantative data and using the Matplotlib library to display said data | Comment and describe function of each parts | How does your simulation help solve/mimic a real world problem? | Is there any bias in your simulation? Meaning, are there any discrepancies between your program and the real event? | . | | Answer these simulation questions (0.3) | Bonus: take a real world event and make a pseudocode representation or pseudocode on a flowchart of how you would make a simulation for it (up to +0.1 bonus) | .",
            "url": "https://manigggg18.github.io/manimani/student/2023/04/25/P3M-Simulations.html",
            "relUrl": "/student/2023/04/25/P3M-Simulations.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "P3-M 4/21 Binary Overview",
            "content": "How to contact us . Join the &quot;coding&quot; channel on slack! That is the only place where we will be answering questions or sending announcements about lessons. If you have a question please contact us there. . How to join . Click on &quot;add channels&quot; below the list of channels | Click on &quot;browse channels&quot; | Search for &quot;coding&quot; | Click the green &quot;Join&quot; button on the right | . Learning Objectives . DAT-1.A: Representing Data with Bits . Basic Information . Bit is short for binary digit, and represents a value of either 0 or 1. A byte is 8 bits. | . | Sequences of bits are used to represent different things. Representing data with sequences of bits is called abstraction. | . | . Practice Questions: . How many bits are in 3 bytes? | 24 . What digital information can be represented by bits? | 0 and 1 . Are bits an analog or digital form of storing data? What is the difference between the two? | Digital since the data is only limited to 0 and 1. . Examples . Boolean variables (true or false) are the easiest way to visualize binary. 0 = False | 1 = True | . | . import random def example(runs): # Repeat code for the amount of runs given while runs &gt; 0: # Assigns variable boolean to either True or False based on random binary number 0 or 1. boolean = False if random.randint(0, 1) == 0 else True # If the number was 1 (True), it prints &quot;awesome.&quot; if boolean: print(&quot;binary is awesome&quot;) # If the number was 2 (False), it prints &quot;cool.&quot; else: print(&quot;binary is cool&quot;) runs -= 1 # Change the parameter to how many times to run the function. example(10) . binary is awesome binary is cool binary is awesome binary is cool binary is cool binary is cool binary is awesome binary is cool binary is cool binary is cool . DAT-1.B: The Consequences of Using Bits to Represent Data . Basic Information . Integers are represented by a fixed number of bits, this limits the range of integer values. This limitation can result in overflow or other errors. | Other programming languages allow for abstraction only limited by the computers memory. | Fixed number of bits are used to represent real numbers/limits | . Practice Questions: . What is the largest number can be represented by 5 bits? | 1 , 2 , 4 , 8 , 16 =&gt; 31 . One programing language can only use 16 bits to represent non-negative numbers, while a second language uses 56 bits to represent numbers. How many times as many unique numbers can be represented by the second language? | 2^(56-16) . 5 bits are used to represent both positive and negative numbers, what is the largest number that can be represented by these bits? (hint: different thatn question 1) | +- , 1 , 2 , 4 , 8 =&gt; 8 . Examples . import math def exponent(base, power): # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &quot;^&quot; and &quot;=&quot;. print(str(base) + &quot;^&quot; + str(power) + &quot; = &quot; + str(math.pow(base, power))) # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) exponent(5, 2) . 5^2 = 25.0 . DAT-1.C: Binary Math . Basic Information . Binary is Base 2, meaning each digit can only represent values of 0 and 1. | Decimal is Base 10, meaning each digit can represent values from 0 to 9. | Conversion between sequences of binary to decimal depend on how many binary numbers there are, their values and their positions. | . Practice Questions: . What values can each digit of a Base 5 system represent? | 0 to 4 . What base is Hexadecimal? What range of values can each digit of Hexadecimal represent? | Hexadecimal is base 16. Each digit can represent 0 to 15. . When using a base above 10, letters can be used to represent numbers past 9. These letters start from A and continue onwards. For example, the decimal number 10 is represented by the letter A in Hexadecimal. What letter would be used to represent the Base 10 number 23 in a Base 30 system? What about in a Base 50 system? | base 10 number 23: 9 + 9 + 5 =&gt; 599 . base 30 number 23: N . base 50 number 23: N . Examples . Using 6 bits, we can represent 64 numbers, from 0 to 63, as 2^6 = 64. | The numbers in a sequence of binary go from right to left, increasing by powers of two from 0 to the total amount of bits. The whole number represented is the sum of these bits. For example: 111111 | 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0 | 32 + 16 + 8 + 4 + 2 + 1 | 63 | | Fill in the blanks (convert to decimal) . 001010 = 10 | 11100010 = 226 | 10 = 2 | | Fill in the blanks (convert to binary) . 12 = 1100 | 35 = 100011 | 256 = 10000000 | | . Hacks &amp; Grading (Due SUNDAY NIGHT 4/23) . Complete all of the popcorn hacks (Fill in the blanks + run code cells and interact + Answer ALL questions) [0.3 or nothing] | Create a program to conduct basic mathematical operations with binary sequences (addition, subtraction, multiplication, division) [0.6 or nothing] For bonus, program must be able to conduct mathematical operations on binary sequences of varying bits (for example: 101 + 1001 would return decimal 14.) [0.1 or nothing] | . | . req = input(&quot;Select an arithmetic operation (add, subtract, multiply, divide)&quot;) # def operations(x, y): # all operations defined in one function if req.lower() == &#39;add&#39;: # .lower in case the user enters capitalized letters return bin(x + y)[2:] elif req.lower() == &#39;subtract&#39;: return bin(x - y)[2:] elif req.lower() == &#39;multiply&#39;: return bin(x * y)[2:] elif req.lower() == &#39;divide&#39;: return bin(x // y)[2:] # &#39;//&#39; should be used instead of &#39;/&#39; for binary operations if req.lower() in [&#39;add&#39;, &#39;subtract&#39;, &#39;multiply&#39;, &#39;divide&#39;]: x = input(&quot;First binary number?&quot;) print(&quot;x =&quot; , x) y = input(&quot;Second binary number?&quot;) print(&quot;y =&quot; , y) x_int = int(x, 2) y_int = int(y, 2) result = operations(x_int, y_int) print(&quot;Result:&quot;, result) else: # only accepts add, subtract, multiply, and divide print(&quot;Please select a valid operation. Operation&#39;&quot; , req , &quot;&#39; is not available.&quot;) . Call 1: &quot;Add&quot; =&gt; &quot;1001&quot; =&gt; &quot;1110&quot; . req = input(&quot;Select an arithmetic operation (add, subtract, multiply, divide)&quot;) def operations(x, y): if req.lower() == &#39;add&#39;: return bin(x + y)[2:] elif req.lower() == &#39;subtract&#39;: return bin(x - y)[2:] elif req.lower() == &#39;multiply&#39;: return bin(x * y)[2:] elif req.lower() == &#39;divide&#39;: return bin(x // y)[2:] if req.lower() in [&#39;add&#39;, &#39;subtract&#39;, &#39;multiply&#39;, &#39;divide&#39;]: x = input(&quot;First binary number?&quot;) print(&quot;x =&quot; , x) y = input(&quot;Second binary number?&quot;) print(&quot;y =&quot; , y) x_int = int(x, 2) y_int = int(y, 2) result = operations(x_int, y_int) print(&quot;Result:&quot;, result) else: print(&quot;Please select a valid operation. Operation&#39;&quot; , req , &quot;&#39; is not available.&quot;) . x = 1001 y = 1110 Result: 10111 . Code 2: Unvalid Operation &quot;Remainder&quot; . req = input(&quot;Select an arithmetic operation (add, subtract, multiply, divide)&quot;) def operations(x, y): if req.lower() == &#39;add&#39;: return bin(x + y)[2:] elif req.lower() == &#39;subtract&#39;: return bin(x - y)[2:] elif req.lower() == &#39;multiply&#39;: return bin(x * y)[2:] elif req.lower() == &#39;divide&#39;: return bin(x // y)[2:] if req.lower() in [&#39;add&#39;, &#39;subtract&#39;, &#39;multiply&#39;, &#39;divide&#39;]: x = input(&quot;First binary number?&quot;) print(&quot;x =&quot; , x) y = input(&quot;Second binary number?&quot;) print(&quot;y =&quot; , y) x_int = int(x, 2) y_int = int(y, 2) result = operations(x_int, y_int) print(&quot;Result:&quot;, result) else: print(&quot;Please select a valid operation. Operation&#39;&quot; , req , &quot;&#39; is not available.&quot;) . Please select a valid operation. Operation&#39; Remainder &#39; is not available. .",
            "url": "https://manigggg18.github.io/manimani/les1",
            "relUrl": "/les1",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Practice Test 1",
            "content": "Overview . Pretty easy not gonna lie. . . . . . . Q14 Comparing loop algorithms . Consider the two programs below. . . Which of the following best compares the values displayed by programs A and B? . A: Program A and program B display identical values. . B: Program A and program B display the same values in different orders. . C: Program A and program B display the same number of values, but the values differ. . D: Program A and program B display a different number of values. . My Answer: Program A and program B display a different number of values. . Correct Answer: Program A and program B display the same number of values, but the values differ. . Explanation: The programs each display ten values, but each value displayed by program B is one greater than the corresponding value from program A. Program A displays 1 2 3 4 5 6 7 8 9 10 and program B displays 2 3 4 5 6 7 8 9 10 11. . . . Q21 Comparing robot algorithms . The following question uses a robot in a grid of squares. The robot is represented by a triangle, which is initially facing right. . . Consider the procedures below. . . Which of the following code segments will move the robot to the gray square? . . My Answer: A . Correct Answer: B . Explanation: This code segment moves the robot forward two squares, rotates it right three times so that the robot faces the top of the grid, and then moves the robot forward three squares to the gray square. .",
            "url": "https://manigggg18.github.io/manimani/prtest1",
            "relUrl": "/prtest1",
            "date": " • Apr 17, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: AMD Ryzen 7 5700U with Radeon Graphics 1.80 GHz | Memory in GB: 12 GB | Storage in GB: 474 GB | OS: Windows 11 Home | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices: Interactive elements used by the user. EX: keyboard, mouse, touchpad | Output devices: Elements of a computer that respond based on or to the user input. EX: headphones, speaker, monitor | Program File: Files that are executed by computers in order to run a program. EX: web applications. | Program Code: Instructions given to a machine to create a computer program. EX: web application code. | Processes: Instance of a program running in a computer. EX: searching, debugging, etc | Ports: Virtual point where network connections start and end. | Data File: File that stores data to be used by an application or system. It contains actual data, or a view of the data. It also allows us to store information permanently and to access later on and alter that information whenever necessary. | Inspect Running Code: Method of debugging a program code while it is running to check all functionalities. | Inspect Variables: A subcategory of inspecting running code which allows the user to inspect variables in the program code in real time. | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path: A | Route: E | Computer System: B | Computer Device: C | Bandwidth: D | Computer Network: F | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions | . T . F . F . T . F . F . T . Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Fault tolerance is the internet’s ability to function properly even when there is failure in hardware or software. This is achieved through redundancy and other error-solving methods that allow the system to identify and correct errors, ensuring that the performance is impacted minimally. . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? | . The frontend/backend architecture is a distributed system where the frontend and backend components are naturally separated. The frontend handles the user interface and is distributed across multiple clients, while the backend handles business logic and data storage and is deployed on servers or cloud platforms. The distributed nature of the architecture provides scalability, fault tolerance, and performance optimization by adding more clients or instances for the frontend, more servers or services for the backend, replicating the backend, or load balancing. It is a popular and effective way of building modern web applications capable of handling large volumes of users and data. . Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article | . The --workers option in the GUNICORN_CMD_ARGS environment variable specifies the number of worker processes that Gunicorn should spawn to handle incoming requests. Gunicorn uses a single worker process, which can handle only one request at a time. By increasing the number of worker processes, Gunicorn can handle multiple requests simultaneously, which can improve the overall performance of the server. . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://manigggg18.github.io/manimani/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "MC Test 4 Review",
            "content": "Overview . Overall, I would say that I did pretty good. I definitely need more practice since it took me a relatively long time to answer each question. However, the main problem was the density of the questions. In other words, as I reached the final 5-10 questions of the test, my attention span became non-existent. So I need to get used to answering 50 questions in a relatively short amount of time. . . . . . . Q14 Biologists tracking wild animals . Biologists often attach tracking collars to wild animals. For each animal, the following geolocation data is collected at frequent intervals. . The time . | The date . | The location of the animal . | . Which of the following questions about a particular animal could NOT be answered using only the data collected from the tracking collars? . A: Approximately how many miles did the animal travel in one week? . B: Does the animal travel in groups with other tracked animals? . C: Do the movement patterns of the animal vary according to the weather? . D: In what geographic locations does the animal typically travel? . My Answer: Does the animal travel in groups with other tracked animals? . Correct Answer: Do the movement patterns of the animal vary according to the weather? . Explanation: I think I picked something randomly without reading it and forgot to change it. . . . Q23 Searching patterns in large sets of data . Computers are often used to search through large sets of data to find useful patterns in the data. Which of the following tasks is NOT an example where searching for patterns is needed to produce useful information? . A: A credit card company analyzing credit card purchases to identify potential fraudulent charges . B: A grocery store analyzing customers’ past purchases to suggest new products the customer may be interested in . C: A high school analyzing student grades to identify the students with the top ten highest grade point averages . D: An online retailer analyzing customers’ viewing habits to suggest other products based on the purchasing history of other customers . My Answer: An online retailer analyzing customers’ viewing habits to suggest other products based on the purchasing history of other customers . Correct Answer: A high school analyzing student grades to identify the students with the top ten highest grade point averages . Explanation: By current standards, a single high school’s list of student grades is not considered a large set of data. Furthermore, identifying 10 students with the highest grade point averages is not an example of finding patterns. . . . Q44 Use of procedure to search a dictionary . A student is developing a program that allows users to look up the definitions of words that appear in a book. . The student plans to perform a large number of searches through a dictionary containing words and their definitions. The student will use a procedure written by a computer scientist to quickly search the dictionary (and knows that the procedure will return a definition if one is available). The student cannot modify the search procedure written by the computer scientist but can call the procedure by supplying a word. . Which of the following is a true statement about the student’s use of the computer scientist’s search procedure? . A: The student is changing the search procedure’s internal abstractions. . B: The student is modifying the search procedure to take a definition as an argument and return the corresponding word. . C: The student is reusing the computer scientist’s procedural abstraction by knowing what the procedure does without knowing how it does it. . D: The student is reusing the computer scientist’s procedural abstraction by using duplicate code each time a search needs to occur. . My Answer: The student is reusing the computer scientist’s procedural abstraction by using duplicate code each time a search needs to occur. . Correct Answer: The student is reusing the computer scientist’s procedural abstraction by knowing what the procedure does without knowing how it does it. . Explanation: The student knows that the procedure searches for a value without knowing how it does the searching. This is an example of the use of procedural abstraction. . . . Q49 Traverse list to compare quiz scores . A teacher stores the most recent quiz scores for her class in the list scores. The first element in the list holds the maximum possible number of points that can be awarded on the quiz, and each remaining element holds one student’s quiz score. Assume that scores contains at least two elements. Which of the following code segments will set the variable found to true if at least one student scored the maximum possible number of points on the quiz and will set found to false otherwise? . . My Answer: D . Correct Answer: A . Explanation: This code segment traverses the list beginning with the second element, so it is correctly comparing only student scores to the maximum possible score, which is found by accessing scores[ 1 ]. The variable found will only be set to true when a student’s score equals the maximum possible score. The code also sets the number of iterations to LENGTH(scores) - 1 to reflect that the first list element (maximum score) is skipped. .",
            "url": "https://manigggg18.github.io/manimani/mc4",
            "relUrl": "/mc4",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is 0(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # # . The set() function got rid of the duplicates. | . What do you notice in the output? . The code creates a set object named &quot;my_set&quot; containing the elements [1, 2, 3, 2, 1]. Since sets cannot contain duplicate elements, the duplicates are automatically removed, and the output of the print statement shows the unique elements of the set in no particular order. . Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? . Hash tables are used to implement dictionaries and sets in many programming languages. A hash table is a data structure that allows for efficient lookup, insertion, and deletion of elements by computing an index into an array using a hash function. Similarly, a set is a collection of unique elements, and it can be implemented as a hash table where each element is hashed to a unique index in the table. . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # # # Printing the dictionary print(lover_album) . What data structures do you see? . The code contains a dictionary data structure named &quot;lover_album&quot;, which has various keys and values, including a list (&quot;genre&quot;) and another nested dictionary (&quot;tracks&quot;). . Lists and dictionaries. . Genre(s) | Track(s) | . | . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . #lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? lover_album[&quot;producer&quot;] = {producer for producer in [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} # Printing the dictionary print(lover_album) . What can you change to make sure there are no duplicate producers? . We can use a set function. . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? lover_album[&quot;genre&quot;].append(&quot;Electropop&quot;) # Printing the dictionary print(lover_album) . How would add an additional genre to the dictionary, like electropop? . Easily. . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format . Write your own code to print tracks in readable format . print(&quot;Tracks on the {} album by {}: &quot;.format(lover_album[&quot;title&quot;], lover_album[&quot;artist&quot;])) for track_number, track_name in lover_album[&quot;tracks&quot;].items(): print(&quot;{}. {}&quot;.format(track_number, track_name)) . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . Improved Version of the Above Code . I used a different name for the function to avoid conflicts with the user input variable. I also passed the lover_album dictionary as an argument to the function instead of relying on a global variable.The function first converts the user input to lowercase using the lower() method, to avoid case-sensitivity issues. Then, it checks if the input key is present in the album dictionary using the in keyword. If it is, it prints the corresponding value. Otherwise, it prints an error message. Overall, this version is more robust, user-friendly, and follows better coding practices . def search_album(album_dict): search_key = input(&quot;What would you like to know about the album? &quot;).lower() if search_key in album_dict: print(album_dict[search_key]) else: print(&quot;Invalid search.&quot;) search_album(lover_album) . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . My favorite TS song is &quot;I Know Places&quot;, because: . I don&#39;t know many of her songs. . | It has a nice rhythm and beat. . | . Diagram . My Album . kid_a_album = { &quot;title&quot;: &quot;Kid A&quot;, &quot;artist&quot;: &quot;Radiohead&quot;, &quot;year&quot;: 2000, &quot;genre&quot;: [&quot;Electronic&quot;, &quot;Experimental&quot;], &quot;tracks&quot;: { 1: &quot;Everything In Its Right Place&quot;, 2: &quot;Kid A&quot;, 3: &quot;The National Anthem&quot;, 4: &quot;How To Disappear Completely&quot;, 5: &quot;Treefingers&quot;, 6: &quot;Optimistic&quot;, 7: &quot;In Limbo&quot;, 8: &quot;Idioteque&quot;, 9: &quot;Morning Bell&quot;, 10: &quot;Motion Picture Soundtrack&quot; } } print(kid_a_album) . {&#39;title&#39;: &#39;Kid A&#39;, &#39;artist&#39;: &#39;Radiohead&#39;, &#39;year&#39;: 2000, &#39;genre&#39;: [&#39;Electronic&#39;, &#39;Experimental&#39;], &#39;tracks&#39;: {1: &#39;Everything In Its Right Place&#39;, 2: &#39;Kid A&#39;, 3: &#39;The National Anthem&#39;, 4: &#39;How To Disappear Completely&#39;, 5: &#39;Treefingers&#39;, 6: &#39;Optimistic&#39;, 7: &#39;In Limbo&#39;, 8: &#39;Idioteque&#39;, 9: &#39;Morning Bell&#39;, 10: &#39;Motion Picture Soundtrack&#39;}} . okc_album = { &quot;title&quot;: &quot;OK Computer&quot;, &quot;artist&quot;: &quot;Radiohead&quot;, &quot;year&quot;: 1997, &quot;genre&quot;: [&quot;Alternative rock&quot;, &quot;Art rock&quot;], &quot;tracks&quot;: { 1: &quot;Airbag&quot;, 2: &quot;Paranoid Android&quot;, 3: &quot;Subterranean Homesick Alien&quot;, 4: &quot;Exit Music (For a Film)&quot;, 5: &quot;Let Down&quot;, 6: &quot;Karma Police&quot;, 7: &quot;No Surprises&quot;, 8: &quot;Lucky&quot;, 9: &quot;The Tourist&quot; } } print(okc_album) . {&#39;title&#39;: &#39;OK Computer&#39;, &#39;artist&#39;: &#39;Radiohead&#39;, &#39;year&#39;: 1997, &#39;genre&#39;: [&#39;Alternative rock&#39;, &#39;Art rock&#39;], &#39;tracks&#39;: {1: &#39;Airbag&#39;, 2: &#39;Paranoid Android&#39;, 3: &#39;Subterranean Homesick Alien&#39;, 4: &#39;Exit Music (For a Film)&#39;, 5: &#39;Let Down&#39;, 6: &#39;Karma Police&#39;, 7: &#39;No Surprises&#39;, 8: &#39;Lucky&#39;, 9: &#39;The Tourist&#39;}} . in_rainbows_album = { &quot;title&quot;: &quot;In Rainbows&quot;, &quot;artist&quot;: &quot;Radiohead&quot;, &quot;year&quot;: 2007, &quot;genre&quot;: [&quot;Alternative rock&quot;, &quot;Art rock&quot;], &quot;tracks&quot;: { 1: &quot;15 Step&quot;, 2: &quot;Bodysnatchers&quot;, 3: &quot;Nude&quot;, 4: &quot;Weird Fishes/Arpeggi&quot;, 5: &quot;All I Need&quot;, 6: &quot;Faust Arp&quot;, 7: &quot;Reckoner&quot;, 8: &quot;House of Cards&quot;, 9: &quot;Jigsaw Falling into Place&quot;, 10: &quot;Videotape&quot; } } print(in_rainbows_album) . {&#39;title&#39;: &#39;In Rainbows&#39;, &#39;artist&#39;: &#39;Radiohead&#39;, &#39;year&#39;: 2007, &#39;genre&#39;: [&#39;Alternative rock&#39;, &#39;Art rock&#39;], &#39;tracks&#39;: {1: &#39;15 Step&#39;, 2: &#39;Bodysnatchers&#39;, 3: &#39;Nude&#39;, 4: &#39;Weird Fishes/Arpeggi&#39;, 5: &#39;All I Need&#39;, 6: &#39;Faust Arp&#39;, 7: &#39;Reckoner&#39;, 8: &#39;House of Cards&#39;, 9: &#39;Jigsaw Falling into Place&#39;, 10: &#39;Videotape&#39;}} . httt_album = { &quot;title&quot;: &quot;Hail to the Thief&quot;, &quot;artist&quot;: &quot;Radiohead&quot;, &quot;year&quot;: 2003, &quot;genre&quot;: [&quot;Alternative rock&quot;, &quot;Art rock&quot;], &quot;tracks&quot;: { 1: &quot;2 + 2 = 5&quot;, 2: &quot;Sit Down. Stand Up.&quot;, 3: &quot;Sail to the Moon&quot;, 4: &quot;Backdrifts&quot;, 5: &quot;Go to Sleep&quot;, 6: &quot;Where I End and You Begin&quot;, 7: &quot;We Suck Young Blood&quot;, 8: &quot;The Gloaming&quot;, 9: &quot;There There&quot;, 10: &quot;I Will&quot;, 11: &quot;A Punchup at a Wedding&quot;, 12: &quot;Myxomatosis&quot;, 13: &quot;Scatterbrain&quot;, 14: &quot;A Wolf at the Door&quot; } } print(httt_album) . {&#39;title&#39;: &#39;Hail to the Thief&#39;, &#39;artist&#39;: &#39;Radiohead&#39;, &#39;year&#39;: 2003, &#39;genre&#39;: [&#39;Alternative rock&#39;, &#39;Art rock&#39;], &#39;tracks&#39;: {1: &#39;2 + 2 = 5&#39;, 2: &#39;Sit Down. Stand Up.&#39;, 3: &#39;Sail to the Moon&#39;, 4: &#39;Backdrifts&#39;, 5: &#39;Go to Sleep&#39;, 6: &#39;Where I End and You Begin&#39;, 7: &#39;We Suck Young Blood&#39;, 8: &#39;The Gloaming&#39;, 9: &#39;There There&#39;, 10: &#39;I Will&#39;, 11: &#39;A Punchup at a Wedding&#39;, 12: &#39;Myxomatosis&#39;, 13: &#39;Scatterbrain&#39;, 14: &#39;A Wolf at the Door&#39;}} . Generate Random Story Using the Dictionary . import random madlib_template = &quot;The first time I listened to Radiohead&#39;s album {}, I felt {} because the music was so {}. My favorite track was {} because it gave me a {}.&quot; albums = [kid_a_album, httt_album, okc_album, in_rainbows_album] chosen_album = random.choice(albums) album_title = chosen_album[&quot;title&quot;] album_genre = random.choice(chosen_album[&quot;genre&quot;]) album_tracks = chosen_album[&quot;tracks&quot;] chosen_track_num, chosen_track_title = random.choice(list(album_tracks.items())) madlib_story = madlib_template.format(album_title, random.choice([&quot;a sharp pain in my heart&quot;, &quot;proud&quot;, &quot;a funeral in my brain&quot;, &quot;nothing&quot;]), album_genre, chosen_track_title, random.choice([&quot;heart attack&quot;, &quot;sense of patriotism&quot;, &quot;series of random goosebumps&quot;, &quot;aneurysm&quot;])) print(madlib_story) . The first time I listened to Radiohead&#39;s album Kid A, I felt a funeral in my brain because the music was so Experimental. My favorite track was Everything In Its Right Place because it gave me a heart attack. .",
            "url": "https://manigggg18.github.io/manimani/hmap",
            "relUrl": "/hmap",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 4.3a Parallel Computing",
            "content": "Analyzing Parallel Computing . Once again we will use image lab, this time to review Parallel Computing. . Change baseWidth in this line in code to increase computation requirements:def process_image(image, baseWidth=512): For instance 320, 512, 1024, 2048, 4096.- Compare Sequential and Parallel computing code and time to achieve outputs | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Scale to baseWidth def scale_image(img, baseWidth): scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Convert pixels to Grey Scale def grey_pixel(pixel): average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: return( (average, average, average, pixel[3]) ) # PNG format else: return( (average, average, average) ) # Convert pixels to Red Scale def red_pixel(pixel): if len(pixel) &gt; 3: return( (pixel[0], 0, 0, pixel[3]) ) # PNG format else: return( (pixel[0], 0, 0) ) # Convert pixels to Red Scale def green_pixel(pixel): if len(pixel) &gt; 3: return( (0, pixel[1], 0, pixel[3]) ) # PNG format else: return( (0, pixel[1], 0) ) # Convert pixels to Red Scale def blue_pixel(pixel): if len(pixel) &gt; 3: return( (0, 0, pixel[2], pixel[3]) ) # PNG format else: return( (0, 0, pixel[2]) ) # Set Properties of Image, Scale, and convert to Base64 def image_management(image, baseWidth): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img, baseWidth) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;numpy&#39;] = np.array(img.getdata()) # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Grey HTML # each pixel in numpy array is turned to grey # then resulting list, using List Comprehension, is put back into img img.putdata([grey_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Red HTML img.putdata([red_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Green HTML img.putdata([green_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Blue HTML img.putdata([blue_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) def process_image(image, baseWidth=320): image_management(image, baseWidth) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- images --&quot;) display(HTML(image[&#39;html&#39;])) display(HTML(image[&#39;html_grey&#39;])) display(HTML(image[&#39;html_red&#39;])) display(HTML(image[&#39;html_green&#39;])) display(HTML(image[&#39;html_blue&#39;])) . Sequential Processing . The for loop iterates over the list of images and processes them one at a time, in order. . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . Parallel Computing . In parallel or concurrent mode, the ThreadPoolExecutor is used to submit each image to a separate worker thread, allowing multiple images to be processed simultaneously. Multithreading allows multiple concurrent tasks of a process at the same time. The executor.map() method is used to apply the process_image function to each image in the images list. . The order in which the images are processed is not guaranteed, as threads are performed simultaneously. | . import concurrent.futures # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Parallel Processsing # executor allocates threads, it considers core execution capability of machine with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_image, images) # order is not predictable print() . Observing Parallel Computing and Threads . You can observe Processes, CPU Percentage, and Threads with Tools on your machine. Common tools to monitor performance are Activity Monitor on MacOS or Task Manager on Windows. . This example is using top launched in VSCode Terminal. PID is Process ID. | COMMAND is task running on machine. Python is activated when running this Jupyter notebook. | #TH is number of threads. This increases from 15/1 to 18/1 on my machine when running python parallel computing example. | . | . Hacks . AP Classroom. Provide answers and thoughts on theoritical question form college board Video in section 4.3. They start at about the 9 minute mark. . Example 1 | . To run all three processes, two processors are used, with Process X running on one processor and Processes Y and Z running on the other. The processing time is determined by the slowest processor, which in this case is Processor 1 with a time of 50 seconds. Processor 2 takes either 10 + 30 seconds or 40 seconds for Processes Y and Z. Process X takes 50 seconds to run, making the overall processing time 50 seconds. So, the minimum amount of time to run all three processes is 50 seconds. . Example 2 | . If the processes run in parallel, they will take a total of 45 seconds, which is the slower process time. On the other hand, if they run consecutively, the time taken will be 70 seconds, which is the sum of the slower process time (25 seconds) and the faster process time (45 seconds). The difference between the two methods is 25 seconds, meaning that running the processes in parallel is 25 seconds faster than running them consecutively. . Data Structures. Build a List Comprehension example . list = [calc(item) for item in items] | .",
            "url": "https://manigggg18.github.io/manimani/pco",
            "relUrl": "/pco",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Commits Since Ski Week",
            "content": "Overview . Since Ski Week, I have contributed to three different repositories: my personal blog, CPT frontend, and CPT backend. . . . . Personal Blog . . . . CPT Frontend . . . . CPT Backend . .",
            "url": "https://manigggg18.github.io/manimani/skw",
            "relUrl": "/skw",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . Programmers should care about space and time complexity because it helps them understand how efficient their code is. Time complexity is the growth rate of time taken by a piece of code to run. Space complexity is the rate of growth of space needed for the code to run. Every time you run some code, it needs resources like space and time. | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 #baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) pixels: 5,846,448 Scaled size: (625, 468) pixels: 292,500 -- original image -- . Do you think this is a time complexity or space complexity or both problem? . Both | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 263 Alabama . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . 178 1.78 . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) print(fibonacci(30)) #print(fibonacci(40)) . 832040 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3,4,5,6])) #print(generate_subsets(numbers)) . [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4], [1, 2, 3, 5, 6], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3], [1, 2, 4, 5, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4], [1, 2, 5, 6], [1, 2, 5], [1, 2, 6], [1, 2], [1, 3, 4, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4], [1, 3, 5, 6], [1, 3, 5], [1, 3, 6], [1, 3], [1, 4, 5, 6], [1, 4, 5], [1, 4, 6], [1, 4], [1, 5, 6], [1, 5], [1, 6], [1], [2, 3, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4], [2, 3, 5, 6], [2, 3, 5], [2, 3, 6], [2, 3], [2, 4, 5, 6], [2, 4, 5], [2, 4, 6], [2, 4], [2, 5, 6], [2, 5], [2, 6], [2], [3, 4, 5, 6], [3, 4, 5], [3, 4, 6], [3, 4], [3, 5, 6], [3, 5], [3, 6], [3], [4, 5, 6], [4, 5], [4, 6], [4], [5, 6], [5], [6], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 1.8334684371948242 seconds 9227465 Time taken: 3.0596401691436768 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | Why is time and space complexity important when choosing an algorithm? | . Time and space complexity are important when choosing an algorithm because they affect the scalability and feasibility of your algorithm. If your algorithm has a high time complexity, it may take too long to run on large inputs, or even exceed the time limit of your system. Space complexity is also important because machines have only a limited amount of space to spare for programs. The best algorithm is the one that completes its execution in the least amount of time using the least amount of space. . Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? | . It is not always possible to use a constant time algorithm or avoid an exponential time algorithm. The best algorithm is the one that completes its execution in the least amount of time using the least amount of space. However, if you can use a constant time algorithm or avoid an exponential time algorithm, you should do so because they are generally faster than other algorithms. . What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? | . The time complexity of an algorithm quantifies the amount of time taken by an algorithm to run as a function of the length of the input. Similarly, space complexity of an algorithm quantifies the amount of space or memory taken by an algorithm to run as a function of the length of the input. The best algorithm is the one that completes its execution in the least amount of time using the least amount of space. There are six major types of complexities (time and space): Constant: O (1), Linear time: O (n), Logarithmic time: O (n log n), Quadratic time: O (n^2), Exponential time: O (2^n), Factorial time: O (n!). . Complete the Time and Space Complexity analysis questions linked below. Practice .",
            "url": "https://manigggg18.github.io/manimani/stc",
            "relUrl": "/stc",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Albums Table",
            "content": "THE TABLE . import os import json import datetime from datetime import datetime from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash from flask import Flask from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate import sqlite3 app = Flask(__name__) database = &#39;sqlite:///sqlite.db&#39; app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() Migrate(app, db) db.init_app(app) class Album(db.Model): __tablename__ = &#39;albums&#39; id = db.Column(db.Integer, primary_key=True) album = db.Column(db.String(255), nullable=False) artist = db.Column(db.String(255), nullable=False) year = db.Column(db.Integer, nullable=False) def __init__(self, album, artist, year): self.album = album self.artist = artist self.year = year def __str__(self): return json.dumps(self.read()) def create(self): db.session.add(self) db.session.commit() return self def read(self): return {&#39;album&#39;: self.album, &#39;artist&#39;: self.artist, &#39;year&#39;: self.year} def update(self, album, artist, year): self.album = album self.artist = artist self.year = year db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None def initAlbums(): with app.app_context(): db.create_all() with open(os.path.join(&quot;files&quot;, &quot;album.json&quot;), &quot;r&quot;) as f: data = json.load(f) for album_name, album_id in data[&quot;Album ID&quot;].items(): album_artist = data[&quot;Creator&quot;][album_name] album_year = data[&quot;Year&quot;][album_name] # check if album already exists in database album = Album.query.filter_by(album=album_name, artist=album_artist, year=album_year).first() if album is None: album = Album(album=album_name, artist=album_artist, year=album_year) album.create() db.session.commit() initAlbums() . MENU . database = &#39;instance/sqlite.db&#39; def create(database): album = input(&quot;Enter the name of the album:&quot;) year = input(&quot;Enter the year it was created:&quot;) artist = input(&quot;Enter the name of the creator:&quot;) conn = sqlite3.connect(database) cursor = conn.cursor() try: cursor.execute(&quot;INSERT INTO albums (album, year, artist) VALUES (?, ?, ?)&quot;, (album, year, artist)) conn.commit() print(f&quot;A new album record {album} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) cursor.close() conn.close() def read(database): conn = sqlite3.connect(database) cursor = conn.cursor() results = cursor.execute(&#39;SELECT * FROM albums&#39;).fetchall() if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) cursor.close() conn.close() def update(database): album = input(&quot;Enter album name to update&quot;) year = input(&quot;Enter updated year&quot;) if len(year) &lt; 2: message = &quot;doesn&#39;t exist&quot; year = &#39;1000 bc&#39; else: message = &quot;successfully updated&quot; conn = sqlite3.connect(database) cursor = conn.cursor() try: cursor.execute(&quot;UPDATE albums SET year = ? WHERE album = ?&quot;, (year, album)) if cursor.rowcount == 0: print(f&quot;No album {album} was found in the table&quot;) else: print(f&quot;The row with {year} the year has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) cursor.close() conn.close() def delete(database): album = input(&quot;Enter album to delete&quot;) conn = sqlite3.connect(database) cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM albums WHERE album = ?&quot;, (album,)) if cursor.rowcount == 0: print(f&quot;No album {album} was not found in the table&quot;) else: print(f&quot;The row with album {album} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) cursor.close() conn.close() . def menu(database): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create(database) elif operation.lower() == &#39;r&#39;: read(database) elif operation.lower() == &#39;u&#39;: update(database) elif operation.lower() == &#39;d&#39;: delete(database) elif len(operation)==0: return else: print(&quot;Please enter c, r, u, or d&quot;) menu(database) try: menu(database) except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . A new album record Toys in the Attic has been created .",
            "url": "https://manigggg18.github.io/manimani/atat",
            "relUrl": "/atat",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "My Table",
            "content": "import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from flask import Flask from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate import os import sqlite3 app = Flask(__name__) database = &#39;sqlite:///sqlite.db&#39; app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() Migrate(app, db) db.init_app(app) class Highscore(db.Model): __tablename__ = &#39;highscores&#39; id = db.Column(db.Integer, primary_key=True) _username = db.Column(db.String(255)) _hscore = db.Column(db.Integer, unique=False, nullable=False) def __init__(self, username, hscore): self._username = username self._hscore = hscore @property def username(self): return self._username @username.setter def username(self, username): self._username = username @property def hscore(self): return self._hscore @hscore.setter def hscore(self, hscore): self._hscore = hscore def __str__(self): return json.dumps(self.read()) def create(self): try: existing = Highscore.query.filter_by(_username=self.username).first() if existing: if self.hscore &gt; existing.hscore: existing.hscore = self.hscore db.session.commit() return existing else: return None else: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None def read(self): return {&#39;username&#39;: self.username, &#39;hscore&#39;: self.hscore} def update(self, username, hscore): if username != &quot;null&quot; and username != None: self.username = username if hscore &gt;= self.hscore: self.hscore = hscore return self def delete(self): db.session.delete(self) db.session.commit() return None . def initHighscores(): with app.app_context(): db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; highscore1 = Highscore(username=&#39;somewhere&#39;, hscore=7) highscore2 = Highscore(username=&#39;out&#39;, hscore=7) highscore3 = Highscore(username=&#39;there&#39;, hscore=7) highscores = [highscore1, highscore2, highscore3] for highscore in highscores: try: highscore.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {highscore.username}&quot;) db.session.commit() initHighscores() . def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) conn = sqlite3.connect(database) cursor = conn.cursor() try: cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) cursor.close() conn.close() def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; conn = sqlite3.connect(database) cursor = conn.cursor() try: cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) cursor.close() conn.close() def delete(): uid = input(&quot;Enter user id to delete&quot;) conn = sqlite3.connect(database) cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) cursor.close() conn.close() def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: return else: print(&quot;Please enter c, r, u, or d&quot;) menu() try: menu() except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) .",
            "url": "https://manigggg18.github.io/manimani/myt",
            "relUrl": "/myt",
            "date": " • Mar 18, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Big Idea 2 Quiz Review",
            "content": "Score . . . . Reflection . Overall, I would say that this quiz was extremely easy. However, I still find working with operators difficult, and to be perfectly blunt, I do not even understand them. So, I had to search up a couple of questions that had operators in them. I believe that I need to study them in order to prepare for the AP exam. . Missed Questions . Q10 Combine data sources . Each student at a school has a unique student ID number. A teacher has the following spreadsheets available. . Spreadsheet I contains information on all students at the school. For each entry in this spreadsheet, the student name, the student ID, and the student’s grade point average are included. . | Spreadsheet II contains information on only students who play at least one sport. For each entry in this spreadsheet, the student ID and the names of the sports the student plays are included. . | Spreadsheet III contains information on only students whose grade point average is greater than 3.5. For each entry in this spreadsheet, the student name and the student ID are included. . | Spreadsheet IV contains information on only students who play more than one sport. For each entry in this spreadsheet, the student name and the student ID are included. . | . The teacher wants to determine whether students who play a sport are more or less likely to have higher grade point averages than students who do not play any sports. Which of the following pairs of spreadsheets can be combined and analyzed to determine the desired information? . A: Spreadsheets I and II . B: Spreadsheets I and IV . C: Spreadsheets II and III . D: Spreadsheets III and IV . My Answer: Spreadsheets II and III . The desired information cannot be determined with these two spreadsheets because students with grade point averages of 3.5 or less cannot be identified. . Correct Answer: Spreadsheets I and II . The desired information can be determined by using the student IDs in spreadsheet II to identify the students who play a sport. Once the students who play a sport are identified, the grade point averages of students who play sports in spreadsheet I can be compared to the grade point averages of all other students in spreadsheet I. .",
            "url": "https://manigggg18.github.io/manimani/bigidea2q",
            "relUrl": "/bigidea2q",
            "date": " • Mar 17, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . A database schema is the structure of a database described in a formal language supported by the database management system (DBMS). It is considered the “blueprint” of a database which describes how the data may relate to other tables or other data models. The schema defines how data is organized within a relational database, including logical constraints such as table names, fields, data types, and the relationships between these entities. . What is the purpose of identity Column in SQL database? | . An identity column in SQL is a column that is defined to be automatically generated by the database management system (DBMS) when a new record is inserted into the table. The purpose of an identity column is to provide a unique value for each row in the table. It is often used as a primary key for the table. The identity column is also known as an auto-increment column. . What is the purpose of a primary key in SQL database? | . A primary key in SQL is a column or a set of columns that uniquely identifies each row in a table. The purpose of a primary key is to ensure that each row in a table can be uniquely identified and to enforce the integrity of the data in the table. A primary key can be used to link tables together in a relational database. . What are the Data Types in SQL table? | . Numeric data types: such as int, float, and decimal. Character data types: such as char, varchar, and text. Date and time data types: such as date, time, and datetime. Binary data types: such as binary, varbinary, and image. . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Notes and Observations #1 . Imports the sqlite3 module and defines a variable database that stores the path to an SQLite database file. . | schema function is defined which establishes a connection to the database specified in database variable using sqlite3.connect. Creates a cursor object using conn.cursor() to execute SQL queries. . Executes the SQL statement &quot;PRAGMA table_info(&#39;users&#39;)&quot; which retrieves information about the users table. . | fetchall(): called on the cursor object to get all rows from the result set. . | for loop iterates through the result set and prints each row using the print() function. . | Closes the database connection using conn.close(). . | . | . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | . A connection object in SQL is an object that represents a connection to a database. It is used to establish a connection to a database and to manage the connection. The connection object is created by passing a connection string to the constructor of the object. The connection string contains information about the database to connect to, such as the server name, database name, and authentication credentials. Once the connection object is created, it can be used to execute SQL commands against the database. . Same for cursor object? | . A cursor object in SQL is an object that allows you to process rows individually or traverse over the rows. It is a database object that is used to retrieve and manipulate rows from a result set one at a time. Cursors are useful when you need to perform operations on each row of a result set rather than on the set as a whole. . Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | . The conn object is an instance of the sqlite3.Connection class and represents a connection to an SQLite database. It has attributes like autocommit, in_transaction, isolation_level, row_factory, text_factory, and total_changes. The cursor object is an instance of the sqlite3.Cursor class, which is used to execute SQL statements and interact with the database. It has attributes like arraysize, connection, description, lastrowid, rowcount, and statement. In the given code, the cursor object is used to execute the SQL query &quot;SELECT * FROM users&quot; and retrieve all rows using the fetchall() method. It then checks if the result set is empty and prints each row if not. Finally, it closes the cursor and conn objects using the close() method. . Is &quot;results&quot; an object? How do you know? | . Results is an object. It is a list of tuples containing the rows returned by the SQL query executed using the cursor object. The fetchall() method returns a list of tuples, where each tuple represents a row in the result set. Each tuple contains values for each column in the table. In the code segment, results is assigned the value returned by the fetchall() method called on the cursor object after executing the SQL statement &quot;SELECT * FROM users&quot;. The if statement checks if the length of results is 0, indicating an empty table, or if there are rows in the table, in which case each row is printed using a for loop. . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$x72AbI4yxjt5KxZC$955ae8288c9d03c16831475f0f16c06f48f32b9f6a7c9772ed0324bf5e4befc7&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$KSJ2TpUbuZJyu26c$33f8adf8ed4ec5f9cd6a590d7b543f7846b1f976e9f19be5efd5031f9e4d5ae4&#39;, &#39;2023-03-19&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$sUXq5eIpjRHFzqBT$5393b09c1bbec83172c626102b42454c3f80b7444f11b35c77bfced61014bf8d&#39;, &#39;2023-03-19&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$571hcCw1hHD7SxZ9$3dffe251a7ba8ad5930a7e78293fa76ea237516f0ddb4d300ab4d364ac2edc81&#39;, &#39;2023-03-19&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$8PBGAC8DrT0gU9fw$137770a3952ecf0ffba7834ac4b2782401c86bb2091e406e5ee2135b504f75d9&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$srqGFuFLubKy40sT$8698afc295095e468742a4ef6b6a221858e47ca53bfb29703c24ac793a33af22&#39;, &#39;1921-10-21&#39;) (7, &#39;Snake&#39;, &#39;punished&#39;, &#39;ddog&#39;, &#39;1936-05-08&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? Explain purpose of SQL INSERT. Is this the same as User init? | . The purpose of the SQL INSERT statement is to add a new row to the users table in the SQLite database, with values provided by the user. The INSERT statement is used to specify the values to be inserted into each column of the table.The statement INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?) is a parameterized SQL statement that specifies the column names and the values to be inserted. The ? placeholders are used to specify the values to be inserted, which are provided as a tuple in the execute() method call.The INSERT statement is not the same as the init method used in classes to initialize object attributes. The init method is called when an object is created, whereas the INSERT statement is executed on the database to add a new row. In this code segment, the create function prompts the user to input values for the name, uid, password, and dob attributes of the new user record. The INSERT statement is then executed using these values, and if the operation is successful, a message is printed to indicate that a new user record has been created. If an error occurs while executing the INSERT statement, an error message is printed instead. . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . The hacked part in the update() function is a simple check for the length of the user-provided password. If the password is less than 2 characters long, the message variable is set to &quot;hacked&quot;, and a default password &quot;gothackednewpassword123&quot; is used instead of the user-provided password. This is an example of a simple data validation technique to prevent weak passwords. The try/except block is used to handle any errors that occur while executing the SQL UPDATE statement. If an error occurs, the except block is executed, which prints an error message along with the details of the error. The try/except block is used here to catch any potential errors that might occur when executing the UPDATE statement, such as an invalid SQL syntax, a database connection error, or a constraint violation. The except block would occur when an error is encountered during the execution of the UPDATE statement. This might be due to various reasons such as an incorrect SQL syntax, a database connection error, a violation of a database constraint, or an invalid value being passed to the execute() method. The code that is repeated in each example is the connection and cursor initialization for interacting with the database. This is repeated to ensure that a new connection and cursor object are created for each database operation. It is important to close the connection and cursor objects properly after use to avoid resource leaks and improve performance. . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . The DELETE operation can be considered dangerous if used without proper caution since it permanently removes data from the database. It is a powerful command that can delete data from the database in one shot, and if not used carefully, can result in the loss of valuable information. The &quot;f&quot; in the print statement stands for &quot;formatted string literal&quot; and is a way to embed expressions inside string literals. The {uid} inside the string is a placeholder that gets replaced with the value of the uid variable at runtime. This technique is used to create dynamic strings that can contain variable values, making the output more readable and informative. In this case, the {uid} placeholder is used to print the user ID value that was used for the DELETE operation. . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? Could you refactor this menu? Make it work with a List? | . The menu repeats because it is implemented recursively, i.e., the function calls itself again after each operation is performed. This causes the menu to be displayed again and again until the user chooses to exit. To refactor the menu, we can use a list to store the available operations and their corresponding functions. This way, we can avoid repetitive code and make the menu more scalable, in case we want to add more operations in the future. . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . The row with uid was successfully deleted A new user record punished has been created . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://manigggg18.github.io/manimani/4bb",
            "relUrl": "/4bb",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Notes and Observations #1 . Imports Flask and SQLAlchemy libraries. . | Creates a Flask application instance. . | Sets up a database URI for an SQLite database . | Disables SQLAlchemy modification tracking . | Sets a secret key . | Initializes a SQLAlchemy instance . | Associates it with the Flask application. . | Flask framework is used for creating web applications in Python. . | Flask_SQLAlchemy extension is used to integrate SQLAlchemy with Flask. . | SQLite database is used as the backend database. . | SQLALCHEMY_TRACK_MODIFICATIONS configuration option is set to False, SQLAlchemy will not track modifications by default. . | SECRET_KEY is set as a configuration option, which is used for secure session management. . | db object is initialized and associated with the Flask application using init_app method. . | . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Notes and Observations #2 . Defines a SQLAlchemy model class named User that represents a user in a web application. . User class has several properties and methods that define its behavior: . __tablename__ attribute: set to users,the name of the table in the database that corresponds to this model. . | Properties that represent attributes of the user such as name, uid, password, dob, and age. . These properties have getter and setter methods. | . | __init__ method: defined to set default values for some of the attributes of the User class, such as password and dob. Initializes the class with values provided by the caller. . | set_password method: sets a hash of the user&#39;s password using the werkzeug.security library. . | is_password method: checks if a given password matches the user&#39;s stored password. . | CRUD: . Adds a new user to the database. . | Returns a dictionary representation of the user object. . | Updates the properties of the user object and commits the changes to the database. . | Deletes the user object from the database. . | . | . | . | db object: a SQLAlchemy instance. . | is_uid method not used in the code. . | __str__ method: returns a JSON string representation of the user object. . | IntegrityError exception is caught in the create method, indicating that a user with the same _uid attribute may already exist in the database. . | . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Notes and Observations #3 . Defines a function called initUsers(). . Initializes user records in the database. | . | with app.app_context() sets the application context for the database. . | db.create_all() creates the table if it doesn&#39;t exist yet. . | Creates six user records with attributes such as name, uid, password, and date of birth. . If no password or dob is provided, the function sets default values. | . | user objects stored in a list called users. . | Loop iterates over the users and attempts to create each one using the create() method of the User class. . If the create operation is successful, the function prints a message with the uid of the newly created user. . | If the create operation fails due to an integrity error, the function prints a message indicating that the record already exists or an error occurred. . | . | . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Notes and Observations #4 . Defines two functions . find_by_uid . Takes a uid parameter and returns a User object with the matching _uid. . | Uses Flask&#39;s application context to create a new context and then uses SQLAlchemy to query the User table for the matching _uid. . | . | check_credentials . Takes a uid and password parameter and returns True if there is a user with matching _uid and password, and False otherwise. . | Uses find_by_uid to get the User object with the matching _uid, and then checks if the given password matches the user&#39;s password using the is_password method defined in the User class. . | . | . | . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Invalid date require YYYY-mm-dd, date defaulted to 03-19-2023 Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;, &#39;dob&#39;: &#39;03-19-2023&#39;, &#39;age&#39;: 0} . Notes and Observations #5 . Defines a function create() that interacts with the user to create a new user in the database. . Prompts the user for their user ID and checks if the user already exists in the database using the find_by_uid() function. . If the user already exists, the function prints out the user&#39;s information and returns. Otherwise, the function prompts the user for their name and password, creates a new User object, and prompts the user for their date of birth. . If the date of birth is entered in an invalid format, the default date is set to the current date. . The new user is added to the database using the create() method of the User object.According to ChatGPT:an issue with the code is that it assumes that the find_by_uid() function always returns a valid User object. If the find_by_uid() function returns None, then an error will occur when trying to call the read() method on None. It would be better to check if the user variable is None before trying to print out the user&#39;s information. . | . | . | . | . | . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-19-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-19-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-19-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;, &#39;dob&#39;: &#39;03-19-2023&#39;, &#39;age&#39;: 0}] . Notes and Observations #6 . Reads all the rows from the User table and returns a list of dictionary objects, where each dictionary contains user data in a format that can be easily converted to JSON: . Create a context for the Flask app. . | Use the query.all() method of the User object to retrieve all rows from the User table. . | Iterate over the rows and call the read() method of each row, which returns a dictionary object containing user data in a format that can be easily converted to JSON. . | Return a list of all the dictionary objects. . | . | . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://manigggg18.github.io/manimani/4aaa",
            "relUrl": "/4aaa",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://manigggg18.github.io/manimani/4aaacop",
            "relUrl": "/4aaacop",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Notes and Observations #1 . Imports the Pandas library and renames it to &quot;pd&quot;. | . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Notes and Observations #2 . Uses Pandas to read in data from a JSON file named &quot;grade.json&quot; located in the &quot;files&quot; directory. | . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . Notes and Observations #2 . Two separate print statements: . 1: Uses double brackets to extract a single column (GPA) of data from the DataFrame. . Output: GPA column only. | . | 2: Uses double brackets to extract two columns of data from the DataFrame: &quot;Student ID&quot; and &quot;GPA&quot;. . Printed using the &quot;to_string()&quot; method. . | The &quot;index=False&quot; argument ensures that the DataFrame is printed without row numbers. . | . | . | . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . Notes and Observations #3 . Two separate print statements . 1: Uses the &quot;sort_values()&quot; method to sort the DataFrame by the &quot;GPA&quot; column from lowest to highest. . Output: DataFrame that displays the rows sorted by GPA from lowest to highest. | . | 2: Uses the same &quot;sort_values()&quot; method . The &quot;ascending&quot; argument is set to &quot;False&quot; . | Output: new DataFrame that displays the rows sorted by GPA from highest to lowest. . | . | . | . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . Notes and Observations #4 . Uses Pandas to filter data from a DataFrame based on the condition df.GPA &gt; 3.00. | . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Notes and Observations #5 . Uses Pandas to filter data from a DataFrame based on the maximum and minimum values of the &quot;GPA&quot; column. . | Two separate print statements: . 1: Uses boolean indexing to select only the rows where the &quot;GPA&quot; column is equal to the maximum value of the &quot;GPA&quot; column. . max(): Used to find the maximum value in the &quot;GPA&quot; column. . | Compared to the entire &quot;GPA&quot; column using the == operator. . | Output: New DataFrame that contains only the rows where the &quot;GPA&quot; column is equal to the maximum value of the &quot;GPA&quot; column. . | . | 2: Uses boolean indexing to select only the rows where the &quot;GPA&quot; column is equal to the minimum value of the &quot;GPA&quot; column. . min(): Used to find the minimum value in the &quot;GPA&quot; column. . | Compared to the entire &quot;GPA&quot; column using the == operator. . | Output: New DataFrame that contains only the rows where the &quot;GPA&quot; column is equal to the minimum value of the &quot;GPA&quot; column. . | . | . | . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 500], &quot;duration&quot;: [50, 40, 45, 55] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 500 55 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 500 55 . Notes and Observations #6 . Imports the pandas library using the shorthand pd. . | Creates a dictionary named dict that contains two lists: . calories . | duration . | . | Converts the dictionary dict into a Pandas DataFrame. . The resulting DataFrame is printed to the console using the print() function. | . | Creates another DataFrame by passing the dictionary dict as well as a list of strings as arguments to the pd.DataFrame() method. . DataFrame is printed to the console using the print() function. | . | . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Notes and Observations #6 . Prints the string -Examine Selected Rows to the console using the print() function. . | Selects and prints specific rows of the DataFrame df using the loc[] method and a list of strings. . | Prints the string --Examine Single Row-- to the console using the print() function. . | Selects and prints a single row of the DataFrame df using the loc[] method and a single string. . | . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, day1 to day4 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 4 non-null int64 1 duration 4 non-null int64 dtypes: int64(2) memory usage: 268.0+ bytes None . Notes and Observations #7 . Calls the info() method of the DataFrame df and prints the resulting information to the console using the print() function | . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . Notes and Observations #8 . Imports the pandas library using the shorthand pd. . | Reads in a CSV file named data.csv using the pd.read_csv() method and stores the resulting DataFrame in a variable named df. . | Sorts the DataFrame df in descending order based on the values in the Duration column using the sort_values() method. . | Prints the string --Duration Top 10 to the console using the print() function. . | Selects and prints the first 10 rows of the sorted DataFrame df using the head() method. . | Prints the string --Duration Bottom 10 to the console using the print() function. . | Selects and prints the last 10 rows of the sorted DataFrame df using the tail() method. . | . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Notes and Observations #9 . Imports the pandas library using the shorthand pd and the requests library. . | Defines a function named fetch() that retrieves data from a remote server. . Creates a variable named url that contains the URL of the remote server endpoint. . | Sends a GET request to the remote server using the requests.get() method and stores the response in a variable named fetch. . | Retrieves the JSON content from the response using the fetch.json() method and stores the resulting dictionary in a variable named json. . | Creates a new DataFrame named df by passing the countries_stat key from the json dictionary to the pd.DataFrame() method. . | Selects and prints the first 6 rows and the columns from country_name to deaths using the loc[] method and the print() function. . | Calls itself to execute the code . . | . | . CB 2.3 . The Extracting Information from Data Quiz and Using Programs with Data quizzes were relatively harder than the topics discussed in 2.2, but I was able to complete both quizzes with ease and I only missed one problem. However, there were some questions that were trickier than others. There were also a lot of high-quality notes. . Extracting Information from Data . Challenge in analyzing data from many counties . A team of researchers wants to create a program to analyze the amount of pollution reported in roughly 3,000 counties across the United States. The program is intended to combine county data sets and then process the data. Which of the following is most likely to be a challenge in creating the program? . A: A computer program cannot combine data from different files. . B: Different counties may organize data in different ways. . C: The number of counties is too large for the program to process. . D: The total number of rows of data is too large for the program to process. . Answer: Different counties may organize data in different ways. It will be a challenge to clean the data from the different counties to make the data uniform. The way pollution data is captured and organized may vary significantly from county to county. . Using Programs with Data Quiz . Bookstore spreadsheet . A large spreadsheet contains the following information about the books at a bookstore. A sample portion of the spreadsheet is shown below. . . An employee wants to count the number of books that meet all of the following criteria. . Is a mystery book . | Costs less than $10.00 . | Has at least one copy in stock . | . For a given row in the spreadsheet, suppose genre contains the genre as a string, num contains the number of copies in stock as a number, and cost contains the cost as a number. Which of the following expressions will evaluate to true if the book should be counted and evaluates to false otherwise? . A: (genre = &quot;mystery&quot;) AND ((1 ≤ num) AND (cost &lt; 10.00)) . B: (genre = &quot;mystery&quot;) AND ((1 &lt; num) AND (cost &lt; 10.00)) . C: (genre = &quot;mystery&quot;) OR ((1 ≤ num) OR (cost &lt; 10.00)) . D: (genre = &quot;mystery&quot;) OR ((1 &lt; num) OR (cost &lt; 10.00)) . Answer: (genre = &quot;mystery&quot;) AND ((1 ≤ num) AND (cost &lt; 10.00)). For a book to be counted, the value of genre must be &quot;mystery&quot; so that only mystery books are counted. The value of num must be greater than or equal to 1 so that only books that have at least one copy in stock are counted. The value of cost must be less than 10.00 so that only books that cost less than $10 are counted. All three conditions must be true, so the AND operator is used between them. . Clothing store sales information . The owner of a clothing store records the following information for each transaction made at the store during a 7-day period. . The date of the transaction . | The method of payment used in the transaction . | The number of items purchased in the transaction . | The total amount of the transaction, in dollars . | . Customers can pay for purchases using cash, check, a debit card, or a credit card. . Using only the data collected during the 7-day period, which of the following statements is true? . A: The average amount spent per day during the 7-day period can be determined by sorting the data by the total transaction amount, then adding the 7 greatest amounts, and then dividing the sum by 7. . B: The method of payment that was used in the greatest number of transactions during the 7-day period can be determined by sorting the data by the method of payment, then adding the number of items purchased for each type of payment method, and then finding the maximum sum. . C: The most expensive item purchased on a given date can be determined by searching the data for all items purchased on the given date and then sorting the matching items by item price. . D: The total number of items purchased on a given date can be determined by searching the data for all transactions that occurred on the given date and then adding the number of items purchased for each matching transaction. . Answer: The total number of items purchased on a given date can be determined by searching the data for all transactions that occurred on the given date and then adding the number of items purchased for each matching transaction.For each transaction, the data includes the date of the transaction and the number of items purchased in the transaction. By searching the data to find all transactions that occurred on the given date, and then adding the number of items purchased in each of those transactions, the total number of items purchased on a given date can be determined. . Use of databases to display animal information . A wildlife preserve is developing an interactive exhibit for its guests. The exhibit is intended to allow guests to select the name of an animal on a touch screen and display various facts about the selected animal. . For example, if a guest selects the animal name “wolf,” the exhibit is intended to display the following information. . Classification: mammal . | Skin type: fur . | Thermoregulation: warm-blooded . | Lifestyle: pack . | Average life span: 10–12 years . | Top speed: 75 kilometers/hour . | . The preserve has two databases of information available to use for the exhibit. The first database contains information for each animal’s name, classification, skin type, and thermoregulation. The second database contains information for each animal’s name, lifestyle, average life span, and top speed. . Which of the following explains how the two databases can be used to develop the interactive exhibit? . A: Only the first database is needed. It can be searched by animal name to find all the information to be displayed. . B: Only the second database is needed. It can be searched by animal name to find all the information to be displayed. . C: Both databases are needed. Each database can be searched by animal name to find all information to be displayed. . D: The two databases are not sufficient to display all the necessary information because the intended display information does not include the animal name. . Answer: Both databases are needed. Each database can be searched by animal name to find all information to be displayed. The information to be displayed comes from both databases. The animal name can be used search the first database to find the classification, skin type, and thermoregulation information. The animal name can be used search the second database to find the lifestyle, average life span, and top speed information. . Album Dataset Stuff . import json with open(&#39;files/album.json&#39;, &#39;r&#39;) as f: albums_data = json.load(f) def get_album_info(album_name): album_id = albums_data[&quot;Album ID&quot;].get(album_name) if album_id is None: return &quot;Album not found&quot; album_creator = albums_data[&quot;Creator&quot;][album_name] album_year = albums_data[&quot;Year&quot;][album_name] return f&quot;Album ID: {album_id} nCreator: {album_creator} nYear of release: {album_year}&quot; print(get_album_info(&quot;Kid A&quot;)) print(get_album_info(&quot;In Rainbows&quot;)) print(get_album_info(&quot;Dummy&quot;)) print(get_album_info(&quot;Graduation&quot;)) . Album ID: 2 Creator: Radiohead Year of release: 2000 Album ID: 7 Creator: Radiohead Year of release: 2007 Album ID: 5 Creator: Portishead Year of release: 1994 Album not found . import json with open(&#39;files/album.json&#39;, &#39;r&#39;) as f: albums_data = json.load(f) def get_album_stats(albums_data): total_albums = len(albums_data[&quot;Album ID&quot;]) creator_counts = {} for album in albums_data[&quot;Creator&quot;]: creator = albums_data[&quot;Creator&quot;][album] if creator in creator_counts: creator_counts[creator] += 1 else: creator_counts[creator] = 1 years = albums_data[&quot;Year&quot;].values() avg_year = sum(years) / len(years) oldest_album = min(albums_data[&quot;Year&quot;], key=albums_data[&quot;Year&quot;].get) newest_album = max(albums_data[&quot;Year&quot;], key=albums_data[&quot;Year&quot;].get) stats_str = ( f&quot;Total albums: {total_albums} n&quot; f&quot;Albums per creator: {creator_counts} n&quot; f&quot;Average year of release: {avg_year:.2f} n&quot; f&quot;Oldest album: {oldest_album} n&quot; f&quot;Newest album: {newest_album} n&quot; ) return stats_str album_stats = get_album_stats(albums_data) print(album_stats) . Total albums: 9 Albums per creator: {&#39;UNKLE&#39;: 1, &#39;Radiohead&#39;: 3, &#39;Noah Hawley, Jeff Russo&#39;: 1, &#39;21 Pilots&#39;: 1, &#39;Portishead&#39;: 1, &#39;Atoms for Peace&#39;: 1, &#39;The Police&#39;: 1} Average year of release: 2003.44 Oldest album: Synchronicity Newest album: It&#39;s Always Blue .",
            "url": "https://manigggg18.github.io/manimani/unit23",
            "relUrl": "/unit23",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | . JPG files use lossy compression, which means that some data is lost when the image is compressed and thus, results in a reduction in image quality. However, it also results in smaller file sizes. PNG files, on the other hand, use lossless compression, which means that no data is lost during compression. This results in larger file sizes but better image quality. . Size, height and width, number of pixels | . The size of an image file refers to the amount of storage space it takes up. The larger the file size, the more storage space it will take up. Larger files can cause slower performance. Height and width refer to the dimensions of the image. The height and width of an image determine its aspect ratio, which is the ratio of the width to the height. The number of pixels in an image is the total number of dots or points that make up the image. The more pixels an image has, the higher its resolution and the sharper and more detailed the image will appear. However, more pixels also mean a larger file size and slower performance. . Visual perception, lossy compression | . Visual perception is influenced by factors such as color, contrast, brightness, and detail. It&#39;s important to consider how the images will be viewed and ensure that they are optimized accordingly.Lossy compression is a method of reducing the file size of an image by discarding some of the data that makes up the image. This can result in a significant reduction in file size, but can also result in a loss of image quality. . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | . I have never used a macOS in my entire life. . What are the command you use in Windows terminal to access files? | . Some of these commands include: - cd: changing directory, navigating files . - ls: listing directory, monitoring the contents in a directory . - mkdir: create directory . - sudo: execute commands . - exit: ...exit . - code .: open in vscode? . What are some of the major differences? | . From research, I have concluded that the only major difference (that I hadn&#39;t noticed before), is that forward slash is used in Windows and backslash is used in MacOS. For instance: . cd mnt c Users tmani # MacOS cd /mnt/c/Users/tmani # Windows . [Errno 2] No such file or directory: &#39;/mnt/c/Users/tmani # Windows&#39; /mnt/c/Users/tmani/vscode/backup/manimani/_notebooks . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | . Because it specifies the exact location of the image within the file system, allowing the software to locate, modify, and organize images correctly. . How does the meta data source and label relate to Unit 5 topics? | . In the context of safe computing, metadata and labels can play a significant role in protecting individuals and organizations from potential risks. For example, metadata can reveal sensitive information about an individual, such as their location, which can be used by malicious actors to track or target them. Therefore, it is important to consider what information is included in the metadata of images and other files and to remove any sensitive information that is not necessary. . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . IPython is relevant in Jupyter notebooks for both Pandas and images because it provides an interactive shell with powerful features like tab completion and object introspection, making data exploration and analysis more efficient and convenient. Additionally, IPython&#39;s integration with Matplotlib allows for easy and flexible visualization of data and images within the notebook environment. . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Notes and Observations #1 . Defined functions: image_data() and image_display() . | image_data(): . Arguments: . path: default value is &quot;images/&quot; . | images: default value is a list of dictionaries, with each dictionary containing information about an image such as its source, label, and file name. . | . | Checks if images is None. If so, it sets it to a list of two dictionaries, each containing information about an image. . | For each dictionary in images, it adds a new key-value pair filename which is the concatenation of the path argument and the file value of the dictionary. . | It returns the list of dictionaries with the updated filename values. . | . | The image_display(): . Takes in a list of dictionaries containing information about images in the same format as the output of image_data() function and uses the display() function from the IPython.display module to display each image using its filename value. | . | The if __name__ == &quot;__main__&quot; block of code calls image_data() function twice: . With a single image specified . | Without any arguments. . | . | Then calls image_display() function with the output of image_data() in each case to display the corresponding images. . | . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Base64 is a way of encoding binary data (such as images) as text, while Binary and Hexadecimal are ways of representing data in their most basic form and a more compact form, respectively. All three systems are used extensively in managing text and image files. . Translate first 3 letters of your name to Base64. | . 001100 000000 001101 . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | . Two very common examples that come to mind are using keyboards and printers. The characters typed using a keyboard are temporarily stored in an input buffer until the computer is ready to process them. In addition, after sending a document to a printer, the computer will often temporarily store the document in an output buffer until the printer is ready to receive it, which allows the computer to send the data to the printer more quickly than the printer can process it, preventing delays or lost data. . From your consumer experience, what effects have you experienced from buffering? | . By reducing the likelihood of interruptions or delays, buffering can reduce frustration for users. For example, when watching a video online, buffering can prevent the video from pausing or stuttering, which can be very annoying. On the other hand, buffering can result in longer load times for some content, which can be frustrating for users. For example, when uploading or downloading large files, the buffering process can add additional time to the transfer process. . How do these effects apply to images? | . When loading images on a web page, buffering can ensure that the images are loaded smoothly and without delay, which can be very helpful for users who want to view a lot of images quickly. On the other hand, when loading large or complex images, the buffering process can add additional time to the image loading process. . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | . It looks like a number of models and procedures are defined and the procedures are executed using &quot;if&quot; statements and &quot;for&quot; loops. . Describe Grey Scale algorithm in English or Pseudo code? | . Get the pixel data from the image using the &quot;getdata()&quot; method. . For each pixel, compute the average value of the red, green, and blue components of the pixel. . If the pixel has an alpha component, create a new tuple with the average value repeated three times and the original alpha value. . If the pixel does not have an alpha component, create a new tuple with the average value repeated three times. . Replace the pixel data in the original image with the grayscale pixel data. . Generate HTML code to display the grayscale image using the &quot;image_to_base64&quot; function. . Describe scale image? What is before and after on pixels in three images? | . Scale image resizes an image to a specific width of 320 pixels while maintaining its aspect ratio. It does this by calculating the percentage scale that needs to be applied to the image&#39;s original height based on the ratio of the original width to the target width. Then it creates the new width and the scaled height and resizes the image using the resize() method from the PIL library. Before the function is applied, the images are opened and their metadata is stored, and after the function is applied, the images are encoded in base64 format and displayed in the Jupyter Notebook. . Is scale image a type of compression? If so, line it up with College Board terms described? | . No, this is not a type of compression, because the scaling function is a type of image resizing or scaling that does not involve any loss of information or reduction in the amount of data. Compression, on the other hand, involves reducing the amount of data in an image by removing some of the information, which may result in a loss of quality or detail. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Notes and Observations #2 . Main functions: . image_data(path=Path(&quot;images/&quot;), images=None): . Takes a path argument to specify the directory where the image files are located, and an images argument to specify a list of dictionaries that describe the image files. . | If images is not specified, will use a default list of image descriptions. . | Returns a list of image dictionaries with additional filename properties that specify the full path to the image files. . | . | scale_image(img): . Takes an image file img . | Resizes it to a fixed width of 320 pixels, while maintaining the aspect ratio. . | Returns the resized image. . | . | image_to_base64(img, format): . Takes an image file img and a format string. . | Converts the image file to a base64-encoded string that can be embedded in HTML code. . | . | image_management(image): . Takes an image dictionary image and performs several operations on the image file specified by the filename property. . | Reads the image file using the pilImage.open() function, extracts some metadata (format, mode, size), scales the image using the scale_image() function, and generates a base64-encoded HTML code to display the scaled image using the image_to_base64() function. . | Adds the following properties to the image dictionary: format, mode, size, pil (the scaled image), scaled_size, and html (the HTML code to display the scaled image). . | . | image_management_add_html_grey(image): . Takes an image dictionary image that has already been processed by the image_management() function and generates a base64-encoded HTML code to display a grayscale version of the image. . | Extracts the pixel data from the pil property of the image dictionary, converts each pixel to grayscale, and generates a new list of pixel data in the gray_data property of the image dictionary. . | Creates a new pilImage object with the grayscale pixel data, and generates a base64-encoded HTML code to display the grayscale image using the image_to_base64() function. . | Adds the gray_data and html_grey properties to the image dictionary. . | . | if __name__ == &quot;__main__&quot;: . Uses the above functions to: . Process a list of image files . | Print some metadata about the images . | Display the original and grayscale versions of the images in the Jupyter Notebook or web page using the display() and HTML() functions from the IPython.display module. . | . | . | . | . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Notes and Observations #3 . Defines a class called Image_Data: . Represents an image object with various properties and methods. . | Uses several external libraries, including IPython.display, pathlib, PIL, io, and numpy. . | . | The Image_Data class has several properties: . Source, label, file, filename, img, format, mode, originalSize, size, html, and html_grey. . They represent various attributes of the image, such as the image source, label, file name, format, size, and HTML representation. | . | . | Methods: . __init__, scale_image, image_to_html, and image_to_html_grey: . __init__: . Initializes the image object with the given parameters, including the source, label, file name, path, and base width. . | Loads the image from the file and sets various properties of the image object. . | . | scale_image: . Scales the image to the specified base width while maintaining its aspect ratio. | . | image_to_html: . Converts the image to an HTML representation that can be displayed in a web page. | . | image_to_html_grey: . Converts the image to grayscale and returns its HTML representation. | . | . | . | image_data function: . Defines a list of image objects with their source, label, and file name. . | Creates a list of Image_Data objects using the image data defined in image_data. . | . | __main__: . Displays the meta data, scaled image, and grayscale image of each image object using the display and HTML functions. | . | . CB 2.2 . The Binary Numbers and Data Compression quizzes were relatively easy, and I was able to complete both quizzes with little to no difficulty. However, there were some questions that were trickier than others. There were also a lot of high-quality notes. . Binary Numbers Quiz . Adding numbers in 4-bit representation . A certain programming language uses 4-bit binary sequences to represent nonnegative integers. For example, the binary sequence 0101 represents the corresponding decimal value 5. Using this programming language, a programmer attempts to add the decimal values 14 and 15 and assign the sum to the variable total. Which of the following best describes the result of this operation? . A: The correct sum of 29 will be assigned to the variable total. . B: An overflow error will occur because 4 bits is not large enough to represent either of the values 14 or 15. . C: An overflow error will occur because 4 bits is not large enough to represent 29, the sum of 14 and 15. . D: A round-off error will occur because the decimal values 14 and 15 are represented as approximations due to the fixed number of bits used to represent numbers. . Answer: An overflow error will occur because 4 bits is not large enough to represent 29, the sum of 14 and 15. The largest binary value that can be represented using 4 bits is 1111, which is equal to the decimal value 15. Since the sum is larger than the largest representable value, an overflow error will occur. . Data that can be represented with binary sequences . Which of the following are true statements about the data that can be represented using binary sequences? . I. Binary sequences can be used to represent strings of characters. . II. Binary sequences can be used to represent colors. . III. Binary sequences can be used to represent audio recordings. . A: I only . B: I and II only . C: II and III only . D: I, II, and III . Answer: I, II, and III. All digital data is represented at the lowest level as sequences of bits. Statement I is true because strings of characters can be represented by sequences of bits. Statement II is true because colors can be encoded as sequences of bits. Statement III is true because sequences of bits can be used to represent sound. . Data Compression . Compression algorithm for storing a data file . A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user’s needs? . A: Compressing the file using a lossless compression algorithm before uploading it . B: Compressing the file using a lossy compression algorithm before uploading it . C: Compressing the file using both lossy and lossless compression algorithms before uploading it . D: Uploading the original file without using any compression algorithm . Answer: Compressing the file using a lossless compression algorithm before uploading it. Lossless compression algorithms allow for complete reconstruction of the original data and typically reduce the size of the data. . Lossy and Lossless images . . . . The first image is a JPEG file, and the second image, which has a transparent background, is a PNG file. JPEG is more likely to result in lossy data compression because it uses a lossy compression algorithm, which means that it discards some of the original image data in order to achieve a smaller file size, but it also reduces the quality of the image. JPEG is best suited for photographic images with many colors and gradients, as the loss of data is less noticeable and the smaller file size is important for sharing and storage. PNG, on the other hand, is more likely to result in lossless data compression because it uses a lossless compression algorithm, which means that all of the original image data is preserved. PNG is best suited for images with solid colors and sharp lines, such as logos or graphics, as these types of images benefit from the preservation of all original image data. . Playing with PIL . from PIL import Image, ImageFilter, ImageDraw, ImageFont original_image = Image.open(&quot;images/smiley.jpg&quot;) blurred_image = original_image.filter(ImageFilter.GaussianBlur(radius=10)) new_size = (int(blurred_image.width * 1.5), int(blurred_image.height * 1.5)) blurred_image = blurred_image.resize(new_size) draw = ImageDraw.Draw(blurred_image) text = &quot;&quot;&quot;Do not go gentle into that good night, Old age should burn and rave at close of day; Rage, rage against the dying of the light. Though wise men at their end know dark is right, Because their words had forked no lightning they Do not go gentle into that good night. Good men, the last wave by, crying how bright Their frail deeds might have danced in a green bay, Rage, rage against the dying of the light. Wild men who caught and sang the sun in flight, And learn, too late, they grieved it on its way, Do not go gentle into that good night. Grave men, near death, who see with blinding sight Blind eyes could blaze like meteors and be gay, Rage, rage against the dying of the light. And you, my father, there on the sad height, Curse, bless me now with your fierce tears, I pray. Do not go gentle into that good night. Rage, rage against the dying of the light.&quot;&quot;&quot; font_size = 17 font = ImageFont.truetype(&quot;cour.ttf&quot;, font_size) text_size = draw.multiline_textsize(text, font=font) x = (blurred_image.width - text_size[0]) / 2 y = (blurred_image.height - text_size[1]) / 2 draw.multiline_text((x, y), text, fill=(0, 0, 0), font=font, align=&#39;center&#39;) original_image.show() blurred_image.show() .",
            "url": "https://manigggg18.github.io/manimani/unit2-2",
            "relUrl": "/unit2-2",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Trimester 2 Final MCQ",
            "content": "Score . . . . Q22: Two robots in separate grids try to reach the goal . Two grids are shown below. Each grid contains a robot represented as a triangle. Both robots are initially facing left. Each robot can move into a white or gray square, but cannot move into a black region. . . For each grid, the program below is intended to move the robot to the gray square. The program uses the procedure Goal_Reached ( ), which evaluates to true if the robot is in the gray square and evaluates to false otherwise. . . For which of the grids does the program correctly move the robot to the gray square? . My Answer: Neither grid I nor grid II . Correct Answer: Grid I only . Explanation: In Grid I, the robot moves forward to the end of the bottom row, turns right twice, moves forward twice, turns right twice, moves forward until the end of the middle row, turns left twice, moves forward twice, turns left twice, and moves forward until Goal_Reached is true. . . . Q49: Crowd Flow Simulation . A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? . My Answer: The model used by the simulation software cannot be modified once the simulation has been used. . Correct Answer: The model used by the simulation software often omits details so that it is easier to implement. . Explanation: Simulations are limited by the model that is used. There may be many reasons for using a simplified model, including ease of implementation. . . . Q50: Which algorithm runs in reasonable time . A computer scientist is analyzing four different algorithms used to sort a list. The table below shows the number of steps each algorithm took to sort lists of different sizes. . . Based on the values in the table, which of the algorithms appear to run in reasonable time? . Select two answers. . My Answer: B and C . Correct Answer: A and D . Explanation: As the size of the list grows, the number of steps needed to sort the list grows at a linear rate, as the number of steps is equal to 10n for a list of size n. This is an example of a polynomial efficiency and indicates that the algorithm runs in a reasonable amount of time. The number of steps for this algorithm is equal to the length of the list squared, as the number of steps is equal to n2 for a list of size n. This is an example of a polynomial efficiency and indicates that the algorithm runs in a reasonable amount of time. .",
            "url": "https://manigggg18.github.io/manimani/tritwomcq",
            "relUrl": "/tritwomcq",
            "date": " • Mar 5, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Create Performance Task",
            "content": "A . Video . 3ai . The purpose of this program is to create a system where the highest score of each user is stored and displayed using a table. . 3aii . The video demonstrates a user (Jay) gaining a score. If the score is their highest score, it will be added to the table. Since they gained a higher score than they previously did, their score was added to the table. . 3aiii . The input demonstrated in the video is the user&#39;s score that they will gain at the end of the game. The output is the highest score stored in the table. . B . 3bi . highscore1 = Highscore(username=&#39;sreeja&#39;, hscore=7) highscore2 = Highscore(username=&#39;ekam&#39;, hscore=7) highscore3 = Highscore(username=&#39;tirth&#39;, hscore=7) highscore4 = Highscore(username=&#39;mani&#39;, hscore=7) highscores = [highscore1, highscore2, highscore3, highscore4] . 3bii . &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for highscore in highscores: try: highscore.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {highscore.username}&quot;) . 3biii . The program includes a list named &quot;highscores,&quot; which contains 4 users and their high scores. The provided code snippet employs a for loop to traverse through the list and execute the create method from the &quot;Highscore&quot; class. This creates a new entry for each &quot;highscore&quot; in the SQL table labelled &quot;highscores&quot;. This functionality is crucial since it allows the program to generate a database with data that can be sorted using SQLalchemy functions. As a result, a table of high scores can be generated, which can be accessed through a get request. . 3biv . The data in the list represents users and their single highest core. . 3bv . C . 3ci . def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None . 3cii . def initHighscores(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.init_app(app) db.create_all() . 3ciii . The &quot;create&quot; function is being called as a method of an object, where it adds itself to the session, commits the changes to the database, and returns itself if successful. If there is an integrity error, it removes the session and returns None. In the &quot;initHighscores&quot; function, the database is initialized and tables are created using the Flask app context and the SQLAlchemy library&#39;s &quot;create_all&quot; method. . 3civ . This algorithm creates an instance of a class and adds it to a database session. If the session commit fails due to an IntegrityError, the session is removed and the function returns None. Additionally, it initializes a Flask app context and creates a database and its tables using SQLAlchemy. . D . 3di . . . 3dii . The first call checks if the user&#39;s score will be added to the table since they got the highest score possible. . The second call checks that the user&#39;s score does not get added since it is the user&#39;s lowest score. . 3diii . The user&#39;s score gets added to the &quot;highscores&quot; table in the first call, while the user&#39;s score does not get added to the &quot;highscores&quot; table in the second call .",
            "url": "https://manigggg18.github.io/manimani/cccppt",
            "relUrl": "/cccppt",
            "date": " • Feb 28, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Trimester 2 N@TM",
            "content": ". . . . . . 3D Animation: . The 3D animation pieces were impressive and captivating. One piece stood out to me as it portrayed a beautifully rendered donut and coffee cup (ah…memories). The attention to detail and lighting made it seem almost real. Another piece that caught my attention was another donut, but different. Overall, the 3D animation work was of high quality and showed the artists’ technical skills. . Drawing: . The drawing section had a wide variety of styles, from abstract to realistic. One piece that stood out to me had a brilliant use of light and shadow which added depth and dimension to the piece. Another piece that caught my eye was a colorful abstract piece that used a variety of mediums. The colors and shapes blended well together, creating a vibrant and eye-catching piece. Overall, the drawing section showcased the artists’ skill in a range of mediums and styles. . Programming: . The backend programming section had some interesting and innovative pieces on display. One project was a web application that allowed users to create and manage a personal task list. The application used a database to store the user’s information and allowed for easy communication between the front and backend. Another project was a platform that utilized RESTful API. The platform was designed with a modern and user-friendly interface that made it easy to navigate. Overall, the backend programming section demonstrated the artists’ proficiency in combining creativity with technical skills, specifically in developing efficient database structures and effective communication between the frontend and backend. .",
            "url": "https://manigggg18.github.io/manimani/tri2natm",
            "relUrl": "/tri2natm",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "5.5 and 5.6",
            "content": "5.5 . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . Key Points: . Grant of License: The license grants users a royalty-free, non-exclusive, non-transferable, worldwide license to use, reproduce, and distribute the software, subject to certain conditions. . | Modifications: Users are allowed to make modifications to the software, but must include a notice indicating that changes have been made to the original code. . | Redistribution: The license allows for the redistribution of the software, either in original or modified form, subject to certain conditions. For example, users must include a copy of the Apache License 2.0 and a notice indicating any changes made to the original code. . | Patent Protection: Contributors are required to grant a patent license to users of the software, which protects users from patent lawsuits related to the use of the software. . | Warranty Disclaimer: The Apache License 2.0 includes a disclaimer of warranty, stating that the software is provided “as is” without any warranty, express or implied. . | Limitation of Liability: The license includes a limitation of liability, stating that contributors and distributors are not liable for any damages arising from the use of the software. . | Termination: The license includes a termination clause, which allows the license to be terminated if a user breaches the terms of the license. . | Governing Law: The license specifies that the laws of the State of California govern the interpretation and enforcement of the license. . | . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . After reading this article, I realized the importance of complying with the terms of licenses and citing sources when using content, particularly in the context of digital rights management (DRM) software used by music and movie companies. The use of open-source software and creative commons licenses can enable innovation, but individuals and companies need to figure out business models to use these licenses in accordance with their terms. For example, Red Hat built a business model around selling support agreements for its free Linux distribution, and Qualcomm found success by mixing patent and GPL businesses, including Android in its business model. However, businesses need to generate income to survive and this requires engineers who can work with open-source software. . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. . For my personal license, I chose the Creative Commons Attribution 4.0 International (CC BY 4.0) license due to the fact that it is a short and permissive license that allows users to use, modify, and distribute the code as long as the original copyright and license notice is included. . This work is licensed under a Creative Commons Attribution 4.0 International License. . . . 5.6 . Describe PII you have seen on project in CompSci Principles. . I recall seeing a student accidentally showing very fragile details and information regarding GitHub accounts during a presentation. . What are your feelings about PII and your personal exposure? . I believe that it is extremely easy for organizations to expose the PII that we share when interacting with them (Ex: Registration). This can be done either intentionally or accidentally. . Describe good and bad passwords? What is another step that is used to assist in authentication. . In my opinion, a “good” password is one that has the following traits: . A phrase that a user has a personal relation to and can recall easily . | Inclusion of unique characters and irregular combination of inputs (for example, using numbers or symbols instead of letters) . | More than 10 characters . | A bad password is a password that is hard to remember, easy to guess, and fairly simple. . Methods such as biometric identification, two-factor identification, and security questions are necessary alternatives for security and privacy matters. . Try to describe Symmetric and Asymmetric encryption. . Symmetric encryption uses a single secret key to encrypt and decrypt data. In this method, both the sender and the receiver have access to the same key and use it to encrypt and decrypt the data. Asymmetric encryption uses a public key and a private key. The public key is used to encrypt the data, while the private key is used to decrypt the data. . Provide an example of encryption we used in AWS deployment. . I recall using an SSH key, which is an access credential for the SSH (secure shell) network protocol. This authenticated and encrypted secure network protocol is used for remote communication between machines on an unsecured open network. . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. . When I was younger and still unfamiliar with internet privacy and security, I used to download multiple third-party instagram apps to bypass certain features. At the time, I was very naive and I had no knowledge of Facebook’s data handling, which made it impossible to bypass these features. All of these third-party apps required registration and Instagram account information details such as passwords. To no surprise, my account was hacked in less than three days, and I was unable to gain control of it ever again. Although I am past trying such apps, I’ve had friends who have gone through similar experiences. .",
            "url": "https://manigggg18.github.io/manimani/fives3",
            "relUrl": "/fives3",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "5.3 and 5.4",
            "content": "5.3 . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . “Approximately 18% of the users were in the age group of 18 to 24. The 13 to 17 year old group was the smallest user group on Facebook with only 5% of users falling into this category. There was a slight majority of female users compared to male users.” . “In the U.S., TikTok has the largest user base among the age group of 10-19 with 32.5%, followed by 20-29 with 29.5%, 30-39 with 16.4%, 40-49 with 13.9%, and 50+ with 7.1%. This indicates that TikTok’s user demographic is becoming older.” . Since platforms like TikTok mostly consist of a younger audience, it makes it easier for businesses and corporations to efficiently influence young consumers. Same goes with Facebook if corporations intend to influence other age groups. This can be harmful sometimes, especially in this age where spreading misinformation is so easy. . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . I believe that this was intentional. A female voice might sound more appealing and comforting to most people, which would attract more consumers and encourage them to buy these products. This comes from the stereotype that women work in the retail and secretary business more often than men. The designers probably used female voices with this in mind. . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . Media has a significant impact on consumers’ daily lives. It can shape consumers’ beliefs and behaviors by providing information, entertainment, and advertisements. It can also influence the way consumers perceive ideas such as products. However, dangers created by media such as spreading misinformation and harmful material should also be accounted for. . . . 5.4 . Does the owner of the computer think this was intentional? . I believe he is jokingly saying that HP is racist. However, I don’t think he actually believes that. . If yes or no, justify you conclusion. . I am sure that the owner of the computer knows that this is a design/testing flaw. HP would not intentionally try to drive away its consumers. . How do you think this happened? . This happened to flaws in detection algorithms and lack of texting. Perhaps designers and developers at HP did not have this scenario in mind when creating their computers. . Is this harmful? Was it intended to be harmful or exclude? . It can be harmful, but it was not intentionally designed to be harmful. . Should it be corrected? . It should definitely be corrected and I think it already has been corrected. Its correction would attract more consumer groups. . What would you or should you do to produce a better outcome? . This can be corrected by having different consumer groups in mind when designing and developing products. This can be done using crowdsourcing. Crowdsourcing is the practice of turning to a body of people to obtain needed knowledge, goods or services. Throughout the last couple of years, many companies and corporations have started to design their products in a way that people with disabilities can use them with ease. . Write summary/thoughts/conclusions from each of the exercises above. Focus on avoiding Bias in algorithms or code you write. . While developing our website, I had a debate with one of my teammates over accounting for accessibility in creating our game and other features. I believed that we should avoid doing so for the sake of time and doing “easy work”. However, my teammate insisted that it would be a good idea. Thinking about it now, I agree with my teammate. Including different consumer groups helps with presenting products to the largest number of consumers efficiently and productively. It also “makes life easier” for all groups. .",
            "url": "https://manigggg18.github.io/manimani/fives2",
            "relUrl": "/fives2",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Trimester 2 MCQ Test Review/Corrections",
            "content": "Proof of Completion . . . . Q11 Circuit with two logic gates . The diagram below shows a circuit composed of two logic gates labeled OR and AND. Each gate takes two inputs and produces a single output. . . If the inputs A and C are both true, which of the following best describes the output of the AND gate? . My response: The output will be true if input B is true; otherwise it will be false. . Correct Response: The output will be true no matter what the value of input B is. . Explanation: Because the value of input A is true, the resulting value coming out of the OR gate must be true. Because the value of input C is true, the resulting value coming out of the AND gate is true. The value of input B did not affect this result. . . . Q13 old enough to drive but not to vote . In a certain country, a person must be at least 16 years old to drive a car and must be at least 18 years old to vote. The variable age represents the age of a person as an integer. . Which of the following expressions evaluates to true if the person is old enough to drive but not old enough to vote, and evaluates to false otherwise? . (age ≥ 16) AND (age ≤ 18) | (age ≥ 16) AND (NOT(age ≥ 18)) | (age &lt; 18) AND (NOT(age &lt; 16)) | My response: I and II only. . Correct Response: II and III only . . . Q25 Infinite repeat until loop . Consider the following code segment. . . Which of the following replacements for &lt; MISSING CONDITION &gt; will result in an infinite loop? . My response: j &gt; 7 . Correct Response: j = 6 . Explanation: Because the value of the variable j starts at 1 and increases by 2, the value of j will always be odd. Thus the value of j will never equal 6. If &lt; MISSING CONDITION &gt; is replaced with the expression j = 6, the expression will always evaluate to false, and the loop will never end. . . . Q30 use drawCircle to draw figure on a coordinate grid . Consider the following procedure. . . The drawCircle procedure is to be used to draw the following figure on a coordinate grid. . . Which of the following code segments can be used to draw the figure? Select two answers. . Correct response: . x ← 4 . y ← 1 . r ← 0 . REPEAT 3 TIMES . { . r ← r + 1 . y ← y + 1 . drawCircle(x, y, r) . } . AND . x ← 4 . y ← 4 . r ← 3 . REPEAT 3 TIMES . { . drawCircle(x, y, r) . y ← y - 1 . r ← r - 1 . } . . . Q39 Robot in maze procedure MoveAndTurn . The figure below shows a robot in a grid of squares. The robot is represented as a triangle, which is initially facing upward. The robot can move into a white or gray square but cannot move into a black region. . . Consider the procedure MoveAndTurn below. . . Which of the following code segments will move the robot to the gray square? . My response: Choice D has three boxes in a column. In choice D the top box reads MoveAndTurn, then 3,1 in a rectangle. The middle box reads MoveAndTurn, then 5, 3 in a rectangle. The bottom box reads MoveAndTurn, then 3, 0 in a rectangle. . Correct Response: Choice C has three boxes in a column. In choice C the top box reads MoveAndTurn, then 2,1 in a rectangle. The middle box reads MoveAndTurn, then 4, 3 in a rectangle. The bottom box reads MoveAndTurn, then 2, 0 in a rectangle. . Explanation: Because the value of the variable j starts at 1 and increases by 2, the value of j will always be odd. Thus the value of j will never equal 6. If &lt; MISSING CONDITION &gt; is replaced with the expression j = 6, the expression will always evaluate to false, and the loop will never end. . . . Q40 Random movements for a robot . The question below uses a robot in a grid of squares. The robot is represented as a triangle, which is initially in the center square of the grid and facing toward the top of the grid. . . The following code segment is used to move the robot within the grid. . . A gray square represents a possible final location of the robot after the code segment is executed. Which of the following represents all possible final locations for the robot? . My response: Each option shows a grid of squares with 5 rows and 5 columns. There is an upward-facing arrow representing a robot in the third square of row 3. The squares of the grid are as follows, from left to right and top to bottom: Row 1: white, white, gray, white, white. Row 2: white, white, gray, white, white. Row 3: gray, gray, white with robot facing upward, gray, gray. Row 4: white, white, gray, white, white. Row 5: white, white, gray, white, white. . Correct Response: Each option shows a grid of squares with 5 rows and 5 columns. There is an upward-facing arrow representing a robot in the third square of row 3. The squares of the grid are as follows, from left to right and top to bottom: Row 1: white, white, gray, white, white. Row 2: white, white, gray, white, white. Row 3: gray, gray, white with robot facing upward, gray, gray. Row 4: white, white, gray, white, white. Row 5: white, white, gray, white, white. . Explanation: The robot turns to the right one, two, or three times and then moves one or two squares forward. The possible final locations are to the right, below, or to the left of the starting position. . . . Q49 What problems can be solved with algorithms . Which of the following statements is true? . My response: Every problem can be solved with an algorithm for all possible inputs, but some of these algorithms have not been discovered yet. . Correct Response: Every problem can be solved with an algorithm for all possible inputs, but some of these algorithms have not been discovered yet. . Explanation: Every problem can be solved with an algorithm for all possible inputs, but some of these algorithms have not been discovered yet. .",
            "url": "https://manigggg18.github.io/manimani/tri2final",
            "relUrl": "/tri2final",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "5.1 and 5.2",
            "content": "Think of three beneficial effects of your projects based on 5.1 Unit . Developing problem-solving skills: . Building a website that features a card matching game and a leaderboard requires me to think through the logic and mechanics of the game, as well as the technical (and confusing) aspects of using API and database to store and display high scores. This can help me develop problem-solving skills that will be useful for solving future problems. . Gaining experience with web development . Building a website is a great way for me to gain experience with programming languages such as HTML, CSS, and JavaScript. This experience can be useful in future projects and maybe even careers. . Learning about APIs and databases . Incorporating an API and database into the website allows me to learn about how these Computer Science items work and how they can be used to store and retrieve data. This can help me understand API and Databases better. . Think of a potential harmful effect of your project. . Think of a potential harmful effect of your project. . The pressure to complete the project by a deadline can cause stress and anxiety for the me, especially since understanding backend material is very difficult. This can lead to burnout and sometimes even negatively impact my mental well-being. Also, If I’m is dedicating a significant amount of time to working on one project, it can limit the amount of time I have for other classes. . Answer with an opinion and learnings so far this year: What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . While blocking certain websites can help to prevent access to inappropriate or potentially harmful content (misinformation, not credible material, etc), it can can limit access to useful educational resources or information. There are some VERY helpful websites that students cannot access. Some of these websites contain information that can help students with efficiently managing their time and avoid browsing time-consuming and inefficient websites. Overall, I would say that these blockers have more cons than pros. As for admin password settings, I would say that lack of admin password can make it difficult for students to install necessary software or make personal adjustments to the machines. . What concerns do you have personally about the digital divide? For yourself or for others. . Regarding the digital divide and similar phenomena, one thing that keeps me up some nights is the fact there might be some very brilliant minds who do not have access to appropriate/effective materials such as laptops, access to the internet, and other technologies. Del Norte students do not have such problems. However, it is still quite upsetting and even heart-breaking that as human beings, we are unable to benefit from the talents of some brilliant minds. .",
            "url": "https://manigggg18.github.io/manimani/fives",
            "relUrl": "/fives",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "CPT Planning Blog",
            "content": "Start outline/write-up of materials required for CollegeBoard: . In order to submit my work for the “Create Performance Task” section of the “AP Computer Science Principles” exam, I will need to gather all necessary materials such as my written response, program code, and video demonstration. I will also need to ensure that my work adheres to the guidelines set by CollegeBoard in terms of format and content. Additionally, I will need to prepare an outline that clearly explains the different aspects of my project and how they align with the six scoring categories of the CPT. . . Describe portion of Project that will be used for “Create Performance task”: . The portion of my project that will be used for the “Create Performance Task” will be scoring feature. This also includes some functions of the leaderboard. The score that users receive will be stored and displayed on the learerboard. These elements will be demonstrated in the video and written portions of the CPT, and my code will be evaluated based on how it implements these features. . . Describe code plan as it is required for CollegeBoard: . The code plan for the “Create Performance Task” must meet the requirements of the six scoring categories outlined by CollegeBoard. This includes demonstrating input, program functionality, and output in the video, as well as providing program code segments that show the use of data abstraction, managing complexity, procedural abstraction, and algorithmic implementation. Additionally, the written response must include a detailed explanation of how the identified algorithm works and how it contributes to the overall functionality of the program. . . Consider what will be demonstrated in video, aka video plan: . In the video portion of the “Create Performance Task”, I will demonstrate the various features of the memory card game website, such as the registration and login process, the game play, and the leaderboard feature. Additionally, I will make sure that the video is well-produced and easy to follow, as this is also part of the evaluation criteria. . . . . For the “Program Purpose and Function” category, the video will demonstrate the running of the program, including input, program functionality, and output. In the video, I will be playing a round of the game and then I will show that my score has been sent to the leaderboard. The written response will describe the overall purpose of the program, and explain what functionality of the program is demonstrated in the video, as well as describe the input and output of the program demonstrated in the video. . For the “Data Abstraction” category, the written response will include the required code segments. The first will show how data is stored in a collection type, such as a list, and the second will show the data being used as part of fulfilling the program’s purpose. In the written response, I will identify the name of the variable representing the list being used and describe what the data contained in the list is representing in the program. For example, I will show how the program stores the player’s name and score in an array and how that data is used to update the leaderboard. . For the “Managing Complexity” category, I will explain how the selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. For example, I will show how the program uses a list to keep track of the cards that have been flipped and their positions, which allows the program to determine if the cards match and update the game state accordingly. . For the “Procedural Abstraction” category, I will explain a procedure with at least one parameter that has an effect on the functionality of the procedure, and the second will show where the procedure is being called. I will describe what the identified procedure does and how it contributes to the overall functionality of the program. For example, I will show how the program uses a procedure to check if the cards match and update the game state accordingly, which is called every time the user flips a card. . For the “Algorithm Implementation” category, I will explain in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. For example, I will show how the program uses an algorithm to shuffle the cards at the start of a new game, which involves iterating through the array of cards, selecting two random cards, and swapping their positions. . For the “Testing” category, I will describe the conditions being tested by each call to the procedure and identify the result of each call. For example, I will show how the program tests the procedure that checks if the cards match by calling it with different card combinations and verifying that the game state is updated correctly. . NOTE: THIS IS JUST AN OUTLINE AND I AM NOT GOING TO USE THIS AS MY FINAL PLAN. THIS IS ONLY A GUIDE. .",
            "url": "https://manigggg18.github.io/manimani/cptpl",
            "relUrl": "/cptpl",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "CPT Scoring Blog 3",
            "content": "Student 1 . Category My Score CB&#39;s Score Comments . Program Purpose and Function | 0 | 1 | The student does not demonstrate a thorough understanding of the program&#39;s purpose and functionality, providing only a basic explanation of the problem it aims to solve and how it solves it. | . Data Abstraction | 0 | 0 | The student&#39;s written response does not effectively demonstrate the use of data abstraction in the program by not providing clear examples of how data is stored and used, and not explaining the significance of the list in the program. | . Managing Complexity | 0 | 0 | The student&#39;s written response does not effectively demonstrate the use of managing complexity in the program by not providing a clear example of how a list is used to manage complexity and not clearly explaining its significance in the program. | . Procedural Abstraction | 0 | 0 | The student does not provide a clear description of what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implementation | 1 | 1 | The student provides a thorough and well-explained demonstration of algorithm implementation, including a clear code segment and detailed steps of how the algorithm works. | . Testing | 0 | 1 | The student&#39;s written response does not effectively demonstrate the use of testing in the program by not providing clear examples of different calls to the selected procedure and not describing the conditions and results of each test. | . . . Student 2 . Category My Score CB&#39;s Score Comments . Program Purpose and Function | 1 | 1 | The student effectively demonstrates the program&#39;s functionality in the video, clearly showing how the input is processed and the resulting output.&quot; | . Data Abstraction | 0 | 1 | The student does not demonstrate a strong understanding of data abstraction by not showing how data is stored and used in the program, and not describing the role of the list in the program. | . Managing Complexity | 1 | 1 | The student&#39;s written response effectively demonstrates the use of managing complexity in the program by providing a clear example of how a list is used to manage complexity and clearly explaining its significance in the program. | . Procedural Abstraction | 1 | 1 | The student&#39;s written response effectively demonstrates the use of procedural abstraction in the program by providing clear examples of a student-developed procedure and its usage, and explaining its significance in the program. | . Algorithm Implementation | 1 | 1 | The student provides a clear explanation of the algorithm in detailed steps, explaining how it works in enough detail that someone else could recreate it. | . Testing | 1 | 1 | The student provides a thorough and well-explained demonstration of testing, including clear descriptions of test cases, the conditions being tested, and the results of each call to the procedure. | . . . Student 3 . Category My Score CB&#39;s Score Comments . Program Purpose and Function | 1 | 1 | The student demonstrates a thorough understanding of the program&#39;s purpose and functionality, providing a detailed explanation of the input and output in the written response and in the video. | . Data Abstraction | 0 | 0 | The student does not clearly identify the name of the variable representing the list being used in the response and does not provide a detailed description of what the data contained in the list represents in the program. | . Managing Complexity | 0 | 0 | The student&#39;s written response does not effectively demonstrate the use of managing complexity in the program by not providing a clear example of how a list is used to manage complexity and not clearly explaining its significance in the program. | . Procedural Abstraction | 0 | 0 | The student does not provide a thorough and well-explained demonstration of procedural abstraction, missing key components such as code segments and an accurate description of the procedure&#39;s functionality and its contribution to the overall program. | . Algorithm Implementation | 0 | 0 | The student does not demonstrate a strong understanding of algorithm implementation by not providing a clear example of a student-developed algorithm that includes sequencing, selection, and iteration, and not effectively explaining how it works. | . Testing | 0 | 0 | The student does not identify the result of each call to the procedure, making it difficult to understand how the procedure behaves under different inputs. | . . . Student 4 . Category My Score CB&#39;s Score Comments . Program Purpose and Function | 1 | 1 | The student does an excellent job of explaining the program&#39;s purpose and functionality, providing a clear and concise description of the problem it aims to solve and how it solves it. | . Data Abstraction | 1 | 1 | The student&#39;s written response effectively demonstrates the use of data abstraction in the program by providing clear examples of how data is stored and used, and explaining the significance of the list in the program. | . Managing Complexity | 1 | 1 | The student provides a clear explanation of how the named, selected list manages complexity in the program code, by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1 | 1 | The student provides a thorough and well-explained demonstration of procedural abstraction, including clear code segments and an accurate description of the procedure&#39;s functionality and its contribution to the overall program. | . Algorithm Implementation | 1 | 1 | The student&#39;s written response effectively demonstrates the use of algorithm implementation in the program by providing a clear example of a student-developed algorithm and explaining its functionality in detailed steps. | . Testing | 1 | 0 | The student does not provide a thorough and well-explained demonstration of testing, missing key components such as clear descriptions of test cases, the conditions being tested, and the results of each call to the procedure. | . REFLECTION: I am starting to understand what CollegeBoard is mostly focused on. There is an emphasis on efficiency and not complicating stuff. I should also add that there is no need to grade 4 students every week, because to be perfectly honest, the only thing that helps in these assignments is reading the comments from CB. .",
            "url": "https://manigggg18.github.io/manimani/cbscoring3",
            "relUrl": "/cbscoring3",
            "date": " • Jan 20, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "CPT Scoring Blog 2",
            "content": "Student 1 . Category My Score CB&#39;s Score Comments . Program Purpose and Function | 1 | 0 | The program demonstrates a clear understanding of the problem and its constraints. | . Data Abstraction | 1 | 0 | The program demonstrates a deep understanding of data abstraction and effectively implements it to improve the program&#39;s functionality. | . Managing Complexity | 1 | 0 | The program demonstrates a decent understanding of managing complexity and effectively implements it to improve the program&#39;s functionality. | . Procedural Abstraction | 1 | 0 | The program demonstrates a deep understanding of procedural abstraction and effectively implements it to improve the program&#39;s functionality. | . Algorithm Implementation | 1 | 0 | The program demonstrates a deep understanding of algorithm implementation and effectively implements it to improve the program&#39;s functionality. | . Testing | 1 | 1 | The program demonstrates a clear understanding of testing and effectively implements it. | . . . Student 2 . Category My Score CB&#39;s Score Comments . Program Purpose and Function | 1 | 1 | The program demonstrates a clear understanding of the problem statement, and effectively addresses the problem with a comprehensive solution. | . Data Abstraction | 1 | 1 | The program effectively implements data structures and classes that are appropriately chosen for the task. | . Managing Complexity | 1 | 1 | The program effectively implements techniques to manage complexity and improve readability. | . Procedural Abstraction | 1 | 1 | The program effectively implements abstraction of procedures and functions to improve the program&#39;s functionality. | . Algorithm Implementation | 1 | 1 | The program effectively implements algorithms and computational principles to improve the program&#39;s functionality. | . Testing | 1 | 1 | The program effectively tests the solution and includes robust testing to handle different inputs. | . . . Student 3 . Category My Score CB&#39;s Score Comments . Program Purpose and Function | 0 | 0 | The program does not demonstrate a deep understanding of data abstraction and does not effectively implement it to improve the program&#39;s functionality. | . Data Abstraction | 0 | 1 | The student&#39;s solution is not well-implemented and the development process is poorly documented, making it difficult to understand how the solution addresses the problem. | . Managing Complexity | 0 | 1 | The program&#39;s organization and decomposition of the problem makes it difficult to understand and modify. | . Procedural Abstraction | 0 | 1 | The program does not demonstrate a deep understanding of procedural abstraction and does not effectively implement it to improve the program&#39;s functionality. | . Algorithm Implementation | 1 | 1 | The program effectively implements algorithms and computational principles to improve the program&#39;s functionality. | . Testing | 0 | 1 | The program does not demonstrate a deep understanding of testing and does not effectively implement it to improve the program&#39;s robustness. | . . . Student 4 . Category My Score CB&#39;s Score Comments . Program Purpose and Function | 1 | 1 | The program demonstrates a deep understanding of the problem and its constraints and effectively implements a solution that fully addresses the prompt. | . Data Abstraction | 0 | 0 | The program does not effectively implement data structures and classes that are appropriately chosen for the task. | . Managing Complexity | 1 | 0 | The program effectively decomposes the problem and organizes the solution in a logical and readable way. | . Procedural Abstraction | 0 | 1 | The program does not effectively implement abstraction of procedures and functions to improve the program&#39;s functionality. | . Algorithm Implementation | 0 | 1 | The program does not effectively implement algorithms and computational principles to improve the program&#39;s functionality. | . Testing | 1 | 0 | The program demonstrates a deep understanding of testing and effectively implements it to improve the program&#39;s robustness. | .",
            "url": "https://manigggg18.github.io/manimani/cbscoring2",
            "relUrl": "/cbscoring2",
            "date": " • Jan 15, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "CPT Progress Blog",
            "content": "Current Assignments: . Cards Game | . JSON/jQuery Notes for later . General . First, you’ll need to create an HTML table on your website where you want to display the scores. You can do this using standard HTML table elements, such as &lt;table&gt;, &lt;tr&gt;, and &lt;td&gt;. . | Next, you’ll need to retrieve the highest scores data from your backend system. This data is usually stored in a database, and you can use a server-side language (e.g., PHP, Python, Ruby) to query the database and retrieve the data. The server-side script should then encode the data in JSON format and return it to the client (your website). . | Once the data is returned to the client, you can use jQuery to parse the JSON data and display it on the HTML table. You can do this by making an AJAX (Asynchronous JavaScript and XML) request to the server-side script and using the $.getJSON method to retrieve the JSON data. . | Finally, you can use jQuery to append the data to the appropriate cells in the HTML table. You can use the .append() method to add the data as a new child element to the table cells. Method 1: . | Step 3 . Method 1 . To retrieve the JSON data from the server-side script, you can use an AJAX request. AJAX allows you to make requests to the server and update a specific part of the webpage without reloading the entire page. . Here’s an example of how you can make an AJAX request using jQuery: . $.ajax({ url: &#39;server-side-script.php&#39;, dataType: &#39;json&#39;, success: function(data) { // data contains the JSON data returned by the server } }); . Method 2 . You can also use the $.getJSON method, which is a shorthand for making an AJAX request and expecting a JSON response: . $.getJSON(&#39;server-side-script.php&#39;, function(data) { // data contains the JSON data returned by the server }); . In both examples, the server-side-script.php file is the server-side script that retrieves the data from the database and returns it in JSON format. . Step 4 . Once you have the JSON data, you can use jQuery to append it to the HTML table. Here’s an example of how you can do this: . $.getJSON(&#39;server-side-script.php&#39;, function(data) { // Iterate through the data and append it to the table $.each(data, function(index, item) { $(&#39;#table-body&#39;).append( &#39;&lt;tr&gt;&#39; + &#39;&lt;td&gt;&#39; + item.name + &#39;&lt;/td&gt;&#39; + &#39;&lt;td&gt;&#39; + item.score + &#39;&lt;/td&gt;&#39; + &#39;&lt;/tr&gt;&#39; ); }); }); . In this example, #table-body is the ID of the &lt;tbody&gt; element in the HTML table, and item.name and item.score are the name and score of the player, respectively. . Game Research . Logos: Github, Stack Overflow, Discord, VS Code, Amazon Servers, Fastpages, Python, HTML . . .",
            "url": "https://manigggg18.github.io/manimani/cptpr",
            "relUrl": "/cptpr",
            "date": " • Jan 15, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$ZY9...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$KZC...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$2zt...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$Dwu...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$joZ...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$ZY9...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$KZC...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$D29...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$Dwu...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$joZ...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$ZY9gsRDbwPh9EBrt$2e3a3eabea046371654a2c4009eef023c84cd4ab8fa8858961407621b332a24b&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$KZCJprQoMowyVPl1$3d35c968390d75d67a95ec59509d8f55a329830ce01d7d04768be99167c39ecd&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$D29GI132in0YhRYb$48a8ce19c118d1f5c6a6c34e06d75390035744a0a8b8fb13aef66754a91f3a01&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$DwukCfQlo69DgnaZ$f354972abf129a161017fc4c231647535cfa60a7a6480d268a5d84ad8c89e1e1&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$joZ5szT7gmxRVJji$51f683735b5e31154b5f656ca73dabf05b1e8f3f95147acfd0ee3b11fd2c2607&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$ZY9gsRDbwPh9EBrt$2e3a3eabea046371654a2c4009eef023c84cd4ab8fa8858961407621b332a24b&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$KZCJprQoMowyVPl1$3d35c968390d75d67a95ec59509d8f55a329830ce01d7d04768be99167c39ecd&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$D29GI132in0YhRYb$48a8ce19c118d1f5c6a6c34e06d75390035744a0a8b8fb13aef66754a91f3a01&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$DwukCfQlo69DgnaZ$f354972abf129a161017fc4c231647535cfa60a7a6480d268a5d84ad8c89e1e1&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$joZ5szT7gmxRVJji$51f683735b5e31154b5f656ca73dabf05b1e8f3f95147acfd0ee3b11fd2c2607&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . import json from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime from dateutil.parser import parse class User: def __init__(self, name, uid, password, classOf, dob, sq): self._name = name self._uid = uid self.set_password(password) self._classOf = classOf self._dob = dob self._sq = sq self._age = self.calculate_age() @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def uid(self): return self._uid @uid.setter def uid(self, uid): self._uid = uid def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; def set_password(self, password): self._password = generate_password_hash(password, method=&#39;sha256&#39;) def is_password(self, password): result = check_password_hash(self._password, password) return result @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf @property def dob(self): return self._dob @dob.setter def dob(self, dob): self._dob = dob self._age = self.calculate_age() @property def sq(self): return self._sq @sq.setter def sq(self, sq): self._sq = sq @property def age(self): return self._age def calculate_age(self): today = datetime.now() dob = parse(self._dob) age = today.year - dob.year - ((today.month, today.day) &lt; (dob.month, dob.day)) return age def __str__(self): return f&#39;name: &quot;{self.name}&quot;, uid: &quot;{self.uid}&quot;, classOf: &quot;{self.classOf}&quot;, dob: &quot;{self.dob}&quot;, sq: &quot;{self.sq}&quot;, age: &quot;{self.age}&quot;&#39; def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, classOf={self._classOf}, dob={self._dob}, sq: &quot;{self._sq}&quot;, password={self._password})&#39; def tester(users, uid, psw): result = None for user in users: if user.uid == uid and user.is_password(psw): print(&quot;* &quot;, end=&quot;&quot;) result = user print(str(user)) return result if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;James Bond&#39;, uid=&#39;jb&#39;, password=&#39;123jb&#39;, classOf=&#39;2023&#39;, dob=&#39;05/08/2005&#39;, sq=&#39;What was the name of your childhood imaginary friend and what was their favorite color?&#39;) u2 = User(name=&#39;Ethan Hunt&#39;, uid=&#39;eh&#39;, password=&#39;123eh&#39;, classOf=&#39;2023&#39;, dob=&#39;05/08/2005&#39;, sq=&#39;What was the last thing you googled before deciding to create this account?&#39;) u3 = User(name=&#39;John Wick&#39;, uid=&#39;jw&#39;, password=&#39;123jw&#39;, classOf=&#39;2023&#39;, dob=&#39;05/08/2005&#39;, sq=&#39;What is the name of the street you grew up on, but backwards and with the first letter capitalized?&#39;) u4 = User(name=&#39;Jason Bourne&#39;, uid=&#39;jb&#39;, password=&#39;123jb&#39;, classOf=&#39;2023&#39;, dob=&#39;05/08/2005&#39;, sq=&#39;What was your first pets name and what was the breed?&#39;) users = [u1, u2, u3, u4] print(&quot;Find user 3&quot;) u = tester(users, u3.uid, &quot;123jw&quot;) print(&quot;Update user 3 info&quot;) u.name = &quot;John Wick&quot; u.uid = &quot;jw&quot; u.classOf = &quot;2023&quot; u.sq = &quot;What is the name of the street you grew up on, but backwards and with the first letter capitalized?&quot; u.dob = &quot;05/08/2005&quot; u.set_password(&quot;123jw&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) . Find user 3 name: &#34;James Bond&#34;, uid: &#34;jb&#34;, classOf: &#34;2023&#34;, dob: &#34;05/08/2005&#34;, sq: &#34;What was the name of your childhood imaginary friend and what was their favorite color?&#34;, age: &#34;17&#34; name: &#34;Ethan Hunt&#34;, uid: &#34;eh&#34;, classOf: &#34;2023&#34;, dob: &#34;05/08/2005&#34;, sq: &#34;What was the last thing you googled before deciding to create this account?&#34;, age: &#34;17&#34; * name: &#34;John Wick&#34;, uid: &#34;jw&#34;, classOf: &#34;2023&#34;, dob: &#34;05/08/2005&#34;, sq: &#34;What is the name of the street you grew up on, but backwards and with the first letter capitalized?&#34;, age: &#34;17&#34; name: &#34;Jason Bourne&#34;, uid: &#34;jb&#34;, classOf: &#34;2023&#34;, dob: &#34;05/08/2005&#34;, sq: &#34;What was your first pets name and what was the breed?&#34;, age: &#34;17&#34; Update user 3 info name: &#34;James Bond&#34;, uid: &#34;jb&#34;, classOf: &#34;2023&#34;, dob: &#34;05/08/2005&#34;, sq: &#34;What was the name of your childhood imaginary friend and what was their favorite color?&#34;, age: &#34;17&#34; name: &#34;Ethan Hunt&#34;, uid: &#34;eh&#34;, classOf: &#34;2023&#34;, dob: &#34;05/08/2005&#34;, sq: &#34;What was the last thing you googled before deciding to create this account?&#34;, age: &#34;17&#34; name: &#34;John Wick&#34;, uid: &#34;jw&#34;, classOf: &#34;2023&#34;, dob: &#34;05/08/2005&#34;, sq: &#34;What is the name of the street you grew up on, but backwards and with the first letter capitalized?&#34;, age: &#34;17&#34; name: &#34;Jason Bourne&#34;, uid: &#34;jb&#34;, classOf: &#34;2023&#34;, dob: &#34;05/08/2005&#34;, sq: &#34;What was your first pets name and what was the breed?&#34;, age: &#34;17&#34; .",
            "url": "https://manigggg18.github.io/manimani/jupyter/2023/01/10/PBL-model.html",
            "relUrl": "/jupyter/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "CPT Scoring Blog",
            "content": "Student 1 . Category My Score CB&#39;s Score Comments . Program Purpose and Function | 0 | 0 | CollegeBoard clearly states that the video and the written response should state the program&#39;s purpose, not its functionality. The video is also extremely short and incomplete. | . Data Abstraction | 1 | 1 | All requirements are met. Code segments are provided and the specified material is further explored in the written response. The written response includes two clearly distinguishable program code segments, which are disjointed code segments or two parts of a contiguous code segment. | . Managing Complexity | 1 | 0 | It looks like the author completely explains how the task of managing complexity was accomplished by the usage of the documented database. However, apparently I&#39;m wrong. | . Procedural Abstraction | 1 | 1 | The procedure is clearly developed by the student and accurately explored. The student also describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implementation | 1 | 1 | The student provides an algorithm that includes sequencing, selection, and iteration. In addition, the student perfectly explains in great detail how the algorithm in the procedure works so it can be recreated.. | . Testing | 1 | 1 | The student adequately describes two calls to the selected procedure. As required by College Board, each call passes a different argument that naturally causes a different segment of code. | . . . Student 2 . Category My Score CB&#39;s Score Comments . Program Purpose and Function | 1 | 1 | The video completely shows thw functionality of the program. The written response also lacks any mistakes. It describes the input and the output; describes the functionality demonstrated in the video; and specifies the program’s purpose | . Data Abstraction | 1 | 1 | The student includes two program code segments. In addition, the code segments include &quot;comment&quot; portions. The student describes what the data contained in this list is representing in the program, in addition to identifying what is stored in the list. | . Managing Complexity | 1 | 1 | The student clearly explains how the named, selected list manages complexity in the program code. For instance, the response includes code that uses a list to manage complexity by accessing and storing the status (1 or 0) of 10,800 items. | . Procedural Abstraction | 1 | 1 | The written response perfectly describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implementation | 1 | 1 | The student accurately explains how the identified algorithm works, especially in a way that someone else would be able to recreate it. | . Testing | 1 | 1 | The student fully describes the conditions being tested by each call to the procedure. In addition, the student describes the results of the two calls, leading to two different results. | .",
            "url": "https://manigggg18.github.io/manimani/cbscoring",
            "relUrl": "/cbscoring",
            "date": " • Jan 5, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "Unit Notes and Homework (Day 9)",
            "content": "3.17: Algorithm Efficiency . Purpose: . The purpose of this lesson is to help students understand how to make an efficient program and optimize it and understand its importance to the CSP curriculum. . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm. | Another way is through space complexity. | . | . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever | . Describe the method used to solve the traveling merchant problem. (record below) . 3.18: Undecidable Problems . Purpose: . The purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important. . Key vocabulary: . Decision problem | Decidable problem | Undecidable problem | . Decision Problem . A decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. There are two types of decision problems that Collegeboard goes over: . Decidable Problems | Undecidable Problems | . A decidable problem is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. . An undecidable problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. . Decidable Problems . A decidable problem is an algorithm that can always have an output of yes or no given any input. It is always correct. . Example of a Decidable Problem . The procedure below tests to see if a number is divisible by 13. If it is, it returns true. If it isn&#39;t, it returns false. . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(2600000000000000000000000000000000000000000000000000)) print(divideThirteen(366699999999999999999999999999999999999999999999999999999999999999999999999999999999996)) . True True . Undecidable Problems . An Example of a Forever Running Code . The code keeps adding 1 to the variable number until number is no longer an integer(This is not the python data type &quot;integer&quot;, it&#39;s the integer in number theory). However, there is no end to this code, making the computer run forever. There is no halt to the code. . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. . Halting Problem Example: . In order to understand this, suppose that an algorithm was able to analyze whether a code halts or not. Let&#39;s call this algorithm HaltChecker. | HaltChecker analyzes the program,program P, and its input,input I. If program P halts with input I, HaltChecker returns an output of &quot;halts&quot;. If program P doesn&#39;t halt(runs forever) with input I, HaltChecker returns an output of &quot;never&quot;. For example, in the code where it tests if variable number, the code runs forever, so HaltChecker returns an output of &quot;never&quot;. | Then, we add another algorithm called Reverser which reverses HaltChecker&#39;s output. So, if &quot;never&quot; is the output of HaltChecker, then the output of Reverser is “halts”. It&#39;s also the same the other way around: if HaltChecker has an output of &quot;halts&quot;, then Reverser has an output of “never”. | We combine these algorithms into one entire body of code. | Since Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;never&quot; when in fact there is an end(As proved by HaltChecker), and how it also prints &quot;halts&quot; when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem. | . This Diagram Sums up the Entire Process in the Bulleted List: . Credits of diagram and example to Khan Academy . FAQ . Q: If Reverser is causing the problem, why not remove it? | A: Removing Reverser will remove the problems, however, we are looking for ways which create the problem of not outputting a correct result. One example is enough to prove that it is an undecidable problem since it proves that the code is not completely accurate. | . Extra Things to Notice . Note that while a computer may take a long time to run a section of code, it does not mean that the computer is going to run forever. | Humans are able to solve some undecidable problems. The entire Halting Problem example was to prove that computers cannot solve undecidable problems. | . Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . One situation in which a computer may run into an undecidable problem is when it is trying to determine whether a given program will run forever or eventually halt. This is known as the halting problem and it is considered an undecidable problem because it has been proven that there is no algorithm that can accurately determine the behavior of all possible programs. In other words, there are certain programs for which it is impossible to predict whether they will halt or run indefinitely. This means that in some cases, a computer may be unable to solve a problem because it is undecidable. . 3.17 Homework . Your homework for Algorithmic Efficiency is pretty simple. . Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! | Label the number of loops done as x and the time (microseconds) to find the index as y | Connect the points | Do the same thing with the 2nd code | Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) | Insert images of the graph either in your blog or on review ticket | . . import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 2222 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . Found element after 2222 loops in 110 microseconds Your number was found at 2221 . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 1 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . Element found after 13 loops in 9 microseconds . 0 . 3.18 Homework: . Decidable . def gcd(a, b): # if either number is 0, the GCD is the other number if a == 0: return b if b == 0: return a # keep finding the remainder of the larger number divided by the smaller # number until the smaller number is 0 while b != 0: temp = b b = a % b a = temp # the GCD is the last value of the larger number return a gcd(12840, 150) . 30 . Undecidable . import time # define a function that does not take in any arguments def iL(): # create a variable to keep track of the number of iterations i = 0 # create an infinite loop using the while True statement while True: # increment the number of iterations i += 1 # print the number of iterations print(i) # sleep for 1 second time.sleep(1) iL(7) .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson9",
            "relUrl": "/jupyter/lesson9",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Lesson 7 Hacks",
            "content": "Pandas: . Pandas is a popular Python library for working with data. It is designed to help people manipulate and analyze large datasets with ease. Pandas provides a set of powerful tools for working with data, including a fast and efficient DataFrame object for storing and manipulating data in a tabular format, and a range of tools for reading and writing data to and from different types of data sources. Pandas is particularly useful for working with tabular data, such as that found in spreadsheets or databases. It makes it easy to clean and process data, and to perform calculations and aggregations on large datasets. . Pandas is a great tool for data analysis and manipulation. It provides a number of useful features and functions that make it easy to work with data in Python. For example, pandas allows you to load data from a variety of sources, including CSV and Excel files, SQL databases, and other data sources. It also provides tools for cleaning and preprocessing data, such as handling missing values and converting data types. . Matplotlib: . Matplotlib is a popular Python library for creating beautiful and interactive visualizations of data. It is designed to help people explore and understand their data by providing a high-level, intuitive interface for creating a wide range of plots and charts. With Matplotlib, you can create scatter plots, line plots, bar charts, pie charts, histograms, and many other types of plots, as well as customize the appearance of your plots to make them more visually appealing and informative. Matplotlib is particularly useful for visualizing large and complex datasets, and for creating publication-quality graphics. . Matplotlib is a powerful tool for creating a wide range of visualizations in Python. It is designed to be flexible and easy to use, so you can create high-quality visualizations with just a few lines of code. With Matplotlib, you can customize almost every aspect of your plots, including the colors, the fonts, the axes, and the data points. You can also use it to create multiple subplots in a single figure, and to create interactive plots that allow you to zoom, pan, and explore your data in greater detail. .",
            "url": "https://manigggg18.github.io/manimani/lesson7h",
            "relUrl": "/lesson7h",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Unit Notes and Homework (Day 7)",
            "content": "Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . Hacks: . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: | pip3 install --upgrade pip | pip install numpy | | . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Polynomial function, f(x): 2 2 x + 1 Derivative, f(x)&#39;= 4 x When x=5 f(x)&#39;= 20 . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import random def Dice(n): sum = 0 while n &gt; 0: sum = sum + random.randint(1, 6) n = n - 1 return sum Dice(5) # Will output a sum of the 5 dice rolls . 16 . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | import random def grn(n): numbers = [] for i in range(n): numbers.append(random.randint(1, 101)) even = [] odd = [] for x in numbers: if x % 2 == 0: even.append(x) else: odd.append(x) return even, odd even , odd = grn(100) print(&quot;Odd:&quot; , *odd) print(&quot;Even:&quot; , *even) . Odd: 17 33 63 7 67 55 41 35 9 11 19 83 15 13 39 1 21 7 101 83 45 13 11 39 53 3 41 77 7 65 71 63 33 63 17 69 77 91 35 57 47 29 83 Even: 24 84 2 26 30 52 44 62 76 76 96 38 30 6 52 92 4 12 10 2 48 4 24 84 74 40 18 4 38 48 66 10 76 50 80 56 36 34 64 20 32 22 44 48 76 90 60 42 66 98 2 84 98 40 90 40 36 . import numpy as np # Define the polynomial poly = np.poly1d([2, 0, 0, 6, 24, 0]) # Calculate the derivative deriv = np.polyder(poly) # Print the derivative print(deriv) . 4 10 x + 12 x + 24 . import numpy as np # Define the polynomial poly = np.poly1d([6.5, 0, 2, 0, 0]) # Calculate the derivative deriv = np.polyder(poly) # Print the derivative print(deriv) # when x = 9 print(&quot;When x=9 f&#39;(x)=&quot;, deriv(9)) . 3 26 x + 4 x When x=9 f&#39;(x)= 18990.0 . import random # Create a list containing the names of the dogs and cats. For example: animals = [&#39;dog1&#39;, &#39;dog2&#39;, &#39;dog3&#39;, &#39;dog4&#39;, &#39;dog5&#39;, &#39;dog6&#39;, &#39;dog7&#39;, &#39;dog8&#39;, &#39;dog9&#39;, &#39;dog10&#39;, &#39;cat1&#39;, &#39;cat2&#39;, &#39;cat3&#39;, &#39;cat4&#39;, &#39;cat5&#39;, &#39;cat6&#39;, &#39;cat7&#39;, &#39;cat8&#39;, &#39;cat9&#39;, &#39;cat10&#39;] # Use the random.shuffle() function to shuffle the list of animals in place random.shuffle(animals) # Print the shuffled list of animals to see the new random order print(animals) # This will produce a random order for the dogs and cats . [&#39;cat10&#39;, &#39;dog8&#39;, &#39;cat6&#39;, &#39;cat7&#39;, &#39;dog9&#39;, &#39;dog1&#39;, &#39;cat4&#39;, &#39;cat2&#39;, &#39;dog3&#39;, &#39;dog4&#39;, &#39;dog10&#39;, &#39;dog2&#39;, &#39;cat3&#39;, &#39;cat9&#39;, &#39;cat8&#39;, &#39;cat5&#39;, &#39;dog7&#39;, &#39;cat1&#39;, &#39;dog6&#39;, &#39;dog5&#39;] .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson7",
            "relUrl": "/jupyter/lesson7",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Unit Notes and Homework (Day 8)",
            "content": "So, what is a simulation anyway? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations . | These can be used for games like dice rolling, spinners, etc . | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world . | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life . | . Big Question . Which of the following simulations could be the LEAST useful? . | A retailer trying to identify which products sold the most . | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . If you guessed a bike company, you&#39;re wrong, because the retail simulation was the right answer. Simulating robots in food service, sudying rain impact on vehicles, and new bike design can contribute a lot more to society in comparison to seeing what products sell more than others. | . Next Big Question . If you were making a simulation for making a new train station, which of the following would be true about this simulation? . It could reveal potential problems/safety issues before construction starts | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . Potential Saftey was the right answer, because you need somewhere to test the safety and ethicness of what you&#39;re about to do before you start building it. Otherwise, let&#39;s just say you&#39;ll have a special plaque for FBI&#39;s Most Wanted | . Simulation 1: . Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. . However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . It will take 1.0101525445522108 seconds for an object that weighs 4 pounds to fall 5.0 meters in a vacuum . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . 1.0999999999999999 5.928999999999999 . Simulation 2: . This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. . | How it works: we have multiple variables, if statements and equations under a while command in order to randomy generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. . | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane . | . (explain further) . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #rando movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stoper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . Simulations in the wild . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding . Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. . HW !!! . There are several video game engines that can use simulations created with Python. Some examples include the Unreal Engine, CryEngine, and the Panda3D game engine. Python can be used to create complex simulations for use in video games, and many game developers use it for this purpose. Some game engines even have built-in support for Python, making it easy to integrate Python simulations into your game. . Other examples include the popular Unreal Engine and Unity, as well as CryEngine and Godot. Python can be used to create game logic, AI, and other gameplay elements in these engines. It can also be used for scripting and automating tasks, such as building levels or performing analytics on game data. . Using Python to create simulations for video games has several advantages. Python is a high-level language, which means that it is easy to read and understand. This makes it a good choice for developing complex simulations that would be difficult to implement in a lower-level language. Additionally, Python has a large and active community of users, which means that there are many resources available to help developers create simulations using the language. . Overall, the use of Python for creating simulations in video games allows developers to create complex and realistic environments and scenarios in their games, enhancing the player experience. . . pos = 50 # The ball is initially 50 units above the ground vel = 10 # The ball is initially moving upwards at a velocity of 10 units/second # Define the acceleration due to gravity g = -9.8 # The acceleration due to gravity is 9.8 m/s^2 downwards # Define the timestep (the interval at which we will update the position of the ball) dt = 0.1 # We will update the position of the ball every 0.1 seconds # Define a variable to keep track of the time time = 0 # Define the main loop of the simulation while True: # Update the position of the ball using the formula: # pos = pos + vel * dt pos = pos + vel * dt # Update the velocity of the ball using the formula: # vel = vel + g * dt vel = vel + g * dt # If the ball hits the ground (if its position is less than or equal to 0), reverse its direction if pos &lt;= 0: vel = -vel # Increment the time by the timestep time = time + dt # Print the current position and velocity of the ball print(f&quot;Time: {time:.1f} s | Position: {pos:.1f} m | Velocity: {vel:.1f} m/s&quot;) # End the simulation after 5 seconds if time &gt;= 5: break . Time: 0.1 s | Position: 51.0 m | Velocity: 9.0 m/s Time: 0.2 s | Position: 51.9 m | Velocity: 8.0 m/s Time: 0.3 s | Position: 52.7 m | Velocity: 7.1 m/s Time: 0.4 s | Position: 53.4 m | Velocity: 6.1 m/s Time: 0.5 s | Position: 54.0 m | Velocity: 5.1 m/s Time: 0.6 s | Position: 54.5 m | Velocity: 4.1 m/s Time: 0.7 s | Position: 54.9 m | Velocity: 3.1 m/s Time: 0.8 s | Position: 55.3 m | Velocity: 2.2 m/s Time: 0.9 s | Position: 55.5 m | Velocity: 1.2 m/s Time: 1.0 s | Position: 55.6 m | Velocity: 0.2 m/s Time: 1.1 s | Position: 55.6 m | Velocity: -0.8 m/s Time: 1.2 s | Position: 55.5 m | Velocity: -1.8 m/s Time: 1.3 s | Position: 55.4 m | Velocity: -2.7 m/s Time: 1.4 s | Position: 55.1 m | Velocity: -3.7 m/s Time: 1.5 s | Position: 54.7 m | Velocity: -4.7 m/s Time: 1.6 s | Position: 54.2 m | Velocity: -5.7 m/s Time: 1.7 s | Position: 53.7 m | Velocity: -6.7 m/s Time: 1.8 s | Position: 53.0 m | Velocity: -7.6 m/s Time: 1.9 s | Position: 52.2 m | Velocity: -8.6 m/s Time: 2.0 s | Position: 51.4 m | Velocity: -9.6 m/s Time: 2.1 s | Position: 50.4 m | Velocity: -10.6 m/s Time: 2.2 s | Position: 49.4 m | Velocity: -11.6 m/s Time: 2.3 s | Position: 48.2 m | Velocity: -12.5 m/s Time: 2.4 s | Position: 47.0 m | Velocity: -13.5 m/s Time: 2.5 s | Position: 45.6 m | Velocity: -14.5 m/s Time: 2.6 s | Position: 44.1 m | Velocity: -15.5 m/s Time: 2.7 s | Position: 42.6 m | Velocity: -16.5 m/s Time: 2.8 s | Position: 41.0 m | Velocity: -17.4 m/s Time: 2.9 s | Position: 39.2 m | Velocity: -18.4 m/s Time: 3.0 s | Position: 37.4 m | Velocity: -19.4 m/s Time: 3.1 s | Position: 35.4 m | Velocity: -20.4 m/s Time: 3.2 s | Position: 33.4 m | Velocity: -21.4 m/s Time: 3.3 s | Position: 31.3 m | Velocity: -22.3 m/s Time: 3.4 s | Position: 29.0 m | Velocity: -23.3 m/s Time: 3.5 s | Position: 26.7 m | Velocity: -24.3 m/s Time: 3.6 s | Position: 24.3 m | Velocity: -25.3 m/s Time: 3.7 s | Position: 21.7 m | Velocity: -26.3 m/s Time: 3.8 s | Position: 19.1 m | Velocity: -27.2 m/s Time: 3.9 s | Position: 16.4 m | Velocity: -28.2 m/s Time: 4.0 s | Position: 13.6 m | Velocity: -29.2 m/s Time: 4.1 s | Position: 10.6 m | Velocity: -30.2 m/s Time: 4.2 s | Position: 7.6 m | Velocity: -31.2 m/s Time: 4.3 s | Position: 4.5 m | Velocity: -32.1 m/s Time: 4.4 s | Position: 1.3 m | Velocity: -33.1 m/s Time: 4.5 s | Position: -2.0 m | Velocity: 34.1 m/s Time: 4.6 s | Position: 1.4 m | Velocity: 33.1 m/s Time: 4.7 s | Position: 4.7 m | Velocity: 32.1 m/s Time: 4.8 s | Position: 7.9 m | Velocity: 31.2 m/s Time: 4.9 s | Position: 11.0 m | Velocity: 30.2 m/s Time: 5.0 s | Position: 14.0 m | Velocity: 29.2 m/s Time: 5.1 s | Position: 17.0 m | Velocity: 28.2 m/s .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson8",
            "relUrl": "/jupyter/lesson8",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Unit Notes and Homework (Day 6)",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(temperature): celsius = temperature - 32 celsius = celsius * 5 / 9 return celsius outsideTemp = input(&quot;What is the temperature Outside?&quot;) print(convertFahrenheit(int(outsideTemp))) . -14.444444444444445 . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . quizAvg = 74 currentSc = 35 totalPts = 40 def tempAvg(): tempAvg = currentSc / totalPts tempAvg = tempAvg * 100 if tempAvg &gt; quizAvg: quizAvg = tempAvg print(quizAvg) . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may abstract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . def capitalize_sentences(text): # Split text into a list of sentences sentences = text.split(&quot;. &quot;) # Create an empty list to store the capitalized sentences capitalized_sentences = [] # Iterate over the sentences for sentence in sentences: # Capitalize the first letter of the sentence capitalized_sentence = sentence.capitalize() # Add the capitalized sentence to the list capitalized_sentences.append(capitalized_sentence) # Join the list of capitalized sentences into a single string capitalized_text = &quot;. &quot;.join(capitalized_sentences) # Return the resulting string return capitalized_text text = &quot;hello world. testing the procedure. this is a sentence.&quot; capitalized_text = capitalize_sentences(text) print(capitalized_text) . Hello world. Testing the procedure. This is a sentence. .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson6",
            "relUrl": "/jupyter/lesson6",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Class Notes",
            "content": "Unit 2 . Bits . A bit (binary digit) is the smallest unit of data that a computer can process and store. A bit is always in one of two physical states, similar to an on/off light switch. The state is represented by a single binary value, usually a 0 or 1. . Bytes . In most computer systems, a byte is a unit of data that is eight binary digits long. A byte is the unit most computers use to represent a character such as a letter, number or typographic symbol. Each byte can hold a string of bits that need to be used in a larger unit for application purposes. . Hexadecimal / Nibbles . Hexadecimal is a numbering system with base 16. It can be used to represent large numbers with fewer digits. In this system there are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters -- A, B, C, D, E and F. . In computing and digital technology, a nibble is four consecutive binary digits or half of an 8-bit byte. When referring to a byte, it is either the first four bits or the last four bits, which is why a nibble is sometimes referred to as a half-byte. . Binary Numbers: . Unsigned Integer . Unsigned Integers (often called &quot;units&quot;) are just like integers (whole numbers) but have the property that they don&#39;t have a + or - sign associated with them. Thus they are always non-negative (zero or positive). We use uint&#39;s when we know the value we are counting will always be non-negative. . Signed Integer . A signed integer is a 32-bit datum that encodes an integer in the range [-2147483648 to 2147483647]. An unsigned integer is a 32-bit datum that encodes a nonnegative integer in the range [0 to 4294967295]. The signed integer is represented in twos complement notation. . Floating Point . A floating point number, is a positive or negative whole number with a decimal point. For example, 5.5, 0.25, and -103.342 are all floating point numbers, while 91, and 0 are not. Floating point numbers get their name from the way the decimal point can &quot;float&quot; to any position necessary. . Binary Data Abstractions: . Boolean . A data type that has one of two possible values which is intended to represent the two truth values of logic and Boolean algebra. . Unicode/ASCII . Unicode and ASCII are the most popular character encoding standards that are currently being used all over the world. Unicode is the universal character encoding used to process, store and facilitate the interchange of text data in any language while ASCII is used for the representation of text such as symbols, letters, digits, etc. in computers. . RGB . Colors in a computer program are represented by combining 3 &quot;pigments&quot;. These pigments are Red, Green, and Blue (which contrasts with the &quot;primary&quot; colors we are used to as a child). By combining some amount of Red, some amount of Green, and some amount of Blue, any (displayable) color can be achieved. . Variables . A variable is a value that can change, depending on conditions or on information passed to the program. Typically, a program consists of instruction s that tell the computer what to do and data that the program uses when it is running. . Data Types . A data type is a classification of data which tells the compiler or interpreter how the programmer intends to use the data. Most programming languages support various types of data, including integer, real, character or string, and Boolean. . Assignment Operators . Assignment operators are used to assign values to variables. . Lists . A list is a sequence of several variables, grouped together under a single name. Instead of writing a program with many variables x0 , x1 , x2 , … you can define a single variable x and access its members x[0] , x[1] , x[2] , etc. . 2D Lists . A 2D array in python is a two-dimensional data structure stored linearly in the memory. It means that it has two dimensions, the rows, and the columns, and thus it also represents a matrix. . Dictionaries . A dictionary is also called a hash, a map, a hashmap in different programming languages. The keys in a dictionary must be simple types (such as integers or strings) while the values can be of any type. Different languages enforce different type restrictions on keys and values in a dictionary. . Class . In object-oriented programming , a class is a template definition of the method s and variable s in a particular kind of object . Thus, an object is a specific instance of a class; it contains real values instead of variables. The class is one of the defining ideas of object-oriented programming. . Algorithms . A programming algorithm is a procedure or formula used for solving a problem. It is based on conducting a sequence of specified actions in which these actions describe how to do something, and your computer will do it exactly that way every time. An algorithm works by following a procedure, made up of inputs. . Sequence . In programming, sequence is a basic algorithm: A set of logical steps carried out in order. Computers need instructions in the form of an algorithm in order to complete a desired task, and this algorithm must have the correct order of steps, or sequence. . Selection . Selection is a programming construct where a section of code is run only if a condition is met. In programming, there are occasions when a decision needs to be made. Selection is the process of making a decision. The result of the decision determines which path the program will take next. . Iteration . In programming specifically, iterative refers to a sequence of instructions or code being repeated until a specific end result is achieved. Iterative development is sometimes called circular or evolutionary development. . Expressions . In programming language terminology, an “expression” is a combination of values and functions that are combined and interpreted by the compiler to create a new value, as opposed to a “statement” which is just a standalone unit of execution and doesn&#39;t return anything. . Comparison Operators . Comparison operators can compare numbers or strings and perform evaluations. Expressions that use comparison operators do not return a number value as do arithmetic expressions. Comparison expressions return either 1 , which represents true, or 0 , which represents false. . Truth Tables . A truth table is a display of the inputs to, and the output of a Boolean function organized as a table where each row gives one combination of input values and the corresponding value of the function. . Characters . The character in computer programming is an essential category of variable or constant that is defined and dealt with in code. . Strings . A string is traditionally a sequence of characters, either as a literal constant or as some kind of variable. The latter may allow its elements to be mutated and the length changed, or it may be fixed (after creation). . Length . It takes a string as a parameter and returns an integer as the length of that string. . Concatenation . Concatenation, in the context of programming, is the operation of joining two strings together. The term &quot;concatenation&quot; literally means to merge two things together. . Upper . The upper() method converts all lowercase characters in a string into uppercase characters and returns it. . Lower . The lower() method returns a string where all characters are lower case. Symbols and Numbers are ignored. . Traversing Strings . For strings this means that we would like to process one character at a time. Often we start at the beginning, select each character in turn, do something to it, and continue until the end. This pattern of processing is called a traversal. . Python If . If statements are logical blocks used within programming. They&#39;re conditional statements that tell a computer what to do with certain information. In other words, they let a program make &#39;decisions&#39; while it&#39;s running. They&#39;re comprised of a minimum of two parts, &#39;if&#39; and &#39;then&#39;. . Elif . In Python, elif is short for &quot;else if&quot; and is used when the first if statement isn&#39;t true, but you want to check for another condition. Meaning, if statements pair up with elif and else statements to perform a series of checks. . Else conditionals . Use if to specify a block of code to be executed, if a specified condition is true. Use else to specify a block of code to be executed, if the same condition is false. Use else if to specify a new condition to test, if the first condition is false. . Nested Selection Statements . Nested selection structures are used when more than one decision must be made before carrying out a task. Nesting is a programming activity, in which one program block is placed inside other program block of the same operation type. . Python For . A &quot;For&quot; Loop is used to repeat a specific block of code a known number of times. For example, if we want to check the grade of every student in the class, we loop from 1 to that number. When the number of times is not known before hand, we use a &quot;While&quot; loop. . While loops with Range . It can. You never change the value of x so it&#39;s always in the range. What does &quot;use a while loop on a range&quot; even mean? If it means &quot;iterate over the range&quot;, then the answer is &quot;because that&#39;s what for loops are for&quot;. . While loops with List . You can loop through the list items by using a while loop. Use the len() function to determine the length of the list, then start at 0 and loop your way through the list items by referring to their indexes. . Combining loops with conditionals to Break . Within the for loop, there is an if statement that presents the condition that if the variable number is equivalent to the integer 5, then the loop will break. Within the loop is also a print() statement that will execute with each iteration of the for loop until the loop breaks, since it is after the break statement. . Continue . Break statement stops the entire process of the loop. Continue statement only stops the current iteration of the loop. Break also terminates the remaining iterations. Continue doesn&#39;t terminate the next iterations; it resumes with the successive iterations. . Procedural Abstraction . Procedural abstraction is when we write code sections which are generalised by having variable parameters. The idea is that we have code which can cope with a variety of different situations, depending on how its parameters are set when it is called. . Python Def procedures . A Function is a series of Python statements begins by a def , followed by the function name and enclosed in parenthesis. A Function may or may not return a value. A Function procedure can take arguments (constants, variables, or expressions that are passed by a calling procedure). . Parameters . A parameter is a named variable passed into a function. Parameter variables are used to import arguments into functions. For example: function example(parameter) { console. . Return Values . A return is a value that a function returns to the calling script or function when it completes its task. A return value can be any one of the four variable types: handle, integer, object, or string. The type of value your function returns depends largely on the task it performs. . Code Examples . num1 = 15 num2 = 25 num3 = 42 num2 = num3 num3 = num1 num1 = num2 print(num1) print(num2) print(num3) . 42 42 15 . num2 += num1 print(num1) print(num2) print(str(num1)+ str(num2)) print(num1 + num2) . 42 84 4284 126 . colorsList=[&quot;pink&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;orange&quot;] print(colorsList) colorsList=[] # can be used if you want to create a list that can be filled with values later # copy of the list is made; the list isn&#39;t sorted in place def Reverse(lst): # defining variable: lst new_lst = lst[::-1] return new_lst lst = [&quot;pink&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;black&quot;] print(Reverse(lst)) # reverse 1st . [&#39;pink&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;orange&#39;] [&#39;black&#39;, &#39;blue&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;purple&#39;, &#39;green&#39;, &#39;pink&#39;] . questions = 3 correct = 0 # Use a dictionary for the questions quesList = [&quot;To be or not to be?&quot;, &quot;What&#39;s your name?&quot;, &quot;How was break?&quot;, &quot;Is this homework?&quot;] # Use a dictionary for the correct solutions soluList = [&quot;idk&quot;, &quot;mani&quot;, &quot;fine&quot;, &quot;yea&quot;] for i in quesList: print(i) value1 = input (&quot;Q1&quot;) value2 = input (&quot;Q2&quot;) value3 = input (&quot;Q3&quot;) value4 = input (&quot;Q4&quot;) for n in soluList: if value1 == n: correct += 1 for x in soluList: if value2 == x: correct += 1 for z in soluList: if value3 == z: correct += 1 for y in soluList: if value4 == y: correct += 1 print(&quot;Final score: &quot; + str(correct)) . To be or not to be? What&#39;s your name? How was break? Is this homework? Final score: 4 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 print(Result) . 0 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] index = 0 # change the value &quot;soccer&quot; to &quot;hockey&quot; sports.remove(sports[index]) sports.insert(0, &quot;hockey&quot;) print(sports) . [&#39;hockey&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] index = 0 inp = input().lower() def show_letters(inp): for letter in inp: for let in words: if letter == let[index]: print(let) show_letters(inp) . bravo alfa tango mike alfa november . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] def print_matrix3(matrix): for a in matrix: itr = iter(a) print(next(itr), next(itr), next(itr)) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . letters = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] letters_lower1 = [letter.lower() for letter in letters[1]] # additional lines of code for better capitalization letters_lower2 = [letter.lower() for letter in letters[2]] letters_lower3 = [letter.lower() for letter in letters[3]] print(letters[3][6] + letters_lower2[0] + letters_lower3[5] + letters_lower1[7]) print(letters[3][6] + letters_lower2[0] + letters_lower1[5]) print(letters[0][9] + letters[0][9]) . Mani May 18 . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and False) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . cost = 30 stat = 1 if stat &lt; 1: print(&quot;this product is no good&quot;) else: if cost &gt; 50 and stat == 1: print(&quot;this product is too expensive&quot;) else: if 50 &gt; cost &gt; 25 and stat == 1: print(&quot;this is a regular product&quot;) else: print(&quot;this is a cheap product&quot;) . this is a regular product . questions = { &quot;Which movie is a comedy?&quot;:[&quot;a. The King&#39;s Man&quot;,&quot;b. What&#39;s eating Gilbert Grape&quot;, &quot;c. About Time&quot;, &quot;d. Batman&quot;], &quot;Which movie features 50 Cent?&quot;:[&quot;a. Shaft&quot;, &quot;b. 8 Mile&quot;,&quot;c. Southpaw&quot;, &quot;d. Batman&quot;], &quot;Who is the best Batman?&quot;:[&quot;a. Christian Bale&quot;,&quot;b. Ben Affleck&quot;, &quot;c. Robert Pattinson&quot;, &quot;d. Kevin Conroy&quot;] } answers = { &quot;Which movie is a comedy?&quot;:&quot;c&quot;, &quot;Which movie features 50 Cent?&quot;:&quot;c&quot;, &quot;Who is the best Batman?&quot;:&quot;d&quot; } score = 0 print(&quot;Ready for a movie quiz?&quot;) for q,a in questions.items(): print(q) print(*a) inp = input(&quot;Enter Your Answer&quot;) if(answers.get(q)==inp): score = score +1 else: print(&quot;SYNTAX ERROR...jk try again&quot;) break print(&#39;Final Score:&#39;, score) . Ready for a movie quiz? Which movie is a comedy? a. The King&#39;s Man b. What&#39;s eating Gilbert Grape c. About Time d. Batman Which movie features 50 Cent? a. Shaft b. 8 Mile c. Southpaw d. Batman Who is the best Batman? a. Christian Bale b. Ben Affleck c. Robert Pattinson d. Kevin Conroy Final Score: 3 . import random # module for generating random item from a list nums = list(range(1, 21)) # list of numbers num1 = int(random.choice(nums)) # int takes the integer, random utilizes the module num2 = int(random.choice(nums)) # the three numbers are generated here num3 = int(random.choice(nums)) def end(): # procedure for endgame print(&quot;Okay I guess&quot;) rd = input(&quot;Are you ready? y/n&quot;) # useless prompt to initiate the game if rd == &quot;y&quot;: print(num1) print(&quot;continue?y/n&quot;) # basically a checkpoint cn = input() if cn == &quot;y&quot;: print(num2) print(&quot;continue?y/n&quot;) cn2 = input() if cn2 == &quot;y&quot;: print(num3) if num1 &gt; num2 and num1 &gt; num3: # checks if num1 is the greatest print(&quot;Your Score:&quot; , num1) else: if num2 &gt; num1 and num2 &gt; num3: # checks if num2 is the greatest print(&quot;Your Score:&quot; , num2) else: if num3 &gt; num1 and num3 &gt; num2: # checks if num3 is the greatest print(&quot;Your Score:&quot; , num3) else: end() else: end() else: end() . 4 continue?y/n 18 continue?y/n 8 Your Score: 18 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/nv",
            "relUrl": "/jupyter/nv",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Unit Notes and Homework (Day 5)",
            "content": "3.9 Part 1 . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . Lesson 1 | Defining Algorithms . What is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions! . Algorithms can be written in different ways and still accomplish the same tasks . | Algorithms that appear similar can yield different side effects or results. . | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) . | Different algorithms can be developed or use to solve the same problem. . | . Example 1 | What happens if we test the algorithm with different outputs? . The pseudocode above is translated to python for you. . Record what your outputs are when you enter 95 degrees F, does the algorithm yield the same result? . The conditional below is nested . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then 95, what do you notice? . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) if (temp &lt; 65): print(&quot;It is too cold outside!&quot;) # Input 54 and then Input 95, what do you notice? . NOW RECORD with another output . Record what your outputs are when you enter 54, does the algorithm yield the same result this time? . *Now use 95 as an input for the two code blocks above. . Even though an algorithm&#39;s code can look the same, you have to be careful, they can always yield different results. When constructing algorithms you want to make sure that your code corresponds with what you want as your output. You set the limit of your code and you decide what the code&#39;s output is. . Conditionals vs. Booleans . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . Exercise . Learning how to utilize conditionals and booleans are important for developing algorithms. Use this exercise to help you. . Can either Boolean expression on the right replace the conditional on the left? Assume isWeekday and isHoliday are Boolean variables. . *NOTE = you can edit the variables to check the conditions needed! . IsHoliday = False IsWeekday = True if IsHoliday: driveWork = True else: if IsWeekday: driveWork = True else: driveWork = False print(driveWork) . Logically thinking about conditionals and booleans . Now the problem may seem confusing, but the best way to develop an algorithm is to think about all the possible results that can be potentially be outputted. . So if IsHoliday is set to true, then driveWork is automatically equal to false and it does not matter what value of isWeekday is. This must mean that one of the conditionals must be NOT IsHoliday. . In the case that lets say IsHoliday is set to false, then the variable for weekday needs to be checked. If it&#39;s true then driveWork is true, if it&#39;s false then driveWork is false. This must mean that the other conditional isWeekday. . Combining both conditionals, you get option 2, which is not IsHoliday and IsWeekday. This is why option 2 is right! . Example 3 | Conditionals vs Booleans . The following algorithms are intended to sum the odd numbers from 1-9. Which algorithms work as intended? . Below, I have translated the block code into python, import this to your jupyter notebook and record the result. What do you notice? . First block . sum = 1 counter = 3 #iteration var = 0 while (var &lt; 4): #while the var is &lt;= 4, it executes those commands, once it exceeds it hits the else command sum = sum + counter counter = counter + 2 var = var + 1 # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms. else: print(sum) . Second block . sum = 0 counter = 9 #iteration while (counter &gt;= 1): sum = sum + counter counter = counter - 2 print(sum) . When we start our initializing left sum as 1 counter as 3 we had no iterations yet. Remember we&#39;re going to have to repeat this four times because the block code prompts us to repeat 4 times, so we iterate. So as we go through and follow what the block gives us. . So you see that the sum does work, it does sum up the odd numbers from 1-9 . Now lets look at the right block. . Sum is set to 0 Counter is set to 9 We must repeat until the counter &lt; 1 is true. . So we keep adding until -1, that is when the counter &lt; 1 is true, so we stop . So why is it important to understand that algorithms can be written in different ways and still accomplish the same task? . An algorithm is beautiful that way, just because you think of solving a problem differently, doesn&#39;t mean your wrong, . 3.9 Part 2 . Flowcharts . Flowcharts can help you visualize the functionality of an algorithm . | They are a good way to double check whether or not your algorithm is achieving its purpose . | . How To Set Up A Flowchart . label the start point . | Define any and all variables you may need . | Consider the first question you want the algorithm to ask . | Write what you want the algorithm to do if the answer to that question is yes (or true) . | Write what you want the algorithm to do if the answer to that question is no (or false) . Steps 3-5 are the steps to creating code that uses a process called selection (you can convert the question from step 3 to a conditional if-statement in code) | . | Write out all necessary steps for the algorithm to function properly . | You may want your algorithm to iterate some steps until a condition is met . You can write the steps that need to be repeated, then draw an arrow from the last step to a step above that contains a conditional statement | . | determine a way to reach the end goal | Selection vs. Iteration . Selection: . A process used in algorithms where a conditional if-statement leads to one of two outcomes . Outcome 1: if the conditional statement is true, something will happen . | Outcome 2: if the conditional statement is false, something else will happen . | . | . | Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied . Once the condition is satisfied, then an outcome is produced . | This can take the form of a for-loop, while-loop, and/or if-statement . | . | . | . Example A . Consider this situation: . You are shopping for your favorite food at your favorite supermarket . | You see that there is a sale on wheat products for 35% off . | There is another sale on produce for 20% off . | These sales are mutually exclusive . | Tax on all items is 8% . | . | Your TASK: . Create a flowchart for an algorithm that can be used to calculate the cost of your favorite item | . | . Example A Possible Solution (using Selection) . 3.9 Part 3 . For Algorithms How to combine and/or modify an existing algorithm. | . | . Benefits of combining algorithms can reduce development time, testing time, and simplify the identification of errors. | . | . Example in Class . Rules . step/rule 1: start with any positive integer | step/rule 2: if the preceding term is even; divide by 2 | step/rule 3: if the preceding term is odd; multiply by 3 and add 1 | step/rule 4: repeat steps until you arrive at 1 | fact: the sequence should ALWAYS end up at 1 if repeated. | . Algorithm to Start (Determining Whether a Number is Even or Odd) . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): print(&quot;the number is even&quot;) else: print(&quot;the number is odd&quot;) # Run this cell to see how it works . How can we modify this code to match our goal . Hint: uses arithmetic operations | Hint: look at the steps of the equation and try and modify it to fit them | Must display all numbers used in it | . Solution . Step 1 . steps/rules 2 &amp; 3. | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): varx == varx/2 # Change print to the function else: varx == varx * 3 + 1 # Change print to the function print(varx) . Step 2 . step/rule 4; here we add the loop | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) while varx != 1: if (varx %2 == 0): varx = varx/2 # Change print to the function else: varx = varx * 3 + 1 # Change print to the function print(varx) . Step 3 . Display all values throughout the algorithm | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) print(varx) while varx != 1: if (varx %2 == 0): varx = varx/2 print(varx) # add Display else: varx = varx * 3 + 1 print(varx) # add Display print(varx) # Final # Should be 1 every time . Takeaways . You can use code you&#39;ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Hacks . create another algorithm using a famous mathematical algorithm such as the &quot;collatz conjecture.&quot; and explain your steps in a post on a blog. | . 3.11 Binary Search . Goals/Objectives: . detirmine number of iterations required to find vlue in data set. | explain requirements for binary search | . What is Binary Search? . Binary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | . About Binary Search: . Binary Search Algorithm starts in the middle of a data set of numbers and eliminates half the data. This process reapeats until the desired value is found or until all elements have been eliminated. | In order to use binary search effectivly and properly, data must be stored in order | COLLEGE BOARD INDEX STARTS AT 1 NOT 0 | . Think about how you would you would try to find a certain number in this set. . One way would be to line up the numbers and count them individually untill you find the desired value. . When working with large data sets with lots of numbers, methods like these wont work . Instead, a Binary Search would be more effective. | . Here we can see the numbers are set in an increasing order. Setting numbers in an increasing or decreasing is needed for a binary search . Binary search is started with the middle number first Middle number is found by taking the higest index number plus the lowest and divided by two | . | Binary Search can be represented using a tree as shown below | . . Heres an easy way to put it: . binary search fidns the desired element by continuously chopping the search area in half | say the element you are looking for is &#39;f&#39; | . [a b c d e f g h] . We would start in the middle at element &#39;d&#39; | becuase our target is greater than d we will eliminate everything left of &#39;d&#39; including &#39;d&#39; (chopping it in half) . [e f g h] is what now remains . again we would &#39;chop in half&#39; | say we iterate through &#39;g&#39; and &#39;h&#39;, our desired element is still not found so we would eliminate &#39;g; and &#39;h&#39; and continue the process | . [e f] . now we are down to 2 elements | &#39;chopping in half&#39; will give us our desired element | . [f] . | . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 8 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . We have created a function called binary_search() function which takes two arguments - a list to be sorted and a number to be searched. . | We have declared two variables to store the lowest and highest values in the list. The lowest is assigned initial value to 0, the highest to len(list1) 1 and mid as 0. . | Next, we have declared the while loop with the condition that the lowest is equal and smaller than the highest. The while loop will iterate if the number has not been found yet. . | In the while loop, we find the mid value and compare the index value to the number we are searching for. . | If the value of the mid-index is smaller than n, we increase the mid value by 1 and assign it to the low. The search moves to the left side. . | Otherwise, if the value of mid index is larger than n, we decrease the mid value by 1 and assign it to the high. The search moves to the right side. . | If the n is equal to the mid value then return mid. . | This will happen until the low is equal and smaller than the high. . | If we reach at the end of the function, then the element is not present in the list. We return -1 to the calling function. . | . . Hacks . Using my example above and steps below, create your own iteration using binary search . Steps . Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | . Homework Assignment (DUE FRIDAY 12/09 BY 5:00 PM) . Consider this situation: . You&#39;re playing a short game using a random number generator from 1 to 20 . On each turn, a player will generate 3 random numbers . | They get to keep the highest number that they generate as their score . | . | . | . import random # module for generating random item from a list nums = list(range(1, 21)) # list of numbers num1 = int(random.choice(nums)) # int takes the integer, random utilizes the module num2 = int(random.choice(nums)) # the three numbers are generated here num3 = int(random.choice(nums)) def end(): # procedure for endgame print(&quot;Okay I guess&quot;) rd = input(&quot;Are you ready? y/n&quot;) # useless prompt to initiate the game if rd == &quot;y&quot;: print(num1) print(&quot;continue?y/n&quot;) # basically a checkpoint cn = input() if cn == &quot;y&quot;: print(num2) print(&quot;continue?y/n&quot;) cn2 = input() if cn2 == &quot;y&quot;: print(num3) if num1 &gt; num2 and num1 &gt; num3: # checks if num1 is the greatest print(&quot;Your Score:&quot; , num1) else: if num2 &gt; num1 and num2 &gt; num3: # checks if num2 is the greatest print(&quot;Your Score:&quot; , num2) else: if num3 &gt; num1 and num3 &gt; num2: # checks if num3 is the greatest print(&quot;Your Score:&quot; , num3) else: end() else: end() else: end() . 13 continue?y/n 5 continue?y/n 9 Your Score: 13 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson5",
            "relUrl": "/jupyter/lesson5",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Unit Notes and Homework (Day 3)",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | A few ways these operators could be used... | . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . def Average(lst): return sum(lst) / len(lst) lst = [90, 65, 60, 75, 95] average = Average(lst) print(&quot;Average of the list =&quot;, round(average, 2)) . Average of the list = 77.0 . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and False) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 100 num2 = 400 sum = num1 + num2 if sum == 200: print(&quot;yea 200&quot;) else: print(sum) . 500 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | Basics of a nested conditional: | Block Coding Visual of Nested Conditionals: | Example Psuedocode of Nested Conditional Statements | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time Decide which ones are false to skip and which ones are true to execute | . | . time = 3 score = 1000 lives = 5 if time &lt; 3 and score &gt; 1000: lives = lives + 3 else: if time &lt; 3 or score &gt; 1000: lives = lives + 1 else: lives = lives - 1 print(lives) . 4 . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . Output: Please come to retake up to a 90 next week at tutorial! . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Output: Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes! . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | meHours = 9 if 10 &gt; meHours &gt; 8: print(&quot;experienced with 90k&quot;) else: if 10 &lt; meHours: print(&quot;experienced with 150k&quot;) else: print(&quot;inexperienced with 50k&quot;) . inexperienced with 50k . Hacks Assignments: . cost = 30 stat = 1 if stat &lt; 1: print(&quot;this product is no good&quot;) else: if cost &gt; 50 and stat == 1: print(&quot;this product is too expensive&quot;) else: if 50 &gt; cost &gt; 25 and stat == 1: print(&quot;this is a regular product&quot;) else: print(&quot;this is a cheap product&quot;) . this is a regular product . questions = { &quot;Which movie is a comedy?&quot;:[&quot;a. The King&#39;s Man&quot;,&quot;b. What&#39;s eating Gilbert Grape&quot;, &quot;c. About Time&quot;, &quot;d. Batman&quot;], &quot;Which movie features 50 Cent?&quot;:[&quot;a. Shaft&quot;, &quot;b. 8 Mile&quot;,&quot;c. Southpaw&quot;, &quot;d. Batman&quot;], &quot;Who is the best Batman?&quot;:[&quot;a. Christian Bale&quot;,&quot;b. Ben Affleck&quot;, &quot;c. Robert Pattinson&quot;, &quot;d. Kevin Conroy&quot;] } answers = { &quot;Which movie is a comedy?&quot;:&quot;c&quot;, &quot;Which movie features 50 Cent?&quot;:&quot;c&quot;, &quot;Who is the best Batman?&quot;:&quot;d&quot; } score = 0 print(&quot;Ready for a movie quiz?&quot;) for q,a in questions.items(): print(q) print(*a) inp = input(&quot;Enter Your Answer&quot;) if(answers.get(q)==inp): score = score +1 else: print(&quot;SYNTAX ERROR...jk try again&quot;) break print(&#39;Final Score:&#39;, score) . Ready for a movie quiz? Which movie is a comedy? a. The King&#39;s Man b. What&#39;s eating Gilbert Grape c. About Time d. Batman Which movie features 50 Cent? a. Shaft b. 8 Mile c. Southpaw d. Batman SYNTAX ERROR...jk try again Final Score: 1 . questions = { &quot;Which movie is a comedy?&quot;:[&quot;a. The King&#39;s Man&quot;,&quot;b. What&#39;s eating Gilbert Grape&quot;, &quot;c. About Time&quot;, &quot;d. Batman&quot;], &quot;Which movie features 50 Cent?&quot;:[&quot;a. Shaft&quot;, &quot;b. 8 Mile&quot;,&quot;c. Southpaw&quot;, &quot;d. Batman&quot;], &quot;Who is the best Batman?&quot;:[&quot;a. Christian Bale&quot;,&quot;b. Ben Affleck&quot;, &quot;c. Robert Pattinson&quot;, &quot;d. Kevin Conroy&quot;] } answers = { &quot;Which movie is a comedy?&quot;:&quot;c&quot;, &quot;Which movie features 50 Cent?&quot;:&quot;c&quot;, &quot;Who is the best Batman?&quot;:&quot;d&quot; } score = 0 print(&quot;Ready for a movie quiz?&quot;) for q,a in questions.items(): print(q) print(*a) inp = input(&quot;Enter Your Answer&quot;) if(answers.get(q)==inp): score = score +1 else: print(&quot;SYNTAX ERROR...jk try again&quot;) break print(&#39;Final Score:&#39;, score) . Ready for a movie quiz? Which movie is a comedy? a. The King&#39;s Man b. What&#39;s eating Gilbert Grape c. About Time d. Batman Which movie features 50 Cent? a. Shaft b. 8 Mile c. Southpaw d. Batman Who is the best Batman? a. Christian Bale b. Ben Affleck c. Robert Pattinson d. Kevin Conroy Final Score: 3 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson3",
            "relUrl": "/jupyter/lesson3",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Unit Notes and Homework (Day 4)",
            "content": "Lists . What are lists? . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . List examples in Python, JavaScript, and Pseudocode. . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] print (fruits) . const fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;]; . fruits ← [apple, grape, strawberry] . Lists are just one of four collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) . grape . Methods in Lists . Method Definition Example . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] index = 0 # change the value &quot;soccer&quot; to &quot;hockey&quot; sports.remove(sports[index]) sports.insert(0, &quot;hockey&quot;) print(sports) . [&#39;hockey&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list sports.insert(2, &quot;golf&quot;) print(sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;golf&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? . Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension . Lists, tuples, dictionaries, and sets are iterable objects. They are the &#39;containers&#39; that store the data to iterate. . Each of these containers are able to iterate with the iter() command. . There are 2 types of iteration:definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met . Iterator? Iterable? Iteration? . When an object is iterable it can be used in an iteration . | When passed through the function iter() it returns an iterator . | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. . | . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? . | Loops take essentially what we did above and automates it, here are some examples. . | . Using the range() function . But wait, there&#39;s more . Need to save even more time? The above is useful for many occasions, but can get tedious fast, in this case, use range() . Else, elif, and break . For when 1 statement isn&#39;t enough . Else:when the condition does not meet, do statement()- Elif: when the condition does not meet, but meets another condition, do statement()&gt; Break:stop the loop . 2D Iteration . 2D Arrays . A 2D array is simply just a list of lists. The example below is technically correct but... Conventially 2D arrays are written like below. This is because 2D arrays are meant to be read in 2 dimensions (hence the name). Writing them like below makes them easier to visualize and understand. . HW . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] index = 0 inp = input().lower() def show_letters(inp): for letter in inp: for let in words: if letter == let[index]: print(let) show_letters(inp) # btw the input is batman . bravo alfa tango mike alfa november . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . def print_matrix3(matrix): for a in matrix: itr = iter(a) print(next(itr), next(itr), next(itr)) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . Alternatively, find a way to print the matrix using the iter() function you already learned. Or use both! . letters = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] letters_lower1 = [letter.lower() for letter in letters[1]] # additional lines of code for better capitalization letters_lower2 = [letter.lower() for letter in letters[2]] letters_lower3 = [letter.lower() for letter in letters[3]] print(letters[3][6] + letters_lower2[0] + letters_lower3[5] + letters_lower1[7]) print(letters[3][6] + letters_lower2[0] + letters_lower1[5]) print(letters[0][9] + letters[0][9]) . Mani May 18 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson4",
            "relUrl": "/jupyter/lesson4",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Unit Notes and Homework (Day 2)",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task.. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = subtring(Noun, 1, 7) yoda = concat(Adjective2, &quot; &quot;, Adjective, &quot; &quot;, abrev, &quot; &quot;,Verb, &quot;.&quot;) display[yoda] . Problem 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = concat(vote1, &quot; &quot;, vote2) display[votes] .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Unit Notes and Homework (Day 1)",
            "content": "3.1 &amp; 3.2 . link . Lesson . Variables . A variable is an abstraction inside a program that can hold a value. . It organizes data by labeling it with a descriptive name. . It consists of three parts: name, value, and type. . Using meaningful variables names helps with readability of program code and understanding of what values are represented by the variables. . Variables should not be specific. . Not too vague either. . Use 1-2 capitalized letters . No spaces . Types of data: . Integer: A number | Text/string: A word | Boolean: Data that determines if something is true or false | . A list of data can also be stored in variables. Why is that useful? . print/retrieve specific values in the list without creating a lot of variables | easily remove/add/change items into the list | . num1 = 5 num2 = 9 num1 = num2 print(num1) print(num2) . 9 9 . num1 = 15 num2 = 25 num3 = 42 num2 = num3 num3 = num1 num1 = num2 print(num1) print(num2) print(num3) . 42 42 15 . num2 += num1 print(num1) print(num2) print(str(num1)+ str(num2)) print(num1 + num2) . 42 84 4284 126 . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation . Variables and lists are primary tools in data abstraction . Provides a separation between the abstract properties of a data type and the concrete details of its representation . Lists &amp; Strings . List = ordered sequence of elements . Element = individual value in a list that is assigned to a unique index . Index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index . String = ordered sequence of characters (Letters, numbers, special characters) . Note: index starts at 1 for AP Exam, must be whole numbers, cannot be negative, and goes up to the number of elements in the list . Managing the Complexity of a Program through Data Abstraction . Data abstractions help manage complexity in programs by giving a collection of data a name without referencing the specific details of the representation . Developing a data abstraction to use in a program can result in a program that is easier to develop and maintain . Using Lists as Data Abstractions . What are Lists? . Allow for data abstraction . | Bundle variables together . | Store multiple elements . | Allows multiple related items to be treated as a single value . | Give one name to a set of memory cells . | Can keep adding elements to it as needed . | Can store elements as a single variable by using a list . | . 3 Types of List Operations . Assigning values to a list at certain indices . | Creating an empty list and assigning it to a variable . | Assigning a copy of one list to another list (setting one list equal to another list) . | colorsList=[&quot;pink&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;orange&quot;] print(colorsList) colorsList=[] # can be used if you want to create a list that can be filled with values later # copy of the list is made; the list isn&#39;t sorted in place def Reverse(lst): # defining variable: lst new_lst = lst[::-1] return new_lst lst = [&quot;pink&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;black&quot;] print(Reverse(lst)) # reverse 1st . color1=&quot;green&quot; color2=&quot;red&quot; color3=&quot;pink&quot; color4=&quot;purple&quot; color5=&quot;blue&quot; color6=&quot;brown&quot; print(color1) print(color2) print(color3) print(color4) print(color5) print(color6) # OR colorList=[&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] for i in colorList: print(i) . green red pink purple blue brown green red pink purple blue brown . Homework . questions = 3 correct = 0 # Use a dictionary for the questions quesList = [&quot;To be or not to be?&quot;, &quot;What&#39;s your name?&quot;, &quot;How was break?&quot;, &quot;Is this homework?&quot;] # Use a dictionary for the correct solutions soluList = [&quot;idk&quot;, &quot;mani&quot;, &quot;fine&quot;, &quot;yea&quot;] for i in quesList: print(i) value1 = input (&quot;Q1&quot;) value2 = input (&quot;Q2&quot;) value3 = input (&quot;Q3&quot;) value4 = input (&quot;Q4&quot;) for n in soluList: if value1 == n: correct += 1 for x in soluList: if value2 == x: correct += 1 for z in soluList: if value3 == z: correct += 1 for y in soluList: if value4 == y: correct += 1 print(&quot;Final score: &quot; + str(correct)) . To be or not to be? What&#39;s your name? How was break? Is this homework? Final score: 4 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/lesson1",
            "relUrl": "/jupyter/lesson1",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Section 3 Notes and Plans",
            "content": "Section 3 Video 3 Notes and Planning . Arithmetic Operations in Programming . Link to Video . Arithmetic operations exist in most programming languages. . Include: Subtraction, Addition, Multiplication, Division, Getting the Remainder . All operations are represented by symbols. . | Subtraction: “-“ . | Ex: a - b . | Addition: “+” . | Ex: a + b . | Multiplication: “*“ . | Ex: a * b . | Division: / . | Ex: a / b . | Getting the Remainder: MOD . | Ex: a MOD b | . In all of these scenarios, a/b can be an expression or just a simple number. . Just like how numbers can be assigned to variables, a set of operations involving different values and numbers can also be assigned to a variable . Ex: . num1 ← 20 . num2 ← num1 + 98 . num3 ← num2 * num1 + 8 / num2 . Arithmetic operations in programming are performed in the same order as operations in mathematics. For example, operations in parentheses should be done first. . Idea for Hacks . A series of challenges and problems in the form of a quiz including arithmetic operations and expressions. . Possible Options: Students will clone a fastpages repository in order to complete the given assignments and interact with different elements. . Link to planning issue .",
            "url": "https://manigggg18.github.io/manimani/lesson",
            "relUrl": "/lesson",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Binary",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | .",
            "url": "https://manigggg18.github.io/manimani/binary",
            "relUrl": "/binary",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Trimester 1 Final Corrections Blog",
            "content": "Trimester Final 1 Blog . . . . Q36 Store even numbers in evenList . Consider the following code segment, which is intended to store ten consecutive even integers, beginning with 2, in the list evenList. Assume that evenList is initially empty. . i ← 1 . REPEAT 10 TIMES . { . &lt; MISSING CODE &gt; . } . Which of the following can be used to replace &lt; MISSING CODE &gt; so that the code segment works as intended? . My Answer: . i ← i + 1 . APPEND(evenList, 2 * i) . Correct Answer: . APPEND(evenList, 2 * i) . i ← i + 1 . For the first iteration of the loop, twice the value of i, or 2, is appended to evenList, and then i is incremented to 2. For the second iteration of the loop, twice the value of i, or 4, is appended to the list, and then i is incremented to 3. This continues eight more times, appending the next eight even numbers to evenList. This code segment will generate the list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]. . . . Q39 Valid index for wordList . The list wordList contains a list of 10 string values. Which of the following is a valid index for the list? (4, 2.5, -2, “hello”) . My Answer: “hello” . Correct Answer: 4 . While the list elements are strings, the indices of a list are typically nonnegative integers. . . . Q42 Value of sum after IF ELSE IF . What is the value of sum after the code segment is executed? . . My Answer: 12 . Correct Answer: 16 . The first three statements assign values to the variables. Since num1 &lt; num2 evaluates to false, the body of the ELSE block is executed and num3 is assigned the value 4. Since num2 ≥ num3 evaluates to true, the body of the second IF block is executed and num1 is assigned the value 8. Lastly, sum is assigned the value of 8 + 4 + 4, or 16. . . . Q43 Value of x after REPEAT UNTIL block . What is the value of result after the code segment is executed? . . My Answer: 6 . Correct Answer: 15 . The variables x and result are initialized to 0. Inside the loop, result is increased by x and x is increased by 1. The loop terminates when x exceeds 5. Therefore, result is assigned the sum of the integers from 0 to 5, or 15. . . . Q48 Which variables are equal to 50 after assignments . Consider the following code segment. . x ← 25 . y ← 50 . z ← 75 . x ← y . y ← z . z ← x . Which of the variables have the value 50 after executing the code segment? . My Answer: z y and z . Correct Answer: x and z . The first three statements assign values to the variables. The fourth statement assigns the value of y (which is 50) to x. The fifth statement assigns the value of z (which is 75) to y. The sixth statement assigns the value of x (which is 50) to z. Therefore, x and z both have the value 50. . . . Q50 Use concat and prefix to form initials . Consider the following procedures for string manipulation. . Procedure Call Explanation . concat(str1, str2) | Returns a single string consisting of str1 followed by str2. For example, concat(&quot;key&quot;, &quot;board&quot;) returns &quot;keyboard&quot;. | . prefix(str, length) | Returns the first length characters of str or str if length is greater than the number of characters in str. For example, prefix(&quot;delivery&quot;, 3) returns &quot;del&quot; and prefix(&quot;delivery&quot;, 100) returns &quot;delivery&quot;. | . The variable initials is to be assigned a string consisting of the first letter of the string firstName followed by the first letter of the string lastName. Which of the following assigns the correct string to initials ? . My Answer: . initials ← prefix(concat(firstName, lastName), 2) . Correct Answer: . initials ← concat(prefix(firstName, 1), prefix(lastName, 1)) . This statement will correctly form the initials. It uses calls to prefix to obtain the first letters of each name, then uses a call to concat to concatenate the two letters in the correct order. .",
            "url": "https://manigggg18.github.io/manimani/tri1final",
            "relUrl": "/tri1final",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "N@tM Blog",
            "content": "Night at the Museum Blog . 1. GPA Calculator (For College Students, Includes Preference Options) . . . . 2. NBA/Sports Data API (API Dedicated to Recording NBA Stats) . . . . 3. Programming Flashcards and Quiz (Made by CSA students) . . . Lawnmowers Arcade Fastpages . . . . . .",
            "url": "https://manigggg18.github.io/manimani/natmblog",
            "relUrl": "/natmblog",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Fetch of Backend Songs",
            "content": "| JavaScript | Table | API | Songs | . Song banger not banger .",
            "url": "https://manigggg18.github.io/manimani/songs",
            "relUrl": "/songs",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Python Web API Endpoints using Songs",
            "content": "import random songs_data = [] song_list = [ &quot;Jeff Russo, Noah Hawley - Burning Down the House&quot;, &quot;Radiohead - Everything in Its Right Place&quot;, &quot;UNKLE - Lonely Souls&quot;, &quot;Kendrick Lamar - Sing About Me, I&#39;m Dying of Thirst&quot;, &quot;The Verve - One Day&quot;, &quot;Thom Yorke - Analyze&quot;, &quot;Atoms for Peace - Reverse Running&quot;, &quot;Portishead - The Rip&quot;, &quot;Nick Drake - Riverman&quot;, &quot;The Doors - The End&quot;, &quot;The Police - Synchronicity II&quot;, &quot;Incubus - Quicksand&quot;, &#39;Black Angels - Black Grease&#39; ] def initSongs(): item_id = 0 for item in song_list: songs_data.append({&quot;id&quot;: item_id, &quot;song&quot;: item, &quot;banger&quot;: 0, &quot;not banger&quot;: 0}) item_id += 1 for i in range(200): id = getRandomSong()[&#39;id&#39;] addSongBanger(id) for i in range(50): id = getRandomSong()[&#39;id&#39;] addSongNot(id) def getSongs(): return(songs_data) def getSong(id): return(songs_data[id]) def getRandomSong(): return(random.choice(songs_data)) def favoriteSong(): best = 0 bestID = -1 for song in getSongs(): if song[&#39;banger&#39;] &gt; best: best = song[&#39;banger&#39;] bestID = song[&#39;id&#39;] return songs_data[bestID] def jeeredSong(): worst = 0 worstID = -1 for song in getSongs(): if song[&#39;not banger&#39;] &gt; worst: worst = song[&#39;not banger&#39;] worstID = song[&#39;id&#39;] return songs_data[worstID] def addSongBanger(id): songs_data[id][&#39;banger&#39;] = songs_data[id][&#39;banger&#39;] + 1 return songs_data[id][&#39;banger&#39;] def addSongNot(id): songs_data[id][&#39;not banger&#39;] = songs_data[id][&#39;not banger&#39;] + 1 return songs_data[id][&#39;not banger&#39;] def printSong(song): print(song[&#39;id&#39;], song[&#39;song&#39;], &quot; n&quot;, &quot;banger:&quot;, song[&#39;banger&#39;], &quot; n&quot;, &quot;not banger:&quot;, song[&#39;not banger&#39;], &quot; n&quot;) def countSongs(): return len(songs_data) if __name__ == &quot;__main__&quot;: initSongs() best = favoriteSong() print(&quot;Most liked&quot;, best[&#39;banger&#39;]) printSong(best) worst = jeeredSong() print(&quot;Most jeered&quot;, worst[&#39;not banger&#39;]) printSong(worst) print(&quot;Random song&quot;) printSong(getRandomSong()) print(&quot;Songs Count: &quot; + str(countSongs())) . Most liked 24 2 UNKLE - Lonely Souls banger: 24 not banger: 2 Most jeered 6 8 Nick Drake - Riverman banger: 16 not banger: 6 Random song 9 The Doors - The End banger: 11 not banger: 3 Songs Count: 13 . from flask import Blueprint, jsonify from flask_restful import Api, Resource import requests import random app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/songs&#39;) api = Api(app_api) class SongsAPI: class _Create(Resource): def post(self, song): pass class _Read(Resource): def get(self): return jsonify(getSongs()) class _ReadID(Resource): def get(self, id): return jsonify(getSong(id)) class _ReadRandom(Resource): def get(self): return jsonify(getRandomSong()) class _ReadCount(Resource): def get(self): count = countSongs() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) class _UpdateLike(Resource): def put(self, id): addSongBanger(id) return jsonify(getSong(id)) class _UpdateJeer(Resource): def put(self, id): addSongNot(id) return jsonify(getSong(id)) api.add_resource(_Create, &#39;/create/&lt;string:song&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . server = &#39;https://flask.maniflpt.com/&#39; url = server + &quot;api/songs/&quot; responses = [] count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] num = str(random.randint(0, count-1)) responses.append( requests.get(url+num) ) responses.append( requests.put(url+&quot;like/&quot;+num) ) responses.append( requests.put(url+&quot;jeer/&quot;+num) ) responses.append( requests.get(url+&quot;random&quot;) ) for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) . gaierror Traceback (most recent call last) File ~/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:174, in HTTPConnection._new_conn(self) 173 try: --&gt; 174 conn = connection.create_connection( 175 (self._dns_host, self.port), self.timeout, **extra_kw 176 ) 178 except SocketTimeout: File ~/anaconda3/lib/python3.9/site-packages/urllib3/util/connection.py:72, in create_connection(address, timeout, source_address, socket_options) 68 return six.raise_from( 69 LocationParseError(u&#34;&#39;%s&#39;, label empty or too long&#34; % host), None 70 ) &gt; 72 for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM): 73 af, socktype, proto, canonname, sa = res File ~/anaconda3/lib/python3.9/socket.py:954, in getaddrinfo(host, port, family, type, proto, flags) 953 addrlist = [] --&gt; 954 for res in _socket.getaddrinfo(host, port, family, type, proto, flags): 955 af, socktype, proto, canonname, sa = res gaierror: [Errno -2] Name or service not known During handling of the above exception, another exception occurred: NewConnectionError Traceback (most recent call last) File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:703, in HTTPConnectionPool.urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 702 # Make the request on the httplib connection object. --&gt; 703 httplib_response = self._make_request( 704 conn, 705 method, 706 url, 707 timeout=timeout_obj, 708 body=body, 709 headers=headers, 710 chunked=chunked, 711 ) 713 # If we&#39;re going to release the connection in ``finally:``, then 714 # the response doesn&#39;t need to know about the connection. Otherwise 715 # it will also try to release it and we&#39;ll have a double-release 716 # mess. File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:386, in HTTPConnectionPool._make_request(self, conn, method, url, timeout, chunked, **httplib_request_kw) 385 try: --&gt; 386 self._validate_conn(conn) 387 except (SocketTimeout, BaseSSLError) as e: 388 # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout. File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:1040, in HTTPSConnectionPool._validate_conn(self, conn) 1039 if not getattr(conn, &#34;sock&#34;, None): # AppEngine might not have `.sock` -&gt; 1040 conn.connect() 1042 if not conn.is_verified: File ~/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:358, in HTTPSConnection.connect(self) 356 def connect(self): 357 # Add certificate verification --&gt; 358 self.sock = conn = self._new_conn() 359 hostname = self.host File ~/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:186, in HTTPConnection._new_conn(self) 185 except SocketError as e: --&gt; 186 raise NewConnectionError( 187 self, &#34;Failed to establish a new connection: %s&#34; % e 188 ) 190 return conn NewConnectionError: &lt;urllib3.connection.HTTPSConnection object at 0x7f7dbd302cd0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known During handling of the above exception, another exception occurred: MaxRetryError Traceback (most recent call last) File ~/anaconda3/lib/python3.9/site-packages/requests/adapters.py:440, in HTTPAdapter.send(self, request, stream, timeout, verify, cert, proxies) 439 if not chunked: --&gt; 440 resp = conn.urlopen( 441 method=request.method, 442 url=url, 443 body=request.body, 444 headers=request.headers, 445 redirect=False, 446 assert_same_host=False, 447 preload_content=False, 448 decode_content=False, 449 retries=self.max_retries, 450 timeout=timeout 451 ) 453 # Send the request. 454 else: File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:785, in HTTPConnectionPool.urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 783 e = ProtocolError(&#34;Connection aborted.&#34;, e) --&gt; 785 retries = retries.increment( 786 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2] 787 ) 788 retries.sleep() File ~/anaconda3/lib/python3.9/site-packages/urllib3/util/retry.py:592, in Retry.increment(self, method, url, response, error, _pool, _stacktrace) 591 if new_retry.is_exhausted(): --&gt; 592 raise MaxRetryError(_pool, url, error or ResponseError(cause)) 594 log.debug(&#34;Incremented Retry for (url=&#39;%s&#39;): %r&#34;, url, new_retry) MaxRetryError: HTTPSConnectionPool(host=&#39;flask.maniflpt.com&#39;, port=443): Max retries exceeded with url: /api/songs/count (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPSConnection object at 0x7f7dbd302cd0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known&#39;)) During handling of the above exception, another exception occurred: ConnectionError Traceback (most recent call last) /mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb Cell 4 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; url = server + &#34;api/songs/&#34; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; responses = [] -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; count_response = requests.get(url+&#34;count&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; count_json = count_response.json() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/tmani/vscode/manimani/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; count = count_json[&#39;count&#39;] File ~/anaconda3/lib/python3.9/site-packages/requests/api.py:75, in get(url, params, **kwargs) 64 def get(url, params=None, **kwargs): 65 r&#34;&#34;&#34;Sends a GET request. 66 67 :param url: URL for the new :class:`Request` object. (...) 72 :rtype: requests.Response 73 &#34;&#34;&#34; &gt; 75 return request(&#39;get&#39;, url, params=params, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/requests/api.py:61, in request(method, url, **kwargs) 57 # By using the &#39;with&#39; statement we are sure the session is closed, thus we 58 # avoid leaving sockets open which can trigger a ResourceWarning in some 59 # cases, and look like a memory leak in others. 60 with sessions.Session() as session: &gt; 61 return session.request(method=method, url=url, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/requests/sessions.py:529, in Session.request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json) 524 send_kwargs = { 525 &#39;timeout&#39;: timeout, 526 &#39;allow_redirects&#39;: allow_redirects, 527 } 528 send_kwargs.update(settings) --&gt; 529 resp = self.send(prep, **send_kwargs) 531 return resp File ~/anaconda3/lib/python3.9/site-packages/requests/sessions.py:645, in Session.send(self, request, **kwargs) 642 start = preferred_clock() 644 # Send the request --&gt; 645 r = adapter.send(request, **kwargs) 647 # Total elapsed time of the request (approximately) 648 elapsed = preferred_clock() - start File ~/anaconda3/lib/python3.9/site-packages/requests/adapters.py:519, in HTTPAdapter.send(self, request, stream, timeout, verify, cert, proxies) 515 if isinstance(e.reason, _SSLError): 516 # This branch is for urllib3 v1.22 and later. 517 raise SSLError(e, request=request) --&gt; 519 raise ConnectionError(e, request=request) 521 except ClosedPoolError as e: 522 raise ConnectionError(e, request=request) ConnectionError: HTTPSConnectionPool(host=&#39;flask.maniflpt.com&#39;, port=443): Max retries exceeded with url: /api/songs/count (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPSConnection object at 0x7f7dbd302cd0&gt;: Failed to establish a new connection: [Errno -2] Name or service not known&#39;)) .",
            "url": "https://manigggg18.github.io/manimani/webapi",
            "relUrl": "/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Javascript Web Page using an API",
            "content": "&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Song&lt;/th&gt; &lt;th&gt;Banger&lt;/th&gt; &lt;th&gt;Not Banger&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;/tbody&gt; &lt;/table&gt; . evalmachine.&lt;anonymous&gt;:1 &lt;table&gt; ^ SyntaxError: Unexpected token &lt; at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . const resultContainer = document.getElementById(&quot;result&quot;); const BANGER = &quot;banger&quot;; const NOT = &quot;not banger&quot;; const url = &quot;https://flask.maniflpt.com/api/jokes&quot;; const like_url = url + &quot;/like/&quot;; const jeer_url = url + &quot;/jeer/&quot;; const options = { method: &#39;GET&#39;, mode: &#39;cors&#39;, cache: &#39;default&#39;, credentials: &#39;omit&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, }; const put_options = {...options, method: &#39;PUT&#39;}; . evalmachine.&lt;anonymous&gt;:20 const put_options = {...options, method: &#39;PUT&#39;}; ^^^ SyntaxError: Unexpected token ... at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . fetch(url, options) .then(response =&gt; { if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } response.json().then(data =&gt; { console.log(data); for (const row of data) { const tr = document.createElement(&quot;tr&quot;); const song = document.createElement(&quot;td&quot;); song.innerHTML = row.id + &quot;. &quot; + row.song; const banger = document.createElement(&quot;td&quot;); const banger = document.createElement(&#39;button&#39;); banger_but.id = BANGER+row.id banger_but.innerHTML = row.banger; banger_but.onclick = function () { reaction(BANGER, like_url+row.id, banger_but.id); }; banger.appendChild(banger_but); const not = document.createElement(&quot;td&quot;); const not_but = document.createElement(&#39;button&#39;); not_but.id = NOT+row.id not_but.innerHTML = row.not; not_but.onclick = function () { reaction(NOT, jeer_url+row.id, not_but.id); }; boohoo.appendChild(not_but); tr.appendChild(song); tr.appendChild(banger); tr.appendChild(not); resultContainer.appendChild(tr); } }) }) .catch(err =&gt; { error(err + &quot; &quot; + url); }); . evalmachine.&lt;anonymous&gt;:1 fetch(url, options) ^ ReferenceError: fetch is not defined at evalmachine.&lt;anonymous&gt;:1:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . function reaction(type, put_url, elemID) { fetch(put_url, put_options) .then(response =&gt; { if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; } response.json().then(data =&gt; { console.log(data); if (type === BANGER) document.getElementById(elemID).innerHTML = data.banger; else if (type === NOT) document.getElementById(elemID).innerHTML = data.not; else error(&quot;unknown type: &quot; + type); }) }) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } function error(err) { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); } .",
            "url": "https://manigggg18.github.io/manimani/webfrontend",
            "relUrl": "/webfrontend",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "AP 4.1 Quiz Blog",
            "content": "AP Quiz Completion Proof . Internet is a more difficult topic than the previous AP topics, but the College Board videos help with providing a basic understanding. . . . . Questions . 4.1 (2/3) . . Q1 (Correct): Which of the following best explains how messages are typically transmitted over the Internet? . The message is broken into packets that are transmitted in a specified order. Each packet must be received in the order it was sent for the message to be correctly reassembled by the recipient’s device. . | The message is broken into packets. The packets can be received in any order and still be reassembled by the recipient’s device. . | The message is broken into two packets. One packet contains the data to be transmitted and the other packet contains metadata for routing the data to the recipient’s device. . | The message is transmitted as a single file and received in whole by the recipient’s device. . | . Answer: The message is broken into packets. The packets can be received in any order and still be reassembled by the recipient’s device. . Messages are broken into packets. Each packet contains data to be transmitted, as well as metadata for routing and reassembling the data upon receipt. This allows the packets to be received in any order and still be reassembled correctly. . . Q2 (Incorrect): Which of the following is a primary reason for the use of open protocols on the Internet? . Open protocols allow devices to specify how data packets are to be routed on the Internet in advance. . | Open protocols ensure that all data transmission on the Internet is kept secure. . | Open protocols ensure that all Internet users are provided connections with equal bandwidth. . | Open protocols provide a way to standardize data transmission between different devices. . | . My Answer : Open protocols allow devices to specify how data packets are to be routed on the Internet in advance. . Routing on the Internet is usually dynamic; it is not specified in advance. . Correct Answer: Open protocols provide a way to standardize data transmission between different devices. . Protocols are agreed-upon sets of rules that specify the behavior of a system. Protocols used on the Internet enable devices from different manufacturers to communicate in a standard way. . . Q3 (Correct): Which of the following best describes the relationship between the World Wide Web and the Internet? . The World Wide Web is a protocol that is accessed using a data stream called the Internet. . | The World Wide Web is a system of linked pages, programs, and files that is accessed using a data stream called the Internet. . | The World Wide Web is a system of linked pages, programs, and files that is accessed via a network called the Internet. . | The World Wide Web is a Web site that is accessed using a protocol called the Internet. . | . Answer: The World Wide Web is a system of linked pages, programs, and files that is accessed via a network called the Internet. . The Internet is an interconnected network of networks, and the World Wide Web is an information system that is accessed via the Internet. . . . Click here to access additional resources for Collaboration, Program Function/Purpose, and Program Design/Development. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/10/14/apblog3.html",
            "relUrl": "/markdown/2022/10/14/apblog3.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Identifying Errors",
            "content": "Example #1 . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . Using a While Loop to Get the Intended Outcome . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter b is the 2 letter in the alphabet . Using a For Loop to Get the Intended Outcome . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter b is the 2 letter in the alphabet . Evens: While Loop . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . Odds: While Loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . Evens: For Loop . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . Odds For Loop . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . Simultaneous Usage of For Loop and While Loop for Lists . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge Completion . I decided to add more items in order to create a wider options for using the second item (drinks). After successfully fixing the code I decided to add a calculation function to accept more than one item. The code segment now adds the drink (msg) value and the meal (item) value to calculate the total cost of the order. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;coke&quot;: 0.99, &quot;sprite&quot;: 0.99, &quot;devious drink&quot;: 0.01, &quot;jake from statefarm&quot;: 2999.99} total = 0 # shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) while total == 0: # item 1: meal (item) item = input(&quot;What would you like to order?&quot;) print(&quot;Meal:&quot;, item.lower()) for k,v in menu.items(): if item.lower() == k: print(&quot;Price: $&quot;, menu[item.lower()]) total = 1 # item 2: drink (msg) msg = input(&quot;Would you like to order drinks?&quot;) print(&quot;Drink:&quot;, msg.lower()) for k,v in menu.items(): if msg.lower() == k: print(&quot;Price: $&quot;, menu[msg.lower()]) total = 1 # calculating the total print(&quot;Total:&quot;, menu[item.lower()] + menu[msg.lower()]) # final message print(&quot;Thank you for stopping by! Have a nice day!&quot;) . Menu burger $3.99 fries $1.99 coke $0.99 sprite $0.99 devious drink $0.01 jake from statefarm $2999.99 Meal: jake from statefarm Price: $ 2999.99 Drink: devious drink Price: $ 0.01 Total: 3000.0 Thank you for stopping by! Have a nice day! .",
            "url": "https://manigggg18.github.io/manimani/jupyter/errors",
            "relUrl": "/jupyter/errors",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "AP 1.4 Quiz Blog",
            "content": "AP Quiz Completion Proof . Same as the previous blog. I did my best, but I did not reach my intended results. As always, I’m still learning and there’s much room for improvement. . . . . Questions . 1.4 (2/3) . . Q1 (Correct): In the following code segment, score and penalty are initially positive integers. The code segment is intended to reduce the value of score by penalty. However, if doing so would cause score to be negative, score should be assigned the value 0. For example, if score is 20 and penalty is 5, the code segment should set score to 15. If score is 20 and penalty is 30, score should be set to 0. The code segment does not work as intended. . Line 1: IF(score - penalty &lt; 0) . Line 2: { . Line 3: score ← score - penalty . Line 4: } . Line 5: ELSE . Line 6: { . Line 7: score ← 0 . Line 8: } . Which of the following changes can be made so that the code segment works as intended? . Answer: Interchaning lines 3 and 7. . Interchanging lines 3 and 7 ensures that if reducing score by penalty results in a negative value, score is set to 0. Otherwise, score is reduced by penalty. . . Q2 (Incorrect): The following procedure is intended to return true if the list of numbers myList contains only positive numbers and is intended to return false otherwise. The procedure does not work as intended. . PROCEDURE allPositive(myList) . { . index ← 1 . len ← LENGTH(myList) . REPEAT len TIMES . { . IF(myList[index] &gt; 0) . { . RETURN(true) . } . index ← index + 1 . } . RETURN(false) . } . My Answer : [1, 2, 3] . The procedure begins to traverse the list and immediately encounters the positive value 1. At this point, the procedure returns true as intended for this list. . Correct Answer: [-1, 0, 1] . The procedure traverses this list and eventually encounters the positive value 1. At this point, the procedure returns true when it should return false because the list does not contain only positive values. . . Q3 (Correct): A homework assignment consists of 10 questions. The assignment is graded as follows. . . Let numCorrect represent the number of correct answers for a particular student. The following code segment is intended to display the appropriate grade based on numCorrect. The code segment does not work as intended in all cases. . . For which of the following values of numCorrect does the code segment NOT display the intended grade? . Answer(s): 8: When numCorrect is 8, the condition numCorrect &gt; 7 evaluates to true and the condition numCorrect ≥ 9 evaluates to false. Therefore “check minus” is displayed instead of the intended “check plus”. . 6: When numCorrect is 6, the condition numCorrect &gt; 7 evaluates to false. Therefore “check” is displayed instead of the intended “check minus”. . . . Click here to access additional resources for Collaboration, Program Function/Purpose, and Program Design/Development. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/10/08/apblog2.html",
            "relUrl": "/markdown/2022/10/08/apblog2.html",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "AWS Development",
            "content": "Curl Output . . . . Curl Html2text Output . . . Git Status, Docker Compose, Docker . .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/10/04/aws.html",
            "relUrl": "/markdown/2022/10/04/aws.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Python RapidAPI",
            "content": "| JavaScript | Table | API | Songs | . . API Usage and Organization: Radio Stations (France) . import requests url = &quot;https://radio-world-50-000-radios-stations.p.rapidapi.com/v1/radios/getTopByCountry&quot; querystring = {&quot;query&quot;:&quot;fr&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;24662782b6msh7d95c7667aea623p12c71ajsnc0aa91d82aa9&quot;, &quot;X-RapidAPI-Host&quot;: &quot;radio-world-50-000-radios-stations.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # printing organized data stats = response.json().get(&#39;radios&#39;) # data file type/name for stat in stats: # list: stat in stats if stat[&quot;channel_id&quot;] == 7751: for key, value in stat.items(): print(key, value) . image_url https://mypromotions.sfo2.cdn.digitaloceanspaces.com/radios/7751.jpg name France Info uri https://icecast.radiofrance.fr/franceinfo-midfi.mp3 channel_id 7751 countryCode fr genre News,Talk . Alternate Query (US) . import requests url = &quot;https://radio-world-50-000-radios-stations.p.rapidapi.com/v1/radios/getTopByCountry&quot; querystring = {&quot;query&quot;:&quot;us&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f5bcc1b7damsh9cd6eb2e03d6591p14cf1djsn33097094485f&quot;, &quot;X-RapidAPI-Host&quot;: &quot;radio-world-50-000-radios-stations.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # printing organized data stats = response.json().get(&#39;radios&#39;) # data file type/name for stat in stats: # list: stat in stats if stat[&quot;channel_id&quot;] == 58039: for key, value in stat.items(): print(key, value) . image_url https://mypromotions.sfo2.cdn.digitaloceanspaces.com/radios/58039.jpg name FOX News Radio uri https://streaming-ent.shoutcast.com/foxnews channel_id 58039 countryCode us genre News,Talk .",
            "url": "https://manigggg18.github.io/manimani/rapidapi",
            "relUrl": "/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "AP 1.1-1.3 Quiz Blog",
            "content": "AP Quiz Completion Proof . I’m nowhere near satisfied with my test results, but I believe tha every mistake is a step toward success. Therefore I’m going to record my mistakes and my key takeaways. . . . . Mistakes . 1.1 (2/3) . . Q3: A company that develops mobile applications wants to involve users in the software development process. Which of the following best explains the benefit in having users participate? . My Response: Users can provide documentation for program code at the end of the software development process. . Users are unlikely to have the expertise needed to understand and provide documentation for program code. . Correct Response: Users can provide feedback that can be used to incorporate a variety of perspectives into the software. . . . 1.2 (3/6) . . Q1: Consider the following code segment. . . Which of the following best describes the behavior of the code segment? . My Response: The code segment displays the value of 2(5×3) by initializing result to 2 and then multiplying result by 5 a total of three times. . Initializing result to 2 and multiplying it by 5 a total of three times yields 2(53), not 2(5×3). . Correct Response: The code segment displays the value of 2(53) by initializing result to 2 and then multiplying result by 5 a total of three times. . . Q5: A student wrote the following code segment, which displays true if the list myList contains any duplicate values and displays false otherwise. . . The code segment compares pairs of list elements, setting containsDuplicates to true if any two elements are found to be equal in value. Which of the following best describes the behavior of how pairs of elements are compared? . My Response: The code segment iterates through myList, comparing each element to the element that immediately follows it in the list. . The inner loop iterates from index j + 1 to the end of the list, so each element is compared with the all elements that follow it, not just the one element that immediately follows it. . Correct Response: The code segment iterates through myList, comparing each element to all subsequent elements in the list. . . Q6: A student is creating an application that allows customers to order food for delivery from a local restaurant. Which of the following is LEAST likely to be an input provided by a customer using the application? . My Response: The name of a food item to be included in the delivery . The name of a food item is input that needs to be provided by the customer in order for the order to be completed. . Correct Response: The cost of a food item currently available for order . . . 1.3 (2/3) . . Q1: In the following procedure, the parameter max is a positive integer. . PROCEDURE printNums(max) . { . ` count ← 1` . ` REPEAT UNTIL(count &gt; max)` . ` {` . ` DISPLAY(count)` . ` count ← count + 2` . ` }` . } . Which of the following is the most appropriate documentation to appear with the printNums procedure? . My Response: Prints all positive odd integers that are greater than max. . The loop terminates when count exceeds max, so only values less than or equal to max are printed. . Correct Response: Prints all positive odd integers that are less than or equal to max. . . . Click here to access additional resources for Collaboration, Program Function/Purpose, and Program Design/Development. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/28/apblog.html",
            "relUrl": "/markdown/2022/09/28/apblog.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Java Table",
            "content": "| JavaScript | Table | API | Songs | . . Table . The cell containing previous definitions and functions is hidden in order to create a more organized blog. . Full code can be found here. . Medias.prototype._toHtml = function() { // inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 5px solid blue;&quot; + &quot;box-shadow: 1em 1em 1em red;&quot; ); var body = &quot;&quot;; // Heading body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Name&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Creator&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Date&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Type&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array for (var row of catalog.medias) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.cre + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.date + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.type + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( // div, table, table body &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(catalog._toHtml()); // receives parameter of defined HTML fragment . NameCreatorDateType . Kid A | Radiohead | 2000 | Album | Whiplash | Damien Chazelle | 2014 | Movie | Atonement | Joe Wright | 2007 | Movie | Prestige | Christopher Nolan | 2006 | Movie | Fargo | Noah Hawley | 2014 | Show | Daredevil | Kati Johnson | 2015 | Show | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://manigggg18.github.io/manimani/jupyter/java_table",
            "relUrl": "/jupyter/java_table",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Java (IPYNB)",
            "content": "| JavaScript | Table | API | Songs | . . Single Function: Product Return . const factorial = function fac(n) { // calls a function which performs a calculation and returns the result return n &lt; 2 ? 1 : n * fac(n - 1); } console.log(factorial(7)) . 5040 . Set of Functions and Definitions: JSON Lists and Prototypes . function printInfo(msg) { // Necessary definition console.log(typeof msg + &quot;;&quot;, msg); } function Media(name, cre, date) { // Define media this.name = name; this.cre = cre; this.date = date; this.type = &quot;&quot;; } Media.prototype.setType = function(type) { // Introduce prototype this.type = type; } Media.prototype.toJSON = function() { // organize const data = {name: this.name, cre: this.cre, date: this.date, type: this.type}; const jsonString = JSON.stringify(data); return jsonString; } var album = new Media(&quot;Kid A&quot;, &quot;Radiohead&quot;, 2000); // song variable album.setType(&quot;Album&quot;); var movie = [ // movie variables new Media(&quot;Whiplash&quot;, &quot;Damien Chazelle&quot;, 2014), new Media(&quot;Atonement&quot;, &quot;Joe Wright&quot;, 2007), new Media(&quot;Prestige&quot;, &quot;Christopher Nolan&quot;, 2006) ] var show = [ // show variables new Media(&quot;Fargo&quot;, &quot;Noah Hawley&quot;, 2014), new Media(&quot;Daredevil&quot;, &quot;Kati Johnson&quot;, 2015), ] function Medias(album, movie, show) { album.setType(&quot;Album&quot;); this.album = album; this.medias = [album]; this.movie = movie; this.show = show; this.movie.forEach(movie =&gt; {movie.setType(&quot;Movie&quot;); this.medias.push(movie);}); this.show.forEach(show =&gt; {show.setType(&quot;Show&quot;); this.medias.push(show);}); this.jsonMedias = []; this.medias.forEach(media =&gt; this.jsonMedias.push(media.toJSON())); } catalog = new Medias(album, movie, show); printInfo(catalog.medias); printInfo(catalog.medias[4].name); printInfo(catalog.jsonMedias[4]); printInfo(JSON.parse(catalog.jsonMedias[4])); . object; [ Media { name: &#39;Kid A&#39;, cre: &#39;Radiohead&#39;, date: 2000, type: &#39;Album&#39; }, Media { name: &#39;Whiplash&#39;, cre: &#39;Damien Chazelle&#39;, date: 2014, type: &#39;Movie&#39; }, Media { name: &#39;Atonement&#39;, cre: &#39;Joe Wright&#39;, date: 2007, type: &#39;Movie&#39; }, Media { name: &#39;Prestige&#39;, cre: &#39;Christopher Nolan&#39;, date: 2006, type: &#39;Movie&#39; }, Media { name: &#39;Fargo&#39;, cre: &#39;Noah Hawley&#39;, date: 2014, type: &#39;Show&#39; }, Media { name: &#39;Daredevil&#39;, cre: &#39;Kati Johnson&#39;, date: 2015, type: &#39;Show&#39; } ] string; Fargo string; {&#34;name&#34;:&#34;Fargo&#34;,&#34;cre&#34;:&#34;Noah Hawley&#34;,&#34;date&#34;:2014,&#34;type&#34;:&#34;Show&#34;} object; { name: &#39;Fargo&#39;, cre: &#39;Noah Hawley&#39;, date: 2014, type: &#39;Show&#39; } .",
            "url": "https://manigggg18.github.io/manimani/jupyter/java_ipynb",
            "relUrl": "/jupyter/java_ipynb",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Program Purpose - Mani's Idea",
            "content": "Same Design as Create Performance Task . initial design concept: In the form of a “loading screen”. The “loading screen” gets filled with each click. . Features: Timer, Calculator, Counter, Scoring System, Frontend elements. . Language: Undecided . Objective: Click as fast as possible in a given time. . . . . DISCLAIMER: This is just an idea for the group project and NOT a final concept. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/22/prpurpose.html",
            "relUrl": "/markdown/2022/09/22/prpurpose.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Testing Local Server Functions",
            "content": "Process . After entering the “make server” command on a terminal and letting it run, I decided to add a minor change to ‘index.html`. Some texts came up on the terminal and the change was presented immediately. The only problem was that adding a Jupyter Notebook and editing it did not have any effects. . Effects . . . .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/14/ls.html",
            "relUrl": "/markdown/2022/09/14/ls.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "CPT Initial Concept",
            "content": "Individual/Collaboration: Undecided . Language: Python or JavaScript . Goals: . Final program code (created independently or collaboratively) . | A video that displays the running of your program and demonstrates functionality you developed (created independently) . | Written responses to all the prompts in the performance task (created independently) . | . Plan: . I’m planning to design a simple yet creative game, though I’m still not sure what development program I’m going to use. . My initial concept is a time based game. The user has to click/press a key for a specified number of times before the time runs out. I’m planning to implement a code that makes the game harder after each “level”. . Design: . I’m still working on it, but my initial design concept is in the form of a “loading screen”. The “loading screen” gets filled with each click. . .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/11/cpt1.html",
            "relUrl": "/markdown/2022/09/11/cpt1.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "App Development Blog",
            "content": "Link to the app can be found at the bottom of the page. . Note: These code blocks are not optimized for Python. . . Process . Making the quiz was very simple and interesting. The quiz includes 3 multiple-choice questions and 1 free-response question. Working with different elements such as buttons and images was easy for the most part and didn’t present any challenges. Making the free response question was a bit tricky. I had to play around with its assigned block and the text input function to make it work. . # Default Notation . onEvent(&quot;textinput&quot;, &quot;change&quot;, function(event) { . }); . # My Edit . onEvent(&quot;text_input1&quot;, &quot;change&quot;, function(event) { . }); . . Another extra feature that I added to my app was the usage of retrieving data from a text input. By adding the following code to the text input function, I managed to display the entered number from the free-response question: . # Default Notation . onEvent(&quot;textinput&quot;, &quot;change&quot;, function(event) { . setText(&quot;id&quot;, + getText(&quot;textinput&quot;)); . | setScreen(&quot;id&quot;); . | . }); . # My Edit . onEvent(&quot;text_input1&quot;, &quot;change&quot;, function(event) { . setText(&quot;response&quot;, &quot;Wow, only &quot; + getText(&quot;text_input1&quot;) + &quot;?&quot;); . | setScreen(&quot;r1&quot;); . | . }); . . . I also added to add “wrong answer” screens which appear if the user selects wrong answers. I simply assigned these screens to appropriate buttons. . . . Currently I’m trying to figure out a way to make the code a bit shorter using conditionals, but I don’t think it’ll work since I’m not that familiar with JavaScript. . . Update . I decided to use the dropdown function as a way to display a body of text. This dropdown box presents the “prize” to the user. . . . The trickiest part of developing this quiz was displaying the final score at the end. I used a variables and individual functions to make it work. The individual functions largely increase the size of the code and I couldn’t find a way to shorten them. Each individual function is assigned to a button. Buttons with correct answers add one point to the initial variable and buttons with incorrect answers subtract one point. . # setting the variable . var score = 0; . setText(&quot;text_input&quot;, &quot;Score = &quot; + score); . onEvent(&quot;id&quot;, &quot;click&quot;, function(event) { # in this case, id is a correct answer . score = score + 1; . | setText(&quot;text_input&quot;, &quot;Score = &quot; + score); # one point added . | . }); . onEvent(&quot;id&quot;, &quot;click&quot;, function(event) { # in this case, id is an incorrect answer . score = score - 1; . | setText(&quot;text_input&quot;, &quot;Score = &quot; + score); # one point subtracted . | . }); . . . You can check out the quiz by clicking here. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/11/appblog.html",
            "relUrl": "/markdown/2022/09/11/appblog.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Changing the Theme (Effects)",
            "content": "First Attempt . I tried to change the theme and as a result the CI status changed from “passing” to “failing”. My page also didn’t look any different. . . Second Attempt . . It worked but some posts looked very off-putting. . . So I changed it back to the default theme. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/09/01/theme.html",
            "relUrl": "/markdown/2022/09/01/theme.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Basic L/D . name = &quot;Mani T&quot; print(&quot;name&quot;, name, type(name)) age = 17 print(&quot;age&quot;, age, type(age)) score = 100.0 print(&quot;score&quot;, score, type(score)) print() langs = [&quot;Python&quot;, &quot;Bash&quot;, &quot;HTML&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() person = { &quot;name&quot;: name, # keys and values &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Mani T &lt;class &#39;str&#39;&gt; age 17 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;Bash&#39;, &#39;HTML&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Mani T&#39;, &#39;age&#39;: 17, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;Bash&#39;, &#39;HTML&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Mani T &lt;class &#39;str&#39;&gt; . Complex L/D . InfoDb = [] InfoDb.append({ #introduces the data &quot;FirstName&quot;: &quot;Mani&quot;, &quot;LastName&quot;: &quot;Taleban&quot;, &quot;DOB&quot;: &quot;May 8&quot;, &quot;Residence&quot;: &quot;Somewhere&quot;, &quot;SE&quot;: &quot;moeint56403@stu.powayusd.com&quot;, &quot;PE&quot;: &quot;tmanimasih@gmail.com&quot;, &quot;School&quot;: &quot;Del Norte High School&quot;, &quot;FM&quot;: &quot;Whiplash&quot;, &quot;FB&quot;: &quot;Radiohead&quot; }) print(InfoDb) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma = space print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t = tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;School Email:&quot;, d_rec[&quot;SE&quot;]) print(&quot; t&quot;, &quot;Personal Email:&quot;, d_rec[&quot;PE&quot;]) print(&quot; t&quot;, &quot;School:&quot;, d_rec[&quot;School&quot;]) print(&quot; t&quot;, &quot;Favorite Movie:&quot;, d_rec[&quot;FM&quot;]) print(&quot; t&quot;, &quot;Favorite Band:&quot;, d_rec[&quot;FB&quot;]) print() def for_loop(): # for loop print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . [{&#39;FirstName&#39;: &#39;Mani&#39;, &#39;LastName&#39;: &#39;Taleban&#39;, &#39;DOB&#39;: &#39;May 8&#39;, &#39;Residence&#39;: &#39;Somewhere&#39;, &#39;SE&#39;: &#39;moeint56403@stu.powayusd.com&#39;, &#39;PE&#39;: &#39;tmanimasih@gmail.com&#39;, &#39;School&#39;: &#39;Del Norte High School&#39;, &#39;FM&#39;: &#39;Whiplash&#39;, &#39;FB&#39;: &#39;Radiohead&#39;}] For loop output Mani Taleban Residence: Somewhere Birth Day: May 8 School Email: moeint56403@stu.powayusd.com Personal Email: tmanimasih@gmail.com School: Del Norte High School Favorite Movie: Whiplash Favorite Band: Radiohead . For Loop with an Index . InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;Mani&quot;, &quot;LastName&quot;: &quot;Taleban&quot;, &quot;DOB&quot;: &quot;May 8&quot;, &quot;Residence&quot;: &quot;Somewhere&quot;, &quot;SE&quot;: &quot;moeint56403@stu.powayusd.com&quot;, &quot;PE&quot;: &quot;tmanimasih@gmail.com&quot;, &quot;School&quot;: &quot;Del Norte High School&quot;, &quot;FM&quot;: &quot;Whiplash&quot;, &quot;FB&quot;: &quot;Radiohead&quot; }) print(InfoDb) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . [{&#39;FirstName&#39;: &#39;Mani&#39;, &#39;LastName&#39;: &#39;Taleban&#39;, &#39;DOB&#39;: &#39;May 8&#39;, &#39;Residence&#39;: &#39;Somewhere&#39;, &#39;SE&#39;: &#39;moeint56403@stu.powayusd.com&#39;, &#39;PE&#39;: &#39;tmanimasih@gmail.com&#39;, &#39;School&#39;: &#39;Del Norte High School&#39;, &#39;FM&#39;: &#39;Whiplash&#39;, &#39;FB&#39;: &#39;Radiohead&#39;}] While loop output Mani Taleban Residence: Somewhere Birth Day: May 8 School Email: moeint56403@stu.powayusd.com Personal Email: tmanimasih@gmail.com School: Del Norte High School Favorite Movie: Whiplash Favorite Band: Radiohead . InfoDb based Quiz . import getpass ,sys def question_and_answer(prompt, answer): # question and answer function print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) if answer == msg.lower(): # this conditional determines the answers print(&quot;:)&quot;) global correct correct += 1 else: print (&quot;:(&quot;) questions = 5 correct = 0 Q1 = question_and_answer(&quot;What should I listen to right now?&quot;, &quot;music&quot;) Q2 = question_and_answer(&quot;When was I born?&quot;, &quot;may 8&quot;) Q3 = question_and_answer(&quot;Why was I born?&quot;, &quot;idk&quot;) Q4 = question_and_answer(&quot;Who plays Fletcher in Whiplash?&quot;, &quot;jk simmons&quot;) Q5 = question_and_answer(&quot;How&#39;s it going?&quot;, &quot;eh&quot;) Questions = { # infoDb &quot;Q1&quot;: Q1, &quot;Q2&quot;: Q2, &quot;Q3&quot;: Q3, &quot;Q4&quot;: Q4, &quot;Q5&quot;: Q5 } print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Question: What should I listen to right now? Answer: music :) Question: When was I born? Answer: may 8 :) Question: Why was I born? Answer: idk :) Question: Who plays Fletcher in Whiplash? Answer: jk simmons :) Question: How&#39;s it going? Answer: eh :) manimani you scored 5/5 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/python_lists",
            "relUrl": "/jupyter/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Physics Notes 1",
            "content": "Background . Too often we think the goal of a laboratory is to “get an answer”. Just as a graph with one point does not tell us much, calculating a single value can be misleading. Although the accuracy of this value can be determined if a standard value is known, the precision or reproducibility cannot. One way to picture this precision is to graph the data and fit the data points with a best fit line. A best fit line should be drawn with as many points above it as below it, the closer the data points are to the line the more precise and reliable your results. . The equation describing the graph also shows how variables are related, allowing new values to be extrapolated or calculated from the graph. An additional step called “linearizing” helps determine the functional relationship between variables. . The objective of the linearizing process is to change the independent or dependent variable, for example change x to 1/x, so that the resulting graph is linear. So then, the equation describing the linear graph becomes; . y = slope (1/x) + intercept . Credits to Mr. Liao .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/08/28/physicsnotes.html",
            "relUrl": "/markdown/2022/08/28/physicsnotes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Calculator",
            "content": "def add(x, y): return x + y def subtract(x, y): return x - y def divide(x, y): return x / y def multiply(x, y): return x * y print(&quot;Select operation.&quot;) print(&quot;1.Add&quot;) print(&quot;2.Subtract&quot;) print(&quot;3.Multiply&quot;) print(&quot;4.Divide&quot;) while True: choice = input(&quot;Enter choice(1/2/3/4): &quot;) if choice in (&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;): num1 = float(input(&quot;Enter first number: &quot;)) num2 = float(input(&quot;Enter second number: &quot;)) if choice == &#39;1&#39;: print(num1, &quot;+&quot;, num2, &quot;=&quot;, add(num1, num2)) elif choice == &#39;2&#39;: print(num1, &quot;-&quot;, num2, &quot;=&quot;, subtract(num1, num2)) elif choice == &#39;3&#39;: print(num1, &quot;*&quot;, num2, &quot;=&quot;, multiply(num1, num2)) elif choice == &#39;4&#39;: print(num1, &quot;/&quot;, num2, &quot;=&quot;, divide(num1, num2)) next_calculation = input(&quot;Let&#39;s do next calculation? (yes/no): &quot;) if next_calculation == &quot;no&quot;: break else: print(&quot;Invalid Input&quot;) . Select operation. 1.Add 2.Subtract 3.Multiply 4.Divide 5.0 + 8.0 = 13.0 .",
            "url": "https://manigggg18.github.io/manimani/jupyter/2022/08/26/calc.html",
            "relUrl": "/jupyter/2022/08/26/calc.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Python Practice/Quiz",
            "content": "The purpose of this entry is to capture the basics of Python in Jupyter. . Greetings . This greeting code uses a simple print command. . print(&quot;Hello, please go ahead and try to don&#39;t fail the quiz!&quot;) # a greeting . The following code sequences provide a quiz about the basics of Python by using those basics: . import: Includes functions that were previously developed. . def: def/function/procedure; used for defining a function usually at the beginning of a sequence. . prompt: A message output to the user to describe the input requested. . msg: Short for message, used to capture input command. . Questions, answers and responses are defined using these basics. . Rsp and if/else commands will be used for evaluating scores. . Part 1: Mr. Mortensen&#39;s Questions . import getpass ,sys def question_and_answer(prompt): # defining the Q&amp;A Function print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 # number of questions correct = 0 # running score print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) # greetings print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) # the number of questions is presented here question_and_answer(&quot;Are you ready to take a test?&quot;) # this question does not need a correct answer since it&#39;s not using an rsp variable rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) # the following questions require a correct answer since they are using an rsp variable if rsp == &quot;import&quot;: # correct answer print(rsp + &quot; is correct!&quot;) # response to a correct answer correct += 1 # gain points by answering correctly else: # giving an incorrect answer print(rsp + &quot; is incorrect!&quot;) # response to an incorrect answer rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # marks the end of the quiz . Hello, manimani running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: Yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! manimani you scored 3/3 . Part 2: My Questions . import getpass ,sys questions = 3 correct = 0 rsp = question_with_response(&quot;What is the classic greetings in Python?&quot;) if rsp == &quot;Hello, World!&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command activates the jupyter notebook input box?&quot;) if rsp == &quot;input&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Where is the false branch of code in an if command?&quot;) if rsp == &quot;else&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Question: What is the classic greetings in Python? Hello, World! is correct! Question: What command activates the jupyter notebook input box? input is correct! Question: Where is the false branch of code in an if command? else is correct! manimani you scored 3/3 . The end of the quiz. Have a nice day! . Additional Resources: . These CollegeBoard videos are great for learning more about Python. .",
            "url": "https://manigggg18.github.io/manimani/jupyter/2022/08/25/pythonlearnings.html",
            "relUrl": "/jupyter/2022/08/25/pythonlearnings.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "Inspirational Quote",
            "content": ".",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/08/25/inspirationalquote.html",
            "relUrl": "/markdown/2022/08/25/inspirationalquote.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "An Ied Assignment",
            "content": "This is an assignment from “Intro to Engineering Design” that I thought I should share. Please don’t plagiarize. . Category Explanation . Client | Entertainment/Toy manufacturing Companies (Main option: Hasbro) | . Target Consumer | High school students of all ages living with their parents/guardians | . Designer(s) | Mani Taleban | . Problem Statement | A high school student can only use their phone and computer device for education and school assignments. The student’s parents have forbidden them from accessing their phone and computer device for entertainment purposes. The student needs approximately 10 minutes between assignments to do an entertaining activity in order to become fully operational again and avoid severe boredom. The student always experiences boredom during the 10-minute breaks between assignments. The student finds it necessary to find a solution, because they cannot continue operating correctly without having some source of entertainment and refreshment. | . Design Statement | Create an entertaining, refreshing, and engaging activity/game | . Criteria | Should be playable for approximately 10 minutes . | Should have a scoring system . | Should be both single-player and multi-player . | Should increase the level of dopamine . | | . Constraints | Should only use common office supplies . | Should cost no money . | Should fit in an office-sized room environment . | Creating the activity/game should take no longer than 5 minutes . | | .",
            "url": "https://manigggg18.github.io/manimani/2022/08/24/An-IED-Assignment.html",
            "relUrl": "/2022/08/24/An-IED-Assignment.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "Tools & Equipment Check",
            "content": "Bash Check . Project Directory . echo &quot;Using conditional statement to create a project directory and project&quot; export project_dir=$HOME/vscode export project=$project_dir/manimani export project_repo=&quot;https://github.com/manigggg18/manimani.git&quot; cd ~ if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Fastpages . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al . echo &quot;Look for posts&quot; export posts=$project/_posts cd $posts pwd ls -l . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks cd $notebooks pwd ls -l . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images pwd ls -l . Markdown Files . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md echo &quot;&quot; echo &quot;end of README.md&quot; . Env, Git, and Github . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config . Installation Check . Python Check . python --version python2 --version . Conda Check . conda list . echo Conda Check test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . Jupyter Check . jupyter --version jupyter kernelspec list . test=&quot;python3&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . Tools and Equipment Check Successful .",
            "url": "https://manigggg18.github.io/manimani/jupyter/2022/08/22/two.html",
            "relUrl": "/jupyter/2022/08/22/two.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "Hopefully My First Markdown Post",
            "content": "Here We Go . Testing . Apparently “Jekyll requires blog post files to be named according to the following format”: . 2022-08-20-maaaarkdoooown.md . I think I’m going to leave this empty. . I Hope I Know What I’m Doing . I really do. . . Favorite Instruments . Here’s a list: . Piano (Can Play) | Drums (Cannot Play) | . Here’s a Quote . Life is like a sandwich, no matter which side you start from, the bread always comes first. . Images . I don’t like images. . The End…? . I think so. .",
            "url": "https://manigggg18.github.io/manimani/markdown/2022/08/22/test-markdown-post.html",
            "relUrl": "/markdown/2022/08/22/test-markdown-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "An Attempt to Create My First Jupyter Notebook",
            "content": "Chapter 1 . This is Chapter 1, thanks for reading. . Chapter 2 . This is Chapter 2, very exciting. . Final Chapter . This is the final chapter, what an epic trilogy. . Thanks for reading. .",
            "url": "https://manigggg18.github.io/manimani/jupyter/2022/08/21/firstnotebook.html",
            "relUrl": "/jupyter/2022/08/21/firstnotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Mani Taleban is a High School Senior at DNHS, taking AP Computer Science. .",
          "url": "https://manigggg18.github.io/manimani/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Game",
          "content": "Welcome To Code-Crunch! . First timer? Don&#39;t worry! You&#39;ll get the hang of it. Click the Play button, and try to match as many cards as possible in under 25 seconds. Each matched pair is 1 point. Your score is displayed on the blue box. Be careful, the timer isn&#39;t really fair! . Play Close Score",
          "url": "https://manigggg18.github.io/manimani/game",
          "relUrl": "/game",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Notes & Vocab",
          "content": "This page will be used for taking notes throughout the APCSP course . . Week Markdown Jupyter Other Projects . 25 | -- | -- | -- | -- | . 24 | Tri 2 MCQ #2 | Create Performance Task | Code Crunch FINISHED!!! | CPT Week (Finals week) | . 23 | Tri 2 N@tM Blog | n/a | Working on CodeCrunch | CPT Week | . 22 | 5.5, 5.6 | n/a | Working on CodeCrunch | CPT Week | . 21 | 5.3, 5.4, CPT Planning Blog | n/a | Working on CodeCrunch | CPT Week | . 20 | Tri 2 MCQ Test #1, 5.1, 5.2 | n/a | Working on CodeCrunch | CPT Week | . 19 | CPT Scoring #3 | n/a | Working on CodeCrunch | CPT Week | . 18 | CPT Scoring #2, CPT Progress Blog | Model and Object-Oriented Programming | Working on CodeCrunch | CPT Week | . 17 | CPT Scoring #1 | n/a | Working on CodeCrunch | CPT Week | . 16 | Lesson 7 Hacks | 14-15, 16, 17-18, Vocab | n/a | Teaching Week | . 15 | n/a | 8-10, 9-11, 12-13 | n/a | Teaching Week | . 14 | n/a | 1-2, 3-4, 5-7 | n/a | Teaching Week | . 13 | Binary, Section 3 Notes &amp; Plans | n/a | Teaching Preparation | Teaching Week | . 12 | Trimester 1 Final Corrections Blog | n/a | Finals | n/a | . 11 | N@tM Blog | n/a | n/a | Final Project Finished | . 10 | n/a | n/a | n/a | Working on Final Project | . 9 | n/a | Python Web API Endpoints using Songs, Javascript Web Page using an API, Fetch of Backend Songs | n/a | Working On Final Project | . 8 | AP 4.1 Quiz Blog | n/a | n/a | Group Project Plan Check-in | . 7 | AP 1.4 Quiz Blog | Python RapidAPI, Identifying Errors | n/a | Group Project Final Plan | . 6 | AWS Development | n/a | n/a | AWS Server Setup (Docker included) | . 5 | AP 1.1-1.3 Quiz Blog | Java Table, Java (IPYNB) | n/a | Submenu, Group Planning for Final Project | . 4 | Testing Local Server Functions, Program Purpose - Mani&#39;s Idea | n/a | n/a | Personal Flask Server, Setting up Fastpages local server, Docker Setup, Flask Video | . 3 | Code.org App Development Blog, CPT Initial Plan/Design | n/a | n/a | Code.org App | . 2 | Changing the Theme (effects) | Lists, Dictionaries, and Iterations | n/a | Table, Dark Theme | . 1 | Physics Notes, Inspirational Post | Python Intro, Calculator, Tools and Equipment Check | Sample Word Doc | Page Logo, Notes &amp; Vocab, Images | . 0 | Sample MD Post | Sample Jypyter Notebook | n/a | Images, Links, index.html, _config.yml | . Week 0 . Sample Jupyter Notebook . Sample Markdown Post . Week 1 . Tools and Equipment Check . Sample Word Document . Python Intro . Inspirational Post . Calculator . Physics Notes #1 . Week 2 . Lists, Dictionaries, and Iterations . Changing the Theme (Effects) . Week 3 . Code.org App Development Blog . Code.org App . CPT Initial Concept/Design . Week 4 . Testing Local Server Functions . Program Purpose - Mani’s Idea . Personal Flask Server . Setting up Fastpages local server (NOTE: only works locally) . Docker Setup . Flask Video . Week 5 . AP 1.1-1.3 Quiz Blog . Java Table . Java (IPYNB) . Submenu . Group Planning for Final Project . Week 6 . AWS Development . AWS Server Setup (Docker included) . Week 7 . AP 1.4 Quiz Blog . Python RapidAPI . Identifying Errors . Group Project Final Plan . Week 8 . AP 4.1 Quiz Blog . Group Project Plan Check . Week 9 . Python Web API Endpoints using Songs . Javascript Web Page using an API . Fetch of Backend Songs . Working On Final Project . Week 10 . Working on Final Project . Week 11 . N@tm Blog . Final Project Finished . Week 12 . Finals . Week 13 . Binary . Section 3 Notes and Plans . Week 14 . 1-2 . 3-4 . 5-7 . Lesson 7 Extra . Week 15 . 8-10 . 9-11 . 12-13 . Week 16 . 14-15 . 16 . 17-18 . Class Notes . Week 17 . CPT Scoring Blog . Week 18 . CPT Scoring Blog 2 . CPT Progress Blog . Model and Object-Oriented Programming . Week 19 . CPT Scoring Blog #3 . Week 20 . Tri 2 MCQ Test #1 . 5.1 and 5.2 . Week 21 . 5.3 and 5.4 . CPT Planning Blog . Week 22 . 5.5 and 5.6 . Week 23 . Tri 2 N@tM . Week 24 . Code Crunch . Tri 2 MCQ Test #2 . CPT Blog . Week 25 .",
          "url": "https://manigggg18.github.io/manimani/notes%20&%20vocab/",
          "relUrl": "/notes & vocab/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Lessons",
          "content": "Assignment Lesson Grade . 1 | 3.1-3.2 | .9/1 | . 2 | 3.3-3.4 | n/a | . 3 | 3.5-3.7 | .9/1 | . 4 | 3.8-3.10 | .9/1 | . 5 | 3.9-3.11 | .9/1 | . 6 | 3.12-3.13 | .9/1 | . 7 | 3.14-3.15 | .95/1 | . 8 | 3.16 | .8 | . 9 | 3.17-3.18 | .87 | . &lt;/table&gt; . .",
          "url": "https://manigggg18.github.io/manimani/lessons/",
          "relUrl": "/lessons/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://manigggg18.github.io/manimani/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}